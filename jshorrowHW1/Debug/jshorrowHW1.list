
jshorrowHW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800abb0  0800abb0  0000bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ace4  0800ace4  0000bce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acec  0800acec  0000bcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800acf0  0800acf0  0000bcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  24000000  0800acf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000030c  24000074  0800ad68  0000c074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000380  0800ad68  0000c380  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a288  00000000  00000000  0000c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c2c  00000000  00000000  0002632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001550  00000000  00000000  00028f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010a4  00000000  00000000  0002a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c87  00000000  00000000  0002b54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a45f  00000000  00000000  000611d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00164341  00000000  00000000  0007b632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001df973  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006424  00000000  00000000  001df9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001e5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000074 	.word	0x24000074
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ab98 	.word	0x0800ab98

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000078 	.word	0x24000078
 800030c:	0800ab98 	.word	0x0800ab98

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f001 facb 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f8bb 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fab7 	bl	8000c20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b2:	f000 fa61 	bl	8000b78 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006b6:	f000 faab 	bl	8000c10 <MX_USB_OTG_HS_USB_Init>
  MX_TIM2_Init();
 80006ba:	f000 f99b 	bl	80009f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006be:	f000 f9e9 	bl	8000a94 <MX_TIM3_Init>
  MX_ADC1_Init();
 80006c2:	f000 f91f 	bl	8000904 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
#if Switch
  uint32_t check = 60000;
 80006c6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80006ca:	607b      	str	r3, [r7, #4]
  uint32_t countOne = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  uint32_t countTwo = check / 3;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a45      	ldr	r2, [pc, #276]	@ (80007e8 <main+0x148>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	085b      	lsrs	r3, r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  uint32_t countThree = countTwo * 2;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]

  uint16_t displayCount = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	817b      	strh	r3, [r7, #10]
  uint8_t displayIndex = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	727b      	strb	r3, [r7, #9]
  uint16_t displayCheck = 500;
 80006ea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006ee:	807b      	strh	r3, [r7, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	HAL_TIM_Base_Start_IT(&htim2);
 80006f0:	483e      	ldr	r0, [pc, #248]	@ (80007ec <main+0x14c>)
 80006f2:	f007 f9bf 	bl	8007a74 <HAL_TIM_Base_Start_IT>
  	HAL_Delay(175);
  	toggleAndPrintGpioState(GPIOA, RedLED_Pin, (uint8_t*) "EXTERNAL: RED LED");
  	HAL_Delay(175);
#endif
#if Switch
  	switchToggle(GPIOD,
 80006f6:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <main+0x150>)
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2320      	movs	r3, #32
 80006fc:	4a3d      	ldr	r2, [pc, #244]	@ (80007f4 <main+0x154>)
 80006fe:	2180      	movs	r1, #128	@ 0x80
 8000700:	483d      	ldr	r0, [pc, #244]	@ (80007f8 <main+0x158>)
 8000702:	f000 fc9b 	bl	800103c <switchToggle>
								 SwitchOne_Pin,
								 GPIOA,
								 YellowLED_Pin,
								 (uint8_t*) "External: Yellow");
  	switchToggle(GPIOD,
 8000706:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <main+0x15c>)
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2310      	movs	r3, #16
 800070c:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <main+0x154>)
 800070e:	2140      	movs	r1, #64	@ 0x40
 8000710:	4839      	ldr	r0, [pc, #228]	@ (80007f8 <main+0x158>)
 8000712:	f000 fc93 	bl	800103c <switchToggle>
								 SwtichTwo_Pin                                                                                                                                                                ,
								 GPIOA,
								 BlueLED_Pin,
								 (uint8_t*) "External: Blue");
  	switchToggle(GPIOG,
 8000716:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <main+0x160>)
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	4a35      	ldr	r2, [pc, #212]	@ (80007f4 <main+0x154>)
 800071e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000722:	4838      	ldr	r0, [pc, #224]	@ (8000804 <main+0x164>)
 8000724:	f000 fc8a 	bl	800103c <switchToggle>
								 Switch1_Pin                                                                                                                                                                ,
								 GPIOA,
								 RedLED_Pin,
								 (uint8_t*) "External: RED");

  	countOne += 1;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
  	countTwo += 1;
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	3301      	adds	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  	countThree += 1;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
  	if (countOne > check)
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d907      	bls.n	8000752 <main+0xb2>
  	{
  		toggleAndPrintGpioState(GPIOB, LED_RED_Pin, (uint8_t*) "STM: RED LED");
 8000742:	4a31      	ldr	r2, [pc, #196]	@ (8000808 <main+0x168>)
 8000744:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000748:	4830      	ldr	r0, [pc, #192]	@ (800080c <main+0x16c>)
 800074a:	f000 fcbd 	bl	80010c8 <toggleAndPrintGpioState>
  		countOne = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  	}
  	if (countTwo > check)
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	429a      	cmp	r2, r3
 8000758:	d906      	bls.n	8000768 <main+0xc8>
		{
  		toggleAndPrintGpioState(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (uint8_t*) "STM: YELLOW LED");
 800075a:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <main+0x170>)
 800075c:	2102      	movs	r1, #2
 800075e:	482d      	ldr	r0, [pc, #180]	@ (8000814 <main+0x174>)
 8000760:	f000 fcb2 	bl	80010c8 <toggleAndPrintGpioState>
			countTwo = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
		}
  	if (countThree > check)
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	d908      	bls.n	8000782 <main+0xe2>
		{
  		toggleAndPrintGpioState(GPIOB, LED_GREEN_Pin, (uint8_t*) "STM: GREEN LED");
 8000770:	4a29      	ldr	r2, [pc, #164]	@ (8000818 <main+0x178>)
 8000772:	2101      	movs	r1, #1
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <main+0x16c>)
 8000776:	f000 fca7 	bl	80010c8 <toggleAndPrintGpioState>
			countThree = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
			//lowerDisplay += 1;
			printTemp();
 800077e:	f000 fbe7 	bl	8000f50 <printTemp>
		}


  	displayCount += 1;
 8000782:	897b      	ldrh	r3, [r7, #10]
 8000784:	3301      	adds	r3, #1
 8000786:	817b      	strh	r3, [r7, #10]

  	if (displayCount >= displayCheck)
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	887b      	ldrh	r3, [r7, #2]
 800078c:	429a      	cmp	r2, r3
 800078e:	d304      	bcc.n	800079a <main+0xfa>
  	{
  		displayCount = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	817b      	strh	r3, [r7, #10]
  		displayIndex += 1;
 8000794:	7a7b      	ldrb	r3, [r7, #9]
 8000796:	3301      	adds	r3, #1
 8000798:	727b      	strb	r3, [r7, #9]
  	}
  	if (displayIndex == 3)
 800079a:	7a7b      	ldrb	r3, [r7, #9]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d103      	bne.n	80007a8 <main+0x108>
  	{
  		setDecimal(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fdc3 	bl	800132c <setDecimal>
 80007a6:	e002      	b.n	80007ae <main+0x10e>
  	}
  	else
  	{
  		setDecimal(0);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fdbf 	bl	800132c <setDecimal>
  	}

  	if (displayIndex >= 5)
 80007ae:	7a7b      	ldrb	r3, [r7, #9]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d901      	bls.n	80007b8 <main+0x118>
  	{
  		displayIndex = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	727b      	strb	r3, [r7, #9]
  	}

  	displayOneNumber((lowerDisplay + (100 * upperDisplay)), displayIndex);
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <main+0x17c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	0092      	lsls	r2, r2, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	0091      	lsls	r1, r2, #2
 80007c8:	461a      	mov	r2, r3
 80007ca:	460b      	mov	r3, r1
 80007cc:	4413      	add	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <main+0x180>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4413      	add	r3, r2
 80007da:	b29b      	uxth	r3, r3
 80007dc:	7a7a      	ldrb	r2, [r7, #9]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fd15 	bl	8001210 <displayOneNumber>
  	HAL_TIM_Base_Start_IT(&htim2);
 80007e6:	e783      	b.n	80006f0 <main+0x50>
 80007e8:	aaaaaaab 	.word	0xaaaaaaab
 80007ec:	24000100 	.word	0x24000100
 80007f0:	0800abb0 	.word	0x0800abb0
 80007f4:	58020000 	.word	0x58020000
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	0800abc4 	.word	0x0800abc4
 8000800:	0800abd4 	.word	0x0800abd4
 8000804:	58021800 	.word	0x58021800
 8000808:	0800abe4 	.word	0x0800abe4
 800080c:	58020400 	.word	0x58020400
 8000810:	0800abf4 	.word	0x0800abf4
 8000814:	58021000 	.word	0x58021000
 8000818:	0800ac04 	.word	0x0800ac04
 800081c:	24000000 	.word	0x24000000
 8000820:	24000004 	.word	0x24000004

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	@ 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082e:	224c      	movs	r2, #76	@ 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f009 fb97 	bl	8009f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f009 fb91 	bl	8009f66 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000844:	2002      	movs	r0, #2
 8000846:	f003 fd37 	bl	80042b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <SystemClock_Config+0xdc>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a2b      	ldr	r2, [pc, #172]	@ (8000900 <SystemClock_Config+0xdc>)
 8000854:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b29      	ldr	r3, [pc, #164]	@ (8000900 <SystemClock_Config+0xdc>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <SystemClock_Config+0xdc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000876:	2321      	movs	r3, #33	@ 0x21
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000890:	f240 1313 	movw	r3, #275	@ 0x113
 8000894:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089a:	2304      	movs	r3, #4
 800089c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008a2:	2304      	movs	r3, #4
 80008a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fd3a 	bl	800432c <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008be:	f000 ff03 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	233f      	movs	r3, #63	@ 0x3f
 80008c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2303      	movs	r3, #3
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ce:	2308      	movs	r3, #8
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e0:	2340      	movs	r3, #64	@ 0x40
 80008e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2103      	movs	r1, #3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 f8f9 	bl	8004ae0 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f4:	f000 fee8 	bl	80016c8 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	@ 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024800 	.word	0x58024800

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2224      	movs	r2, #36	@ 0x24
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f009 fb22 	bl	8009f66 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000922:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000924:	4a31      	ldr	r2, [pc, #196]	@ (80009ec <MX_ADC1_Init+0xe8>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000928:	4b2f      	ldr	r3, [pc, #188]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800092a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800092e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000930:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000932:	2208      	movs	r2, #8
 8000934:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000936:	4b2c      	ldr	r3, [pc, #176]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093c:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800093e:	2204      	movs	r2, #4
 8000940:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000942:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000948:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000950:	2201      	movs	r2, #1
 8000952:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000962:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000982:	4819      	ldr	r0, [pc, #100]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 8000984:	f001 fcda 	bl	800233c <HAL_ADC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800098e:	f000 fe9b 	bl	80016c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 800099e:	f003 f8bf 	bl	8003b20 <HAL_ADCEx_MultiModeConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80009a8:	f000 fe8e 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_ADC1_Init+0xec>)
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b0:	2306      	movs	r3, #6
 80009b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009be:	2304      	movs	r3, #4
 80009c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_ADC1_Init+0xe4>)
 80009d2:	f002 f8bb 	bl	8002b4c <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009dc:	f000 fe74 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	@ 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	24000090 	.word	0x24000090
 80009ec:	40022000 	.word	0x40022000
 80009f0:	43210000 	.word	0x43210000

080009f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 549;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a1c:	f240 2225 	movw	r2, #549	@ 0x225
 8000a20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a2a:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <MX_TIM2_Init+0x9c>)
 8000a2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a3c:	f006 ffc2 	bl	80079c4 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a46:	f000 fe3f 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a58:	f007 fa96 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a62:	f000 fe31 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	@ (8000a8c <MX_TIM2_Init+0x98>)
 8000a74:	f007 fe38 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 fe23 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000100 	.word	0x24000100
 8000a90:	0007a11f 	.word	0x0007a11f

08000a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b74 <MX_TIM3_Init+0xe0>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 549;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ac8:	f240 2225 	movw	r2, #549	@ 0x225
 8000acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae8:	4821      	ldr	r0, [pc, #132]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000aea:	f006 ff6b 	bl	80079c4 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000af4:	f000 fde8 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4619      	mov	r1, r3
 8000b04:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000b06:	f007 fa3f 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000b10:	f000 fdda 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000b16:	f007 f833 	bl	8007b80 <HAL_TIM_IC_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000b20:	f000 fdd2 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480f      	ldr	r0, [pc, #60]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000b34:	f007 fdd8 	bl	80086e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000b3e:	f000 fdc3 	bl	80016c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b42:	230a      	movs	r3, #10
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2204      	movs	r2, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_TIM3_Init+0xdc>)
 8000b5a:	f007 f979 	bl	8007e50 <HAL_TIM_IC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000b64:	f000 fdb0 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	@ 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2400014c 	.word	0x2400014c
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <MX_USART3_UART_Init+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bc2:	f007 fe4b 	bl	800885c <HAL_UART_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f000 fd7c 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bd4:	f008 ffe5 	bl	8009ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bde:	f000 fd73 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000be6:	f009 f81a 	bl	8009c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 fd6a 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f008 ff9b 	bl	8009b30 <HAL_UARTEx_DisableFifoMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 fd62 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000198 	.word	0x24000198
 8000c0c:	40004800 	.word	0x40004800

08000c10 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4bbd      	ldr	r3, [pc, #756]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4abb      	ldr	r2, [pc, #748]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4bb9      	ldr	r3, [pc, #740]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4bb5      	ldr	r3, [pc, #724]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4ab4      	ldr	r2, [pc, #720]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4bb1      	ldr	r3, [pc, #708]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4bae      	ldr	r3, [pc, #696]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4aac      	ldr	r2, [pc, #688]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4baa      	ldr	r3, [pc, #680]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c90:	4ba6      	ldr	r3, [pc, #664]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4aa5      	ldr	r2, [pc, #660]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4ba2      	ldr	r3, [pc, #648]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b9f      	ldr	r3, [pc, #636]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	4a9d      	ldr	r2, [pc, #628]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbe:	4b9b      	ldr	r3, [pc, #620]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b97      	ldr	r3, [pc, #604]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd2:	4a96      	ldr	r2, [pc, #600]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cdc:	4b93      	ldr	r3, [pc, #588]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cea:	4b90      	ldr	r3, [pc, #576]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfa:	4b8c      	ldr	r3, [pc, #560]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d08:	4b88      	ldr	r3, [pc, #544]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0e:	4a87      	ldr	r2, [pc, #540]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d18:	4b84      	ldr	r3, [pc, #528]	@ (8000f2c <MX_GPIO_Init+0x30c>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DisplayOne_Pin|Middle_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2132      	movs	r1, #50	@ 0x32
 8000d2a:	4881      	ldr	r0, [pc, #516]	@ (8000f30 <MX_GPIO_Init+0x310>)
 8000d2c:	f003 faaa 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DisplayTwo_Pin|TopRight_Pin|BottomRight_Pin|Decimal_Pin
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 3107 	movw	r1, #775	@ 0x307
 8000d36:	487f      	ldr	r0, [pc, #508]	@ (8000f34 <MX_GPIO_Init+0x314>)
 8000d38:	f003 faa4 	bl	8004284 <HAL_GPIO_WritePin>
                          |BottomMid_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|BlueLED_Pin|YellowLED_Pin|RedLED_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2172      	movs	r1, #114	@ 0x72
 8000d40:	487d      	ldr	r0, [pc, #500]	@ (8000f38 <MX_GPIO_Init+0x318>)
 8000d42:	f003 fa9f 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d4c:	487b      	ldr	r0, [pc, #492]	@ (8000f3c <MX_GPIO_Init+0x31c>)
 8000d4e:	f003 fa99 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, TopMid_Pin|BottomLeft_Pin|DisplayFour_Pin|Switch1_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f241 2103 	movw	r1, #4611	@ 0x1203
 8000d58:	4879      	ldr	r0, [pc, #484]	@ (8000f40 <MX_GPIO_Init+0x320>)
 8000d5a:	f003 fa93 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|TopLeft_Pin|DisplayThree_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f240 4103 	movw	r1, #1027	@ 0x403
 8000d64:	4877      	ldr	r0, [pc, #476]	@ (8000f44 <MX_GPIO_Init+0x324>)
 8000d66:	f003 fa8d 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DisplayOne_Pin Middle_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = DisplayOne_Pin|Middle_Pin|LED_YELLOW_Pin;
 8000d6a:	2332      	movs	r3, #50	@ 0x32
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	486b      	ldr	r0, [pc, #428]	@ (8000f30 <MX_GPIO_Init+0x310>)
 8000d82:	f003 f8bf 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	486b      	ldr	r0, [pc, #428]	@ (8000f48 <MX_GPIO_Init+0x328>)
 8000d9c:	f003 f8b2 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : DisplayTwo_Pin TopRight_Pin BottomRight_Pin Decimal_Pin
                           BottomMid_Pin */
  GPIO_InitStruct.Pin = DisplayTwo_Pin|TopRight_Pin|BottomRight_Pin|Decimal_Pin
 8000da0:	f240 3307 	movw	r3, #775	@ 0x307
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BottomMid_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	485e      	ldr	r0, [pc, #376]	@ (8000f34 <MX_GPIO_Init+0x314>)
 8000dba:	f003 f8a3 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dbe:	2332      	movs	r3, #50	@ 0x32
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dce:	230b      	movs	r3, #11
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	485b      	ldr	r0, [pc, #364]	@ (8000f48 <MX_GPIO_Init+0x328>)
 8000dda:	f003 f893 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig_Pin */
  GPIO_InitStruct.Pin = Trig_Pin;
 8000dde:	2302      	movs	r3, #2
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	4850      	ldr	r0, [pc, #320]	@ (8000f38 <MX_GPIO_Init+0x318>)
 8000df6:	f003 f885 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BlueLED_Pin YellowLED_Pin RedLED_Pin */
  GPIO_InitStruct.Pin = BlueLED_Pin|YellowLED_Pin|RedLED_Pin;
 8000dfa:	2370      	movs	r3, #112	@ 0x70
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4849      	ldr	r0, [pc, #292]	@ (8000f38 <MX_GPIO_Init+0x318>)
 8000e12:	f003 f877 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e16:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4843      	ldr	r0, [pc, #268]	@ (8000f3c <MX_GPIO_Init+0x31c>)
 8000e30:	f003 f868 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TopMid_Pin BottomLeft_Pin DisplayFour_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = TopMid_Pin|BottomLeft_Pin|DisplayFour_Pin|Switch1_Pin;
 8000e34:	f241 2303 	movw	r3, #4611	@ 0x1203
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483c      	ldr	r0, [pc, #240]	@ (8000f40 <MX_GPIO_Init+0x320>)
 8000e4e:	f003 f859 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e64:	230b      	movs	r3, #11
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4833      	ldr	r0, [pc, #204]	@ (8000f3c <MX_GPIO_Init+0x31c>)
 8000e70:	f003 f848 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin TopLeft_Pin DisplayThree_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|TopLeft_Pin|DisplayThree_Pin;
 8000e74:	f240 4303 	movw	r3, #1027	@ 0x403
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482d      	ldr	r0, [pc, #180]	@ (8000f44 <MX_GPIO_Init+0x324>)
 8000e8e:	f003 f839 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4826      	ldr	r0, [pc, #152]	@ (8000f40 <MX_GPIO_Init+0x320>)
 8000ea8:	f003 f82c 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <MX_GPIO_Init+0x318>)
 8000ec2:	f003 f81f 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4815      	ldr	r0, [pc, #84]	@ (8000f38 <MX_GPIO_Init+0x318>)
 8000ee4:	f003 f80e 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SwtichTwo_Pin SwitchOne_Pin */
  GPIO_InitStruct.Pin = SwtichTwo_Pin|SwitchOne_Pin;
 8000ee8:	23c0      	movs	r3, #192	@ 0xc0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <MX_GPIO_Init+0x324>)
 8000efc:	f003 f802 	bl	8003f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f00:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f12:	230b      	movs	r3, #11
 8000f14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MX_GPIO_Init+0x320>)
 8000f1e:	f002 fff1 	bl	8003f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f22:	bf00      	nop
 8000f24:	3738      	adds	r7, #56	@ 0x38
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58021000 	.word	0x58021000
 8000f34:	58021400 	.word	0x58021400
 8000f38:	58020000 	.word	0x58020000
 8000f3c:	58020400 	.word	0x58020400
 8000f40:	58021800 	.word	0x58021800
 8000f44:	58020c00 	.word	0x58020c00
 8000f48:	58020800 	.word	0x58020800
 8000f4c:	00000000 	.word	0x00000000

08000f50 <printTemp>:
/*
 * @bried This will print the temp to console
 * 				This will also put temp on 7 seg display
 */
void printTemp()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	// Start using adc
	HAL_ADC_Start(&hadc1);
 8000f56:	482a      	ldr	r0, [pc, #168]	@ (8001000 <printTemp+0xb0>)
 8000f58:	f001 fbf8 	bl	800274c <HAL_ADC_Start>

	// Poll for value
	if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8000f5c:	4929      	ldr	r1, [pc, #164]	@ (8001004 <printTemp+0xb4>)
 8000f5e:	4828      	ldr	r0, [pc, #160]	@ (8001000 <printTemp+0xb0>)
 8000f60:	f001 fcf2 	bl	8002948 <HAL_ADC_PollForConversion>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d13b      	bne.n	8000fe2 <printTemp+0x92>
	{
		uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000f6a:	4825      	ldr	r0, [pc, #148]	@ (8001000 <printTemp+0xb0>)
 8000f6c:	f001 fde0 	bl	8002b30 <HAL_ADC_GetValue>
 8000f70:	60b8      	str	r0, [r7, #8]

		// Running at 3.3 volts with 12 bits of resolution (4095)
		// then convert 10mv per celcius
		float temp = ((adcValue * 320) / 4095.0);
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f84:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8000ff0 <printTemp+0xa0>
 8000f88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	edc7 7a01 	vstr	s15, [r7, #4]

		unsigned int tempAsInt = (unsigned int) temp;
 8000f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	60fb      	str	r3, [r7, #12]

		// Makes it a bit less jumpy because of floating point conversion
		if (tempAsInt != ((unsigned int) (temp - 0.2)))
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000faa:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000ff8 <printTemp+0xa8>
 8000fae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fb6:	ee17 2a90 	vmov	r2, s15
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d002      	beq.n	8000fc6 <printTemp+0x76>
		{
			tempAsInt -= 1;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
		}

		// Dont feel like importing float printing so just print as int,
		// makes displaying easier
		printf("The Temp is: %u\r\n", tempAsInt);
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	480f      	ldr	r0, [pc, #60]	@ (8001008 <printTemp+0xb8>)
 8000fca:	f008 ff77 	bl	8009ebc <iprintf>

		if (tempAsInt < 100)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b63      	cmp	r3, #99	@ 0x63
 8000fd2:	d803      	bhi.n	8000fdc <printTemp+0x8c>
		{
			upperDisplay = (uint32_t) tempAsInt;
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <printTemp+0xbc>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e002      	b.n	8000fe2 <printTemp+0x92>
		}
		else
		{
			upperDisplay = 0;
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <printTemp+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_ADC_Stop(&hadc1);
 8000fe2:	4807      	ldr	r0, [pc, #28]	@ (8001000 <printTemp+0xb0>)
 8000fe4:	f001 fc7c 	bl	80028e0 <HAL_ADC_Stop>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40affe00 	.word	0x40affe00
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fc99999 	.word	0x3fc99999
 8001000:	24000090 	.word	0x24000090
 8001004:	000f4240 	.word	0x000f4240
 8001008:	0800ac14 	.word	0x0800ac14
 800100c:	24000000 	.word	0x24000000

08001010 <incrementLowerDisplay>:

void incrementLowerDisplay()
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
	lowerDisplay += 1;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <incrementLowerDisplay+0x28>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <incrementLowerDisplay+0x28>)
 800101c:	6013      	str	r3, [r2, #0]
	if (lowerDisplay >= 100)
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <incrementLowerDisplay+0x28>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b63      	cmp	r3, #99	@ 0x63
 8001024:	d902      	bls.n	800102c <incrementLowerDisplay+0x1c>
	{
		lowerDisplay = 0;
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <incrementLowerDisplay+0x28>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	}
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	24000004 	.word	0x24000004

0800103c <switchToggle>:
void switchToggle(GPIO_TypeDef *GPIOx_Switch,
										 uint16_t GPIO_Pin_Switch,
										 GPIO_TypeDef *GPIOx_LED,
										 uint16_t GPIO_Pin_LED,
										 uint8_t *name)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	461a      	mov	r2, r3
 8001048:	460b      	mov	r3, r1
 800104a:	817b      	strh	r3, [r7, #10]
 800104c:	4613      	mov	r3, r2
 800104e:	813b      	strh	r3, [r7, #8]
	if (HAL_GPIO_ReadPin(GPIOx_Switch, GPIO_Pin_Switch) && !HAL_GPIO_ReadPin(GPIOx_LED, GPIO_Pin_LED))
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f003 f8fd 	bl	8004254 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d012      	beq.n	8001086 <switchToggle+0x4a>
 8001060:	893b      	ldrh	r3, [r7, #8]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f003 f8f5 	bl	8004254 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10a      	bne.n	8001086 <switchToggle+0x4a>
	{
		HAL_GPIO_WritePin(GPIOx_LED, GPIO_Pin_LED, GPIO_PIN_SET);
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f003 f904 	bl	8004284 <HAL_GPIO_WritePin>
		printf("%s is set to HIGH\r\n", name);
 800107c:	69b9      	ldr	r1, [r7, #24]
 800107e:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <switchToggle+0x84>)
 8001080:	f008 ff1c 	bl	8009ebc <iprintf>
		return;
 8001084:	e019      	b.n	80010ba <switchToggle+0x7e>
	}
	if (!HAL_GPIO_ReadPin(GPIOx_Switch, GPIO_Pin_Switch) && HAL_GPIO_ReadPin(GPIOx_LED, GPIO_Pin_LED))
 8001086:	897b      	ldrh	r3, [r7, #10]
 8001088:	4619      	mov	r1, r3
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f003 f8e2 	bl	8004254 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d111      	bne.n	80010ba <switchToggle+0x7e>
 8001096:	893b      	ldrh	r3, [r7, #8]
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f003 f8da 	bl	8004254 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <switchToggle+0x7e>
	{
		HAL_GPIO_WritePin(GPIOx_LED, GPIO_Pin_LED, GPIO_PIN_RESET);
 80010a6:	893b      	ldrh	r3, [r7, #8]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f003 f8e9 	bl	8004284 <HAL_GPIO_WritePin>
		printf("%s is set to Low\r\n", name);
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <switchToggle+0x88>)
 80010b6:	f008 ff01 	bl	8009ebc <iprintf>
	}
}
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	0800ac28 	.word	0x0800ac28
 80010c4:	0800ac3c 	.word	0x0800ac3c

080010c8 <toggleAndPrintGpioState>:
 * @param GPIOx Which bank the GPIO pins are in
 * @param GPIO_Pin The specific gpio pin you are toggling
 * @param name The name of the pin for uart
 */
void toggleAndPrintGpioState(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t *name)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	460b      	mov	r3, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	817b      	strh	r3, [r7, #10]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80010d6:	897b      	ldrh	r3, [r7, #10]
 80010d8:	4619      	mov	r1, r3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f003 f8ba 	bl	8004254 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <toggleAndPrintGpioState+0x34>
	{
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f003 f8c9 	bl	8004284 <HAL_GPIO_WritePin>
#if printLED
		printf("%s is set to low\r\n", name);
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <toggleAndPrintGpioState+0x50>)
 80010f6:	f008 fee1 	bl	8009ebc <iprintf>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
#if printLED
		printf("%s is set to high\r\n", name);
#endif
	}
}
 80010fa:	e009      	b.n	8001110 <toggleAndPrintGpioState+0x48>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80010fc:	897b      	ldrh	r3, [r7, #10]
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f003 f8be 	bl	8004284 <HAL_GPIO_WritePin>
		printf("%s is set to high\r\n", name);
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4804      	ldr	r0, [pc, #16]	@ (800111c <toggleAndPrintGpioState+0x54>)
 800110c:	f008 fed6 	bl	8009ebc <iprintf>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	0800ac50 	.word	0x0800ac50
 800111c:	0800ac64 	.word	0x0800ac64

08001120 <setDisplay>:
/*
 * @brief Sets which single display you want to work with
 * @param display A number from 1-4 to indicate which display you want to use
 */
void setDisplay(uint8_t display)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	switch (display)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3b01      	subs	r3, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	d862      	bhi.n	80011f8 <setDisplay+0xd8>
 8001132:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <setDisplay+0x18>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001149 	.word	0x08001149
 800113c:	08001175 	.word	0x08001175
 8001140:	080011a1 	.word	0x080011a1
 8001144:	080011cd 	.word	0x080011cd
	{
		case 1:
			HAL_GPIO_WritePin(GPIOE, DisplayOne_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	482c      	ldr	r0, [pc, #176]	@ (8001200 <setDisplay+0xe0>)
 800114e:	f003 f899 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, DisplayTwo_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2101      	movs	r1, #1
 8001156:	482b      	ldr	r0, [pc, #172]	@ (8001204 <setDisplay+0xe4>)
 8001158:	f003 f894 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, DisplayThree_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2102      	movs	r1, #2
 8001160:	4829      	ldr	r0, [pc, #164]	@ (8001208 <setDisplay+0xe8>)
 8001162:	f003 f88f 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, DisplayFour_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116c:	4827      	ldr	r0, [pc, #156]	@ (800120c <setDisplay+0xec>)
 800116e:	f003 f889 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 8001172:	e041      	b.n	80011f8 <setDisplay+0xd8>
		case 2:
			HAL_GPIO_WritePin(GPIOE, DisplayOne_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	4821      	ldr	r0, [pc, #132]	@ (8001200 <setDisplay+0xe0>)
 800117a:	f003 f883 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, DisplayTwo_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	4820      	ldr	r0, [pc, #128]	@ (8001204 <setDisplay+0xe4>)
 8001184:	f003 f87e 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, DisplayThree_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	481e      	ldr	r0, [pc, #120]	@ (8001208 <setDisplay+0xe8>)
 800118e:	f003 f879 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, DisplayFour_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001198:	481c      	ldr	r0, [pc, #112]	@ (800120c <setDisplay+0xec>)
 800119a:	f003 f873 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 800119e:	e02b      	b.n	80011f8 <setDisplay+0xd8>
		case 3:
			HAL_GPIO_WritePin(GPIOE, DisplayOne_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	4816      	ldr	r0, [pc, #88]	@ (8001200 <setDisplay+0xe0>)
 80011a6:	f003 f86d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, DisplayTwo_Pin, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2101      	movs	r1, #1
 80011ae:	4815      	ldr	r0, [pc, #84]	@ (8001204 <setDisplay+0xe4>)
 80011b0:	f003 f868 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, DisplayThree_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2102      	movs	r1, #2
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <setDisplay+0xe8>)
 80011ba:	f003 f863 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, DisplayFour_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <setDisplay+0xec>)
 80011c6:	f003 f85d 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80011ca:	e015      	b.n	80011f8 <setDisplay+0xd8>
		case 4:
			HAL_GPIO_WritePin(GPIOE, DisplayOne_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2110      	movs	r1, #16
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <setDisplay+0xe0>)
 80011d2:	f003 f857 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, DisplayTwo_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2101      	movs	r1, #1
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <setDisplay+0xe4>)
 80011dc:	f003 f852 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, DisplayThree_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2102      	movs	r1, #2
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <setDisplay+0xe8>)
 80011e6:	f003 f84d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, DisplayFour_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f0:	4806      	ldr	r0, [pc, #24]	@ (800120c <setDisplay+0xec>)
 80011f2:	f003 f847 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80011f6:	bf00      	nop
	}
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58021000 	.word	0x58021000
 8001204:	58021400 	.word	0x58021400
 8001208:	58020c00 	.word	0x58020c00
 800120c:	58021800 	.word	0x58021800

08001210 <displayOneNumber>:
 * @brief This will take apart a 4 digit number and display 1 part on the display designated
 * @param number The 4 digit number you are wanting to display
 * @param display The display and index of the number you want to display on
 */
void displayOneNumber(uint16_t number, uint8_t display)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	4613      	mov	r3, r2
 800121e:	717b      	strb	r3, [r7, #5]
	if (number > 10000)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001226:	4293      	cmp	r3, r2
 8001228:	d874      	bhi.n	8001314 <displayOneNumber+0x104>
		return;
	}

	// Does some moding to isolate values
	// Does divion to  bring value to ones place
	uint8_t digitOne = number % 10;
 800122a:	88fa      	ldrh	r2, [r7, #6]
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <displayOneNumber+0x10c>)
 800122e:	fba3 1302 	umull	r1, r3, r3, r2
 8001232:	08d9      	lsrs	r1, r3, #3
 8001234:	460b      	mov	r3, r1
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
	uint8_t digitTwo = ((number % 100) - digitOne) / 10;
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4a36      	ldr	r2, [pc, #216]	@ (8001320 <displayOneNumber+0x110>)
 8001246:	fba2 1203 	umull	r1, r2, r2, r3
 800124a:	0952      	lsrs	r2, r2, #5
 800124c:	2164      	movs	r1, #100	@ 0x64
 800124e:	fb01 f202 	mul.w	r2, r1, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4a31      	ldr	r2, [pc, #196]	@ (8001324 <displayOneNumber+0x114>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	1092      	asrs	r2, r2, #2
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	73bb      	strb	r3, [r7, #14]
	uint8_t digitThree = ((number % 1000) - digitOne - digitTwo) / 100;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4a2e      	ldr	r2, [pc, #184]	@ (8001328 <displayOneNumber+0x118>)
 800126e:	fba2 1203 	umull	r1, r2, r2, r3
 8001272:	0992      	lsrs	r2, r2, #6
 8001274:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001278:	fb01 f202 	mul.w	r2, r1, r2
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	1ad2      	subs	r2, r2, r3
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a25      	ldr	r2, [pc, #148]	@ (8001320 <displayOneNumber+0x110>)
 800128c:	fb82 1203 	smull	r1, r2, r2, r3
 8001290:	1152      	asrs	r2, r2, #5
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	737b      	strb	r3, [r7, #13]
	uint8_t digitFour = (number - digitOne - digitTwo - digitThree) / 1000;
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	1ad2      	subs	r2, r2, r3
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	1ad2      	subs	r2, r2, r3
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <displayOneNumber+0x118>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1192      	asrs	r2, r2, #6
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	733b      	strb	r3, [r7, #12]

	// Only display One Number
	switch (display)
 80012b4:	797b      	ldrb	r3, [r7, #5]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d82c      	bhi.n	8001316 <displayOneNumber+0x106>
 80012bc:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <displayOneNumber+0xb4>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012e5 	.word	0x080012e5
 80012cc:	080012f5 	.word	0x080012f5
 80012d0:	08001305 	.word	0x08001305
	{
		case 1:
			setDisplay(1);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff ff23 	bl	8001120 <setDisplay>
				setNumber(digitOne);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f841 	bl	8001364 <setNumber>
			break;
 80012e2:	e018      	b.n	8001316 <displayOneNumber+0x106>
		case 2:
			setDisplay(2);
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff ff1b 	bl	8001120 <setDisplay>
			setNumber(digitTwo);
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f839 	bl	8001364 <setNumber>
			break;
 80012f2:	e010      	b.n	8001316 <displayOneNumber+0x106>
		case 3:
			setDisplay(3);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff ff13 	bl	8001120 <setDisplay>
			setNumber(digitThree);
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f831 	bl	8001364 <setNumber>
			break;
 8001302:	e008      	b.n	8001316 <displayOneNumber+0x106>
		case 4:
			setDisplay(4);
 8001304:	2004      	movs	r0, #4
 8001306:	f7ff ff0b 	bl	8001120 <setDisplay>
			setNumber(digitFour);
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f829 	bl	8001364 <setNumber>
			break;
 8001312:	e000      	b.n	8001316 <displayOneNumber+0x106>
		return;
 8001314:	bf00      	nop
	}
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	51eb851f 	.word	0x51eb851f
 8001324:	66666667 	.word	0x66666667
 8001328:	10624dd3 	.word	0x10624dd3

0800132c <setDecimal>:
/*
 * @brief Sets/resets decimal pin
 * @param flag Unset decimal if 0, set otherwise
 */
void setDecimal(uint8_t flag)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	if (flag == 0)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d106      	bne.n	800134a <setDecimal+0x1e>
	{
		HAL_GPIO_WritePin(GPIOF, Decimal_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <setDecimal+0x34>)
 8001344:	f002 ff9e 	bl	8004284 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOF, Decimal_Pin, GPIO_PIN_SET);
	}
}
 8001348:	e005      	b.n	8001356 <setDecimal+0x2a>
		HAL_GPIO_WritePin(GPIOF, Decimal_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <setDecimal+0x34>)
 8001352:	f002 ff97 	bl	8004284 <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	58021400 	.word	0x58021400

08001364 <setNumber>:
/*
 * @brief Sets up a number for 7 segment display
 * @param A number between 0-9 to set the 7 segment display to
 */
void setNumber(uint8_t number)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	switch(number)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b09      	cmp	r3, #9
 8001372:	f200 8189 	bhi.w	8001688 <setNumber+0x324>
 8001376:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <setNumber+0x18>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	080013a5 	.word	0x080013a5
 8001380:	080013ef 	.word	0x080013ef
 8001384:	08001439 	.word	0x08001439
 8001388:	08001483 	.word	0x08001483
 800138c:	080014cd 	.word	0x080014cd
 8001390:	08001517 	.word	0x08001517
 8001394:	08001561 	.word	0x08001561
 8001398:	080015ab 	.word	0x080015ab
 800139c:	080015f5 	.word	0x080015f5
 80013a0:	0800163f 	.word	0x0800163f
	{
		case 0:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2102      	movs	r1, #2
 80013a8:	48ba      	ldr	r0, [pc, #744]	@ (8001694 <setNumber+0x330>)
 80013aa:	f002 ff6b 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b4:	48b8      	ldr	r0, [pc, #736]	@ (8001698 <setNumber+0x334>)
 80013b6:	f002 ff65 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2104      	movs	r1, #4
 80013be:	48b6      	ldr	r0, [pc, #728]	@ (8001698 <setNumber+0x334>)
 80013c0:	f002 ff60 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	48b4      	ldr	r0, [pc, #720]	@ (800169c <setNumber+0x338>)
 80013ca:	f002 ff5b 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2101      	movs	r1, #1
 80013d2:	48b0      	ldr	r0, [pc, #704]	@ (8001694 <setNumber+0x330>)
 80013d4:	f002 ff56 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	48ae      	ldr	r0, [pc, #696]	@ (8001698 <setNumber+0x334>)
 80013de:	f002 ff51 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	48ae      	ldr	r0, [pc, #696]	@ (80016a0 <setNumber+0x33c>)
 80013e8:	f002 ff4c 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80013ec:	e14d      	b.n	800168a <setNumber+0x326>
		case 1:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2102      	movs	r1, #2
 80013f2:	48a8      	ldr	r0, [pc, #672]	@ (8001694 <setNumber+0x330>)
 80013f4:	f002 ff46 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fe:	48a6      	ldr	r0, [pc, #664]	@ (8001698 <setNumber+0x334>)
 8001400:	f002 ff40 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2104      	movs	r1, #4
 8001408:	48a3      	ldr	r0, [pc, #652]	@ (8001698 <setNumber+0x334>)
 800140a:	f002 ff3b 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2101      	movs	r1, #1
 8001412:	48a2      	ldr	r0, [pc, #648]	@ (800169c <setNumber+0x338>)
 8001414:	f002 ff36 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2101      	movs	r1, #1
 800141c:	489d      	ldr	r0, [pc, #628]	@ (8001694 <setNumber+0x330>)
 800141e:	f002 ff31 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2102      	movs	r1, #2
 8001426:	489c      	ldr	r0, [pc, #624]	@ (8001698 <setNumber+0x334>)
 8001428:	f002 ff2c 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	489b      	ldr	r0, [pc, #620]	@ (80016a0 <setNumber+0x33c>)
 8001432:	f002 ff27 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 8001436:	e128      	b.n	800168a <setNumber+0x326>
		case 2:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4895      	ldr	r0, [pc, #596]	@ (8001694 <setNumber+0x330>)
 800143e:	f002 ff21 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001448:	4893      	ldr	r0, [pc, #588]	@ (8001698 <setNumber+0x334>)
 800144a:	f002 ff1b 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2104      	movs	r1, #4
 8001452:	4891      	ldr	r0, [pc, #580]	@ (8001698 <setNumber+0x334>)
 8001454:	f002 ff16 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	488f      	ldr	r0, [pc, #572]	@ (800169c <setNumber+0x338>)
 800145e:	f002 ff11 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2101      	movs	r1, #1
 8001466:	488b      	ldr	r0, [pc, #556]	@ (8001694 <setNumber+0x330>)
 8001468:	f002 ff0c 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2102      	movs	r1, #2
 8001470:	4889      	ldr	r0, [pc, #548]	@ (8001698 <setNumber+0x334>)
 8001472:	f002 ff07 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2120      	movs	r1, #32
 800147a:	4889      	ldr	r0, [pc, #548]	@ (80016a0 <setNumber+0x33c>)
 800147c:	f002 ff02 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 8001480:	e103      	b.n	800168a <setNumber+0x326>
		case 3:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	4883      	ldr	r0, [pc, #524]	@ (8001694 <setNumber+0x330>)
 8001488:	f002 fefc 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001492:	4881      	ldr	r0, [pc, #516]	@ (8001698 <setNumber+0x334>)
 8001494:	f002 fef6 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2104      	movs	r1, #4
 800149c:	487e      	ldr	r0, [pc, #504]	@ (8001698 <setNumber+0x334>)
 800149e:	f002 fef1 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	487d      	ldr	r0, [pc, #500]	@ (800169c <setNumber+0x338>)
 80014a8:	f002 feec 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2101      	movs	r1, #1
 80014b0:	4878      	ldr	r0, [pc, #480]	@ (8001694 <setNumber+0x330>)
 80014b2:	f002 fee7 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2102      	movs	r1, #2
 80014ba:	4877      	ldr	r0, [pc, #476]	@ (8001698 <setNumber+0x334>)
 80014bc:	f002 fee2 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2120      	movs	r1, #32
 80014c4:	4876      	ldr	r0, [pc, #472]	@ (80016a0 <setNumber+0x33c>)
 80014c6:	f002 fedd 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80014ca:	e0de      	b.n	800168a <setNumber+0x326>
		case 4:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2102      	movs	r1, #2
 80014d0:	4870      	ldr	r0, [pc, #448]	@ (8001694 <setNumber+0x330>)
 80014d2:	f002 fed7 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014dc:	486e      	ldr	r0, [pc, #440]	@ (8001698 <setNumber+0x334>)
 80014de:	f002 fed1 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2104      	movs	r1, #4
 80014e6:	486c      	ldr	r0, [pc, #432]	@ (8001698 <setNumber+0x334>)
 80014e8:	f002 fecc 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	486a      	ldr	r0, [pc, #424]	@ (800169c <setNumber+0x338>)
 80014f2:	f002 fec7 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	4866      	ldr	r0, [pc, #408]	@ (8001694 <setNumber+0x330>)
 80014fc:	f002 fec2 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2102      	movs	r1, #2
 8001504:	4864      	ldr	r0, [pc, #400]	@ (8001698 <setNumber+0x334>)
 8001506:	f002 febd 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2120      	movs	r1, #32
 800150e:	4864      	ldr	r0, [pc, #400]	@ (80016a0 <setNumber+0x33c>)
 8001510:	f002 feb8 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 8001514:	e0b9      	b.n	800168a <setNumber+0x326>
		case 5:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2102      	movs	r1, #2
 800151a:	485e      	ldr	r0, [pc, #376]	@ (8001694 <setNumber+0x330>)
 800151c:	f002 feb2 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001526:	485c      	ldr	r0, [pc, #368]	@ (8001698 <setNumber+0x334>)
 8001528:	f002 feac 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	4859      	ldr	r0, [pc, #356]	@ (8001698 <setNumber+0x334>)
 8001532:	f002 fea7 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	4858      	ldr	r0, [pc, #352]	@ (800169c <setNumber+0x338>)
 800153c:	f002 fea2 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2101      	movs	r1, #1
 8001544:	4853      	ldr	r0, [pc, #332]	@ (8001694 <setNumber+0x330>)
 8001546:	f002 fe9d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2102      	movs	r1, #2
 800154e:	4852      	ldr	r0, [pc, #328]	@ (8001698 <setNumber+0x334>)
 8001550:	f002 fe98 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2120      	movs	r1, #32
 8001558:	4851      	ldr	r0, [pc, #324]	@ (80016a0 <setNumber+0x33c>)
 800155a:	f002 fe93 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 800155e:	e094      	b.n	800168a <setNumber+0x326>
		case 6:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2102      	movs	r1, #2
 8001564:	484b      	ldr	r0, [pc, #300]	@ (8001694 <setNumber+0x330>)
 8001566:	f002 fe8d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001570:	4849      	ldr	r0, [pc, #292]	@ (8001698 <setNumber+0x334>)
 8001572:	f002 fe87 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2104      	movs	r1, #4
 800157a:	4847      	ldr	r0, [pc, #284]	@ (8001698 <setNumber+0x334>)
 800157c:	f002 fe82 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2101      	movs	r1, #1
 8001584:	4845      	ldr	r0, [pc, #276]	@ (800169c <setNumber+0x338>)
 8001586:	f002 fe7d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2101      	movs	r1, #1
 800158e:	4841      	ldr	r0, [pc, #260]	@ (8001694 <setNumber+0x330>)
 8001590:	f002 fe78 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2102      	movs	r1, #2
 8001598:	483f      	ldr	r0, [pc, #252]	@ (8001698 <setNumber+0x334>)
 800159a:	f002 fe73 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	2120      	movs	r1, #32
 80015a2:	483f      	ldr	r0, [pc, #252]	@ (80016a0 <setNumber+0x33c>)
 80015a4:	f002 fe6e 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80015a8:	e06f      	b.n	800168a <setNumber+0x326>
		case 7:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	4839      	ldr	r0, [pc, #228]	@ (8001694 <setNumber+0x330>)
 80015b0:	f002 fe68 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015ba:	4837      	ldr	r0, [pc, #220]	@ (8001698 <setNumber+0x334>)
 80015bc:	f002 fe62 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2104      	movs	r1, #4
 80015c4:	4834      	ldr	r0, [pc, #208]	@ (8001698 <setNumber+0x334>)
 80015c6:	f002 fe5d 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2101      	movs	r1, #1
 80015ce:	4833      	ldr	r0, [pc, #204]	@ (800169c <setNumber+0x338>)
 80015d0:	f002 fe58 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	482e      	ldr	r0, [pc, #184]	@ (8001694 <setNumber+0x330>)
 80015da:	f002 fe53 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2102      	movs	r1, #2
 80015e2:	482d      	ldr	r0, [pc, #180]	@ (8001698 <setNumber+0x334>)
 80015e4:	f002 fe4e 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	482c      	ldr	r0, [pc, #176]	@ (80016a0 <setNumber+0x33c>)
 80015ee:	f002 fe49 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 80015f2:	e04a      	b.n	800168a <setNumber+0x326>
		case 8:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2102      	movs	r1, #2
 80015f8:	4826      	ldr	r0, [pc, #152]	@ (8001694 <setNumber+0x330>)
 80015fa:	f002 fe43 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001604:	4824      	ldr	r0, [pc, #144]	@ (8001698 <setNumber+0x334>)
 8001606:	f002 fe3d 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2104      	movs	r1, #4
 800160e:	4822      	ldr	r0, [pc, #136]	@ (8001698 <setNumber+0x334>)
 8001610:	f002 fe38 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2101      	movs	r1, #1
 8001618:	4820      	ldr	r0, [pc, #128]	@ (800169c <setNumber+0x338>)
 800161a:	f002 fe33 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	481c      	ldr	r0, [pc, #112]	@ (8001694 <setNumber+0x330>)
 8001624:	f002 fe2e 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2102      	movs	r1, #2
 800162c:	481a      	ldr	r0, [pc, #104]	@ (8001698 <setNumber+0x334>)
 800162e:	f002 fe29 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2120      	movs	r1, #32
 8001636:	481a      	ldr	r0, [pc, #104]	@ (80016a0 <setNumber+0x33c>)
 8001638:	f002 fe24 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 800163c:	e025      	b.n	800168a <setNumber+0x326>
		case 9:
			HAL_GPIO_WritePin(GPIOG, BottomLeft_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2102      	movs	r1, #2
 8001642:	4814      	ldr	r0, [pc, #80]	@ (8001694 <setNumber+0x330>)
 8001644:	f002 fe1e 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomMid_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164e:	4812      	ldr	r0, [pc, #72]	@ (8001698 <setNumber+0x334>)
 8001650:	f002 fe18 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, BottomRight_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2104      	movs	r1, #4
 8001658:	480f      	ldr	r0, [pc, #60]	@ (8001698 <setNumber+0x334>)
 800165a:	f002 fe13 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOD, TopLeft_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2101      	movs	r1, #1
 8001662:	480e      	ldr	r0, [pc, #56]	@ (800169c <setNumber+0x338>)
 8001664:	f002 fe0e 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, TopMid_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2101      	movs	r1, #1
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <setNumber+0x330>)
 800166e:	f002 fe09 	bl	8004284 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, TopRight_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	4808      	ldr	r0, [pc, #32]	@ (8001698 <setNumber+0x334>)
 8001678:	f002 fe04 	bl	8004284 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, Middle_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2120      	movs	r1, #32
 8001680:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <setNumber+0x33c>)
 8001682:	f002 fdff 	bl	8004284 <HAL_GPIO_WritePin>
			break;
 8001686:	e000      	b.n	800168a <setNumber+0x326>
		default:
			break;
 8001688:	bf00      	nop
	}
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58021800 	.word	0x58021800
 8001698:	58021400 	.word	0x58021400
 800169c:	58020c00 	.word	0x58020c00
 80016a0:	58021000 	.word	0x58021000

080016a4 <__io_putchar>:
/*
 * @brief This function for printf to print to UART2
 * @param ch The char to be printed
 * @retval int char printed
 */
int __io_putchar(int ch){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	// Transmit on UART3 which is though the USB
	// Transmits 1 char and will time out after 100 milliseconds
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 100);
 80016ac:	1d39      	adds	r1, r7, #4
 80016ae:	2364      	movs	r3, #100	@ 0x64
 80016b0:	2201      	movs	r2, #1
 80016b2:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <__io_putchar+0x20>)
 80016b4:	f007 f922 	bl	80088fc <HAL_UART_Transmit>
	return ch;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000198 	.word	0x24000198

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_MspInit+0x30>)
 80016dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016e0:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x30>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x30>)
 80016ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	58024400 	.word	0x58024400

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_ADC_MspInit+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d129      	bne.n	800177e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_ADC_MspInit+0x84>)
 800172c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001730:	4a16      	ldr	r2, [pc, #88]	@ (800178c <HAL_ADC_MspInit+0x84>)
 8001732:	f043 0320 	orr.w	r3, r3, #32
 8001736:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_ADC_MspInit+0x84>)
 800173c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_ADC_MspInit+0x84>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_ADC_MspInit+0x84>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_ADC_MspInit+0x84>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_ADC_MspInit+0x88>)
 800177a:	f002 fbc3 	bl	8003f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40022000 	.word	0x40022000
 800178c:	58024400 	.word	0x58024400
 8001790:	58020000 	.word	0x58020000

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d117      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 80017b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017bc:	4a25      	ldr	r2, [pc, #148]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c6:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 80017c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	201c      	movs	r0, #28
 80017da:	f002 fb5e 	bl	8003e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017de:	201c      	movs	r0, #28
 80017e0:	f002 fb75 	bl	8003ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e4:	e032      	b.n	800184c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM3)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_TIM_Base_MspInit+0xc4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d12d      	bne.n	800184c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f0:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 80017f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 8001802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001814:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_TIM_Base_MspInit+0xc0>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183c:	2302      	movs	r3, #2
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_TIM_Base_MspInit+0xc8>)
 8001848:	f002 fb5c 	bl	8003f04 <HAL_GPIO_Init>
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	40000400 	.word	0x40000400
 800185c:	58020000 	.word	0x58020000

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b8      	sub	sp, #224	@ 0xe0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	22b8      	movs	r2, #184	@ 0xb8
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f008 fb70 	bl	8009f66 <memset>
  if(huart->Instance==USART3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a27      	ldr	r2, [pc, #156]	@ (8001928 <HAL_UART_MspInit+0xc8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d146      	bne.n	800191e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001890:	f04f 0202 	mov.w	r2, #2
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fca6 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018b2:	f7ff ff09 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018b6:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018bc:	4a1b      	ldr	r2, [pc, #108]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018da:	4a14      	ldr	r2, [pc, #80]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_UART_MspInit+0xcc>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80018f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190c:	2307      	movs	r3, #7
 800190e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <HAL_UART_MspInit+0xd0>)
 800191a:	f002 faf3 	bl	8003f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	37e0      	adds	r7, #224	@ 0xe0
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004800 	.word	0x40004800
 800192c:	58024400 	.word	0x58024400
 8001930:	58020c00 	.word	0x58020c00

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198a:	f000 f9cb 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <TIM2_IRQHandler+0x1c>)
 800199a:	f006 f952 	bl	8007c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <TIM2_IRQHandler+0x1c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f06f 0201 	mvn.w	r2, #1
 80019a6:	611a      	str	r2, [r3, #16]
  incrementLowerDisplay();
 80019a8:	f7ff fb32 	bl	8001010 <incrementLowerDisplay>

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	24000100 	.word	0x24000100

080019b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
  }

  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fe4b 	bl	80016a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
  }
  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f008 faa0 	bl	800a004 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24050000 	.word	0x24050000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	2400022c 	.word	0x2400022c
 8001af8:	24000380 	.word	0x24000380

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b00:	4b32      	ldr	r3, [pc, #200]	@ (8001bcc <SystemInit+0xd0>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b06:	4a31      	ldr	r2, [pc, #196]	@ (8001bcc <SystemInit+0xd0>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <SystemInit+0xd4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d807      	bhi.n	8001b2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd0 <SystemInit+0xd4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 030f 	bic.w	r3, r3, #15
 8001b24:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd0 <SystemInit+0xd4>)
 8001b26:	f043 0307 	orr.w	r3, r3, #7
 8001b2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <SystemInit+0xd8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <SystemInit+0xd8>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <SystemInit+0xd8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <SystemInit+0xd8>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4924      	ldr	r1, [pc, #144]	@ (8001bd4 <SystemInit+0xd8>)
 8001b44:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <SystemInit+0xdc>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <SystemInit+0xd4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <SystemInit+0xd4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 030f 	bic.w	r3, r3, #15
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <SystemInit+0xd4>)
 8001b60:	f043 0307 	orr.w	r3, r3, #7
 8001b64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <SystemInit+0xd8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <SystemInit+0xd8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <SystemInit+0xd8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <SystemInit+0xd8>)
 8001b7a:	4a18      	ldr	r2, [pc, #96]	@ (8001bdc <SystemInit+0xe0>)
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <SystemInit+0xd8>)
 8001b80:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <SystemInit+0xe4>)
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <SystemInit+0xd8>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <SystemInit+0xe8>)
 8001b88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <SystemInit+0xd8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <SystemInit+0xd8>)
 8001b92:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <SystemInit+0xe8>)
 8001b94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <SystemInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <SystemInit+0xd8>)
 8001b9e:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <SystemInit+0xe8>)
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <SystemInit+0xd8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <SystemInit+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <SystemInit+0xd8>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <SystemInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <SystemInit+0xec>)
 8001bbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	52002000 	.word	0x52002000
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bdc:	02020200 	.word	0x02020200
 8001be0:	01ff0000 	.word	0x01ff0000
 8001be4:	01010280 	.word	0x01010280
 8001be8:	52004000 	.word	0x52004000

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf0:	f7ff ff84 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f008 f9f9 	bl	800a010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7fe fd3f 	bl	80006a0 <main>
  bx  lr
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c24:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c2c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001c30:	0800acf4 	.word	0x0800acf4
  ldr r2, =_sbss
 8001c34:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001c38:	24000380 	.word	0x24000380

08001c3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC3_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c46:	2003      	movs	r0, #3
 8001c48:	f002 f91c 	bl	8003e84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c4c:	f003 f8fe 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_Init+0x68>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	4913      	ldr	r1, [pc, #76]	@ (8001cac <HAL_Init+0x6c>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_Init+0x68>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_Init+0x6c>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <HAL_Init+0x70>)
 8001c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c84:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb4 <HAL_Init+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 f814 	bl	8001cb8 <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e002      	b.n	8001ca0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9a:	f7ff fd1b 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	0800ac78 	.word	0x0800ac78
 8001cb0:	2400000c 	.word	0x2400000c
 8001cb4:	24000008 	.word	0x24000008

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc0:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_InitTick+0x60>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e021      	b.n	8001d10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_InitTick+0x64>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_InitTick+0x60>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 f901 	bl	8003eea <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f002 f8cb 	bl	8003e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	@ (8001d20 <HAL_InitTick+0x68>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000014 	.word	0x24000014
 8001d1c:	24000008 	.word	0x24000008
 8001d20:	24000010 	.word	0x24000010

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	24000014 	.word	0x24000014
 8001d48:	24000230 	.word	0x24000230

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	24000230 	.word	0x24000230

08001d64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3360      	adds	r3, #96	@ 0x60
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <LL_ADC_SetOffset+0x60>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10b      	bne.n	8001e08 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e06:	e00b      	b.n	8001e20 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58026000 	.word	0x58026000

08001e30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3360      	adds	r3, #96	@ 0x60
 8001e3e:	461a      	mov	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	611a      	str	r2, [r3, #16]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3360      	adds	r3, #96	@ 0x60
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	58026000 	.word	0x58026000

08001ed4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <LL_ADC_SetOffsetSaturation+0x40>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10e      	bne.n	8001f06 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3360      	adds	r3, #96	@ 0x60
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	58026000 	.word	0x58026000

08001f18 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <LL_ADC_SetOffsetSign+0x40>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d10e      	bne.n	8001f4a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3360      	adds	r3, #96	@ 0x60
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	58026000 	.word	0x58026000

08001f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3360      	adds	r3, #96	@ 0x60
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <LL_ADC_SetOffsetState+0x50>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d108      	bne.n	8001f90 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001f8e:	e007      	b.n	8001fa0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	58026000 	.word	0x58026000

08001fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3330      	adds	r3, #48	@ 0x30
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	211f      	movs	r1, #31
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	401a      	ands	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 011f 	and.w	r1, r3, #31
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800202e:	b480      	push	{r7}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3314      	adds	r3, #20
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	0e5b      	lsrs	r3, r3, #25
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0d1b      	lsrs	r3, r3, #20
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2107      	movs	r1, #7
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a1a      	ldr	r2, [pc, #104]	@ (80020fc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d115      	bne.n	80020c4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0318 	and.w	r3, r3, #24
 80020ae:	4914      	ldr	r1, [pc, #80]	@ (8002100 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	400b      	ands	r3, r1
 80020b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80020c2:	e014      	b.n	80020ee <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0318 	and.w	r3, r3, #24
 80020da:	4909      	ldr	r1, [pc, #36]	@ (8002100 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80020dc:	40d9      	lsrs	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	400b      	ands	r3, r1
 80020e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020e6:	431a      	orrs	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	58026000 	.word	0x58026000
 8002100:	000fffff 	.word	0x000fffff

08002104 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <LL_ADC_DisableDeepPowerDown+0x20>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6093      	str	r3, [r2, #8]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	5fffffc0 	.word	0x5fffffc0

08002160 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002174:	d101      	bne.n	800217a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002196:	4013      	ands	r3, r2
 8002198:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	6fffffc0 	.word	0x6fffffc0

080021b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021c4:	d101      	bne.n	80021ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <LL_ADC_Enable+0x24>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	7fffffc0 	.word	0x7fffffc0

08002200 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <LL_ADC_Disable+0x24>)
 800220e:	4013      	ands	r3, r2
 8002210:	f043 0202 	orr.w	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	7fffffc0 	.word	0x7fffffc0

08002228 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <LL_ADC_IsEnabled+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_IsEnabled+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsDisableOngoing+0x18>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsDisableOngoing+0x1a>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <LL_ADC_REG_StartConversion+0x24>)
 8002282:	4013      	ands	r3, r2
 8002284:	f043 0204 	orr.w	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	7fffffc0 	.word	0x7fffffc0

0800229c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <LL_ADC_REG_StopConversion+0x24>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	7fffffc0 	.word	0x7fffffc0

080022c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d101      	bne.n	80022dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <LL_ADC_INJ_StopConversion+0x24>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	7fffffc0 	.word	0x7fffffc0

08002314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b08      	cmp	r3, #8
 8002326:	d101      	bne.n	800232c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1ee      	b.n	8002734 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff f9cf 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff feef 	bl	8002160 <LL_ADC_IsDeepPowerDownEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fed5 	bl	800213c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff0a 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d114      	bne.n	80023cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff feee 	bl	8002188 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ac:	4b8e      	ldr	r3, [pc, #568]	@ (80025e8 <HAL_ADC_Init+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	4a8e      	ldr	r2, [pc, #568]	@ (80025ec <HAL_ADC_Init+0x2b0>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023be:	e002      	b.n	80023c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff feed 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff61 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002402:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 8188 	bne.w	8002722 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 8184 	bne.w	8002722 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002422:	f043 0202 	orr.w	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fefa 	bl	8002228 <LL_ADC_IsEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d136      	bne.n	80024a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6c      	ldr	r2, [pc, #432]	@ (80025f0 <HAL_ADC_Init+0x2b4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_ADC_Init+0x112>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a6a      	ldr	r2, [pc, #424]	@ (80025f4 <HAL_ADC_Init+0x2b8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <HAL_ADC_Init+0x130>
 800244e:	4868      	ldr	r0, [pc, #416]	@ (80025f0 <HAL_ADC_Init+0x2b4>)
 8002450:	f7ff feea 	bl	8002228 <LL_ADC_IsEnabled>
 8002454:	4604      	mov	r4, r0
 8002456:	4867      	ldr	r0, [pc, #412]	@ (80025f4 <HAL_ADC_Init+0x2b8>)
 8002458:	f7ff fee6 	bl	8002228 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e008      	b.n	800247e <HAL_ADC_Init+0x142>
 800246c:	4862      	ldr	r0, [pc, #392]	@ (80025f8 <HAL_ADC_Init+0x2bc>)
 800246e:	f7ff fedb 	bl	8002228 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf0c      	ite	eq
 8002478:	2301      	moveq	r3, #1
 800247a:	2300      	movne	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d012      	beq.n	80024a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_ADC_Init+0x2b4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_ADC_Init+0x15a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a58      	ldr	r2, [pc, #352]	@ (80025f4 <HAL_ADC_Init+0x2b8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_ADC_Init+0x15e>
 8002496:	4a59      	ldr	r2, [pc, #356]	@ (80025fc <HAL_ADC_Init+0x2c0>)
 8002498:	e000      	b.n	800249c <HAL_ADC_Init+0x160>
 800249a:	4a59      	ldr	r2, [pc, #356]	@ (8002600 <HAL_ADC_Init+0x2c4>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7ff fc5e 	bl	8001d64 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_ADC_Init+0x2bc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d129      	bne.n	8002506 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7e5b      	ldrb	r3, [r3, #25]
 80024b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024bc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80024c2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d013      	beq.n	80024f4 <HAL_ADC_Init+0x1b8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d00d      	beq.n	80024f0 <HAL_ADC_Init+0x1b4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b1c      	cmp	r3, #28
 80024da:	d007      	beq.n	80024ec <HAL_ADC_Init+0x1b0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_Init+0x1ac>
 80024e4:	2318      	movs	r3, #24
 80024e6:	e006      	b.n	80024f6 <HAL_ADC_Init+0x1ba>
 80024e8:	2300      	movs	r3, #0
 80024ea:	e004      	b.n	80024f6 <HAL_ADC_Init+0x1ba>
 80024ec:	2310      	movs	r3, #16
 80024ee:	e002      	b.n	80024f6 <HAL_ADC_Init+0x1ba>
 80024f0:	2308      	movs	r3, #8
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_Init+0x1ba>
 80024f4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80024f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e00e      	b.n	8002524 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7e5b      	ldrb	r3, [r3, #25]
 800250a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002510:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002516:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d106      	bne.n	800253c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	045b      	lsls	r3, r3, #17
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a26      	ldr	r2, [pc, #152]	@ (80025f8 <HAL_ADC_Init+0x2bc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d115      	bne.n	800258e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_ADC_Init+0x2c8>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	430b      	orrs	r3, r1
 8002574:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	611a      	str	r2, [r3, #16]
 800258c:	e009      	b.n	80025a2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_ADC_Init+0x2cc>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	69b9      	ldr	r1, [r7, #24]
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fe8c 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 80025ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff feae 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 80025b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 808e 	bne.w	80026de <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 808a 	bne.w	80026de <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_ADC_Init+0x2bc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d11b      	bne.n	800260c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e1b      	ldrb	r3, [r3, #24]
 80025d8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025e0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	e018      	b.n	800261a <HAL_ADC_Init+0x2de>
 80025e8:	24000008 	.word	0x24000008
 80025ec:	053e2d63 	.word	0x053e2d63
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022100 	.word	0x40022100
 80025f8:	58026000 	.word	0x58026000
 80025fc:	40022300 	.word	0x40022300
 8002600:	58026300 	.word	0x58026300
 8002604:	fff04007 	.word	0xfff04007
 8002608:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
 8002610:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_ADC_Init+0x400>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	430b      	orrs	r3, r1
 800262c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002634:	2b01      	cmp	r3, #1
 8002636:	d137      	bne.n	80026a8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <HAL_ADC_Init+0x404>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d116      	bne.n	8002676 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_ADC_Init+0x408>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002666:	430a      	orrs	r2, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	e020      	b.n	80026b8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_ADC_Init+0x40c>)
 800267e:	4013      	ands	r3, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002684:	3a01      	subs	r2, #1
 8002686:	0411      	lsls	r1, r2, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002698:	430a      	orrs	r2, r1
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	611a      	str	r2, [r3, #16]
 80026a6:	e007      	b.n	80026b8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <HAL_ADC_Init+0x404>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d002      	beq.n	80026de <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f001 f90d 	bl	80038f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10c      	bne.n	8002700 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	f023 010f 	bic.w	r1, r3, #15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026fe:	e007      	b.n	8002710 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 020f 	bic.w	r2, r2, #15
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002714:	f023 0303 	bic.w	r3, r3, #3
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002720:	e007      	b.n	8002732 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002732:	7ffb      	ldrb	r3, [r7, #31]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3724      	adds	r7, #36	@ 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	ffffbffc 	.word	0xffffbffc
 8002740:	58026000 	.word	0x58026000
 8002744:	fc00f81f 	.word	0xfc00f81f
 8002748:	fc00f81e 	.word	0xfc00f81e

0800274c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5c      	ldr	r2, [pc, #368]	@ (80028cc <HAL_ADC_Start+0x180>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_ADC_Start+0x1c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5b      	ldr	r2, [pc, #364]	@ (80028d0 <HAL_ADC_Start+0x184>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_ADC_Start+0x20>
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <HAL_ADC_Start+0x188>)
 800276a:	e000      	b.n	800276e <HAL_ADC_Start+0x22>
 800276c:	4b5a      	ldr	r3, [pc, #360]	@ (80028d8 <HAL_ADC_Start+0x18c>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fcc8 	bl	8002104 <LL_ADC_GetMultimode>
 8002774:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fda2 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 809a 	bne.w	80028bc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Start+0x4a>
 8002792:	2302      	movs	r3, #2
 8002794:	e095      	b.n	80028c2 <HAL_ADC_Start+0x176>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 ffc0 	bl	8003724 <ADC_Enable>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8081 	bne.w	80028b2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027b4:	4b49      	ldr	r3, [pc, #292]	@ (80028dc <HAL_ADC_Start+0x190>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <HAL_ADC_Start+0x184>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_Start+0x84>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_Start+0x86>
 80027d0:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <HAL_ADC_Start+0x180>)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d002      	beq.n	80027e0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027fe:	f023 0206 	bic.w	r2, r3, #6
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	665a      	str	r2, [r3, #100]	@ 0x64
 8002806:	e002      	b.n	800280e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	221c      	movs	r2, #28
 8002814:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_ADC_Start+0x184>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d002      	beq.n	800282e <HAL_ADC_Start+0xe2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e000      	b.n	8002830 <HAL_ADC_Start+0xe4>
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <HAL_ADC_Start+0x180>)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	4293      	cmp	r3, r2
 8002836:	d008      	beq.n	800284a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d002      	beq.n	800284a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b09      	cmp	r3, #9
 8002848:	d114      	bne.n	8002874 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002860:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fd01 	bl	8002274 <LL_ADC_REG_StartConversion>
 8002872:	e025      	b.n	80028c0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002878:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <HAL_ADC_Start+0x184>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d002      	beq.n	8002890 <HAL_ADC_Start+0x144>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e000      	b.n	8002892 <HAL_ADC_Start+0x146>
 8002890:	4b0e      	ldr	r3, [pc, #56]	@ (80028cc <HAL_ADC_Start+0x180>)
 8002892:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00f      	beq.n	80028c0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80028b0:	e006      	b.n	80028c0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80028ba:	e001      	b.n	80028c0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000
 80028d0:	40022100 	.word	0x40022100
 80028d4:	40022300 	.word	0x40022300
 80028d8:	58026300 	.word	0x58026300
 80028dc:	fffff0fe 	.word	0xfffff0fe

080028e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Stop+0x16>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e021      	b.n	800293a <HAL_ADC_Stop+0x5a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028fe:	2103      	movs	r1, #3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fe53 	bl	80035ac <ADC_ConversionStop>
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10f      	bne.n	8002930 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 ff91 	bl	8003838 <ADC_Disable>
 8002916:	4603      	mov	r3, r0
 8002918:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_ADC_Stop+0x64>)
 8002926:	4013      	ands	r3, r2
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	ffffeefe 	.word	0xffffeefe

08002948 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a72      	ldr	r2, [pc, #456]	@ (8002b20 <HAL_ADC_PollForConversion+0x1d8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_ADC_PollForConversion+0x1e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a70      	ldr	r2, [pc, #448]	@ (8002b24 <HAL_ADC_PollForConversion+0x1dc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_ADC_PollForConversion+0x22>
 8002966:	4b70      	ldr	r3, [pc, #448]	@ (8002b28 <HAL_ADC_PollForConversion+0x1e0>)
 8002968:	e000      	b.n	800296c <HAL_ADC_PollForConversion+0x24>
 800296a:	4b70      	ldr	r3, [pc, #448]	@ (8002b2c <HAL_ADC_PollForConversion+0x1e4>)
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fbc9 	bl	8002104 <LL_ADC_GetMultimode>
 8002972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d102      	bne.n	8002982 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800297c:	2308      	movs	r3, #8
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e037      	b.n	80029f2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d002      	beq.n	8002994 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d111      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0b1      	b.n	8002b16 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029b2:	2304      	movs	r3, #4
 80029b4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80029b6:	e01c      	b.n	80029f2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a58      	ldr	r2, [pc, #352]	@ (8002b20 <HAL_ADC_PollForConversion+0x1d8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_PollForConversion+0x84>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_ADC_PollForConversion+0x1dc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x88>
 80029cc:	4b56      	ldr	r3, [pc, #344]	@ (8002b28 <HAL_ADC_PollForConversion+0x1e0>)
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_PollForConversion+0x8a>
 80029d0:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_ADC_PollForConversion+0x1e4>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fba4 	bl	8002120 <LL_ADC_GetMultiDMATransfer>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e093      	b.n	8002b16 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029ee:	2304      	movs	r3, #4
 80029f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80029f2:	f7ff f9ab 	bl	8001d4c <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029f8:	e021      	b.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d01d      	beq.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a02:	f7ff f9a3 	bl	8001d4c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <HAL_ADC_PollForConversion+0xd0>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d112      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e06b      	b.n	8002b16 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0d6      	beq.n	80029fa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff faa7 	bl	8001fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e5b      	ldrb	r3, [r3, #25]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d118      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d111      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b24 <HAL_ADC_PollForConversion+0x1dc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ADC_PollForConversion+0x16a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x16c>
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_ADC_PollForConversion+0x1d8>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d008      	beq.n	8002ace <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d002      	beq.n	8002ace <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d104      	bne.n	8002ad8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e00c      	b.n	8002af2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_ADC_PollForConversion+0x1dc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d002      	beq.n	8002ae8 <HAL_ADC_PollForConversion+0x1a0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e000      	b.n	8002aea <HAL_ADC_PollForConversion+0x1a2>
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <HAL_ADC_PollForConversion+0x1d8>)
 8002aea:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2208      	movs	r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e008      	b.n	8002b14 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	220c      	movs	r2, #12
 8002b12:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40022100 	.word	0x40022100
 8002b28:	40022300 	.word	0x40022300
 8002b2c:	58026300 	.word	0x58026300

08002b30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b0b9      	sub	sp, #228	@ 0xe4
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b66:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4aab      	ldr	r2, [pc, #684]	@ (8002e1c <HAL_ADC_ConfigChannel+0x2d0>)
 8002b6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x34>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f000 bcfe 	b.w	800357c <HAL_ADC_ConfigChannel+0xa30>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb99 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 84e2 	bne.w	800355e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db38      	blt.n	8002c14 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a9e      	ldr	r2, [pc, #632]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d033      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x7e>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	e01d      	b.n	8002c06 <HAL_ADC_ConfigChannel+0xba>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e004      	b.n	8002bfc <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2201      	movs	r2, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	69d1      	ldr	r1, [r2, #28]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f7ff f9d8 	bl	8001fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb4a 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002c30:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fb6b 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 8002c3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8270 	bne.w	800312c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 826b 	bne.w	800312c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f7ff f9e3 	bl	800202e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6c      	ldr	r2, [pc, #432]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10d      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c8c:	e032      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c8e:	4b65      	ldr	r3, [pc, #404]	@ (8002e24 <HAL_ADC_ConfigChannel+0x2d8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x168>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	e01d      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1a4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x18e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	e00a      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1a4>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d048      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6919      	ldr	r1, [r3, #16]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d0c:	f7ff f85e 	bl	8001dcc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a42      	ldr	r2, [pc, #264]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d119      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7ff f8f6 	bl	8001f18 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6919      	ldr	r1, [r3, #16]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1f8>
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d42:	e000      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1fa>
 8002d44:	2300      	movs	r3, #0
 8002d46:	461a      	mov	r2, r3
 8002d48:	f7ff f8c4 	bl	8001ed4 <LL_ADC_SetOffsetSaturation>
 8002d4c:	e1ee      	b.n	800312c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x21a>
 8002d60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x21c>
 8002d66:	2300      	movs	r3, #0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f7ff f891 	bl	8001e90 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7e1b      	ldrb	r3, [r3, #24]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x238>
 8002d7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d82:	e000      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x23a>
 8002d84:	2300      	movs	r3, #0
 8002d86:	461a      	mov	r2, r3
 8002d88:	f7ff f868 	bl	8001e5c <LL_ADC_SetDataRightShift>
 8002d8c:	e1ce      	b.n	800312c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a23      	ldr	r2, [pc, #140]	@ (8002e20 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	f040 8181 	bne.w	800309c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f845 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x27a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f83a 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	e01e      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x2b8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f82f 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002de8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002df4:	2320      	movs	r3, #32
 8002df6:	e004      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002df8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x2dc>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	e01e      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x30e>
 8002e1c:	47ff0000 	.word	0x47ff0000
 8002e20:	58026000 	.word	0x58026000
 8002e24:	5c001000 	.word	0x5c001000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e004      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f878 	bl	8001f5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ffdc 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x34c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ffd1 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	e01e      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x38a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ffc6 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x3a2>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	e018      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x3d4>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e004      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f815 	bl	8001f5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe ff79 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x412>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe ff6e 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	e01e      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x450>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe ff63 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e004      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x468>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	e014      	b.n	8002fde <HAL_ADC_ConfigChannel+0x492>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe ffb6 	bl	8001f5c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe ff1a 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x4d0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2103      	movs	r1, #3
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe ff0f 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	e017      	b.n	800304c <HAL_ADC_ConfigChannel+0x500>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2103      	movs	r1, #3
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe ff04 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003036:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x518>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	e011      	b.n	8003088 <HAL_ADC_ConfigChannel+0x53c>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	429a      	cmp	r2, r3
 800308a:	d14f      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	2103      	movs	r1, #3
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe ff61 	bl	8001f5c <LL_ADC_SetOffsetState>
 800309a:	e047      	b.n	800312c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	069b      	lsls	r3, r3, #26
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030be:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	069b      	lsls	r3, r3, #26
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030e2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	069b      	lsls	r3, r3, #26
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003106:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	069b      	lsls	r3, r3, #26
 8003118:	429a      	cmp	r2, r3
 800311a:	d107      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800312a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f879 	bl	8002228 <LL_ADC_IsEnabled>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 8219 	bne.w	8003570 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f7fe ff9a 	bl	8002084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4aa1      	ldr	r2, [pc, #644]	@ (80033dc <HAL_ADC_ConfigChannel+0x890>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f040 812e 	bne.w	80033b8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x638>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	3301      	adds	r3, #1
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b09      	cmp	r3, #9
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e019      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x66c>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	bf94      	ite	ls
 80031b2:	2301      	movls	r3, #1
 80031b4:	2300      	movhi	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d079      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x68c>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	069b      	lsls	r3, r3, #26
 80031d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031d6:	e015      	b.n	8003204 <HAL_ADC_ConfigChannel+0x6b8>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e003      	b.n	80031fc <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80031f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x6d8>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	3301      	adds	r3, #1
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2101      	movs	r1, #1
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	e017      	b.n	8003254 <HAL_ADC_ConfigChannel+0x708>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003234:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e003      	b.n	8003248 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	ea42 0103 	orr.w	r1, r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x72e>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	051b      	lsls	r3, r3, #20
 8003278:	e018      	b.n	80032ac <HAL_ADC_ConfigChannel+0x760>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003292:	2320      	movs	r3, #32
 8003294:	e003      	b.n	800329e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ac:	430b      	orrs	r3, r1
 80032ae:	e07e      	b.n	80033ae <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x780>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	069b      	lsls	r3, r3, #26
 80032c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ca:	e015      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x7ac>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e003      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3301      	adds	r3, #1
 80032f2:	069b      	lsls	r3, r3, #26
 80032f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x7cc>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2101      	movs	r1, #1
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	e017      	b.n	8003348 <HAL_ADC_ConfigChannel+0x7fc>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	61bb      	str	r3, [r7, #24]
  return result;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e003      	b.n	800333c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	ea42 0103 	orr.w	r1, r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x828>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	3b1e      	subs	r3, #30
 800336c:	051b      	lsls	r3, r3, #20
 800336e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003372:	e01b      	b.n	80033ac <HAL_ADC_ConfigChannel+0x860>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
  return result;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f003 021f 	and.w	r2, r3, #31
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	3b1e      	subs	r3, #30
 80033a6:	051b      	lsls	r3, r3, #20
 80033a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ac:	430b      	orrs	r3, r1
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7fe fe3b 	bl	800202e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f280 80d7 	bge.w	8003570 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <HAL_ADC_ConfigChannel+0x894>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_ADC_ConfigChannel+0x88a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <HAL_ADC_ConfigChannel+0x898>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x8a0>
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <HAL_ADC_ConfigChannel+0x89c>)
 80033d8:	e009      	b.n	80033ee <HAL_ADC_ConfigChannel+0x8a2>
 80033da:	bf00      	nop
 80033dc:	47ff0000 	.word	0x47ff0000
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022100 	.word	0x40022100
 80033e8:	40022300 	.word	0x40022300
 80033ec:	4b65      	ldr	r3, [pc, #404]	@ (8003584 <HAL_ADC_ConfigChannel+0xa38>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fcde 	bl	8001db0 <LL_ADC_GetCommonPathInternalCh>
 80033f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a62      	ldr	r2, [pc, #392]	@ (8003588 <HAL_ADC_ConfigChannel+0xa3c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_ADC_ConfigChannel+0x8c0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a61      	ldr	r2, [pc, #388]	@ (800358c <HAL_ADC_ConfigChannel+0xa40>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10e      	bne.n	800342a <HAL_ADC_ConfigChannel+0x8de>
 800340c:	485e      	ldr	r0, [pc, #376]	@ (8003588 <HAL_ADC_ConfigChannel+0xa3c>)
 800340e:	f7fe ff0b 	bl	8002228 <LL_ADC_IsEnabled>
 8003412:	4604      	mov	r4, r0
 8003414:	485d      	ldr	r0, [pc, #372]	@ (800358c <HAL_ADC_ConfigChannel+0xa40>)
 8003416:	f7fe ff07 	bl	8002228 <LL_ADC_IsEnabled>
 800341a:	4603      	mov	r3, r0
 800341c:	4323      	orrs	r3, r4
 800341e:	2b00      	cmp	r3, #0
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e008      	b.n	800343c <HAL_ADC_ConfigChannel+0x8f0>
 800342a:	4859      	ldr	r0, [pc, #356]	@ (8003590 <HAL_ADC_ConfigChannel+0xa44>)
 800342c:	f7fe fefc 	bl	8002228 <LL_ADC_IsEnabled>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8084 	beq.w	800354a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a53      	ldr	r2, [pc, #332]	@ (8003594 <HAL_ADC_ConfigChannel+0xa48>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d132      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x966>
 800344c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d12c      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4c      	ldr	r2, [pc, #304]	@ (8003590 <HAL_ADC_ConfigChannel+0xa44>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f040 8086 	bne.w	8003570 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a47      	ldr	r2, [pc, #284]	@ (8003588 <HAL_ADC_ConfigChannel+0xa3c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x92c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a46      	ldr	r2, [pc, #280]	@ (800358c <HAL_ADC_ConfigChannel+0xa40>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x930>
 8003478:	4a47      	ldr	r2, [pc, #284]	@ (8003598 <HAL_ADC_ConfigChannel+0xa4c>)
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x932>
 800347c:	4a41      	ldr	r2, [pc, #260]	@ (8003584 <HAL_ADC_ConfigChannel+0xa38>)
 800347e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003482:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe fc7e 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_ADC_ConfigChannel+0xa50>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	4a42      	ldr	r2, [pc, #264]	@ (80035a0 <HAL_ADC_ConfigChannel+0xa54>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	3301      	adds	r3, #1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034b0:	e05e      	b.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <HAL_ADC_ConfigChannel+0xa58>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d120      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x9b2>
 80034bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11a      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a30      	ldr	r2, [pc, #192]	@ (8003590 <HAL_ADC_ConfigChannel+0xa44>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d14e      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003588 <HAL_ADC_ConfigChannel+0xa3c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x99a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <HAL_ADC_ConfigChannel+0xa40>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x99e>
 80034e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <HAL_ADC_ConfigChannel+0xa4c>)
 80034e8:	e000      	b.n	80034ec <HAL_ADC_ConfigChannel+0x9a0>
 80034ea:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <HAL_ADC_ConfigChannel+0xa38>)
 80034ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f7fe fc47 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034fc:	e038      	b.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a29      	ldr	r2, [pc, #164]	@ (80035a8 <HAL_ADC_ConfigChannel+0xa5c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d133      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
 8003508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800350c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d12d      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <HAL_ADC_ConfigChannel+0xa44>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d128      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <HAL_ADC_ConfigChannel+0xa3c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x9e6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <HAL_ADC_ConfigChannel+0xa40>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x9ea>
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_ADC_ConfigChannel+0xa4c>)
 8003534:	e000      	b.n	8003538 <HAL_ADC_ConfigChannel+0x9ec>
 8003536:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <HAL_ADC_ConfigChannel+0xa38>)
 8003538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800353c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe fc21 	bl	8001d8a <LL_ADC_SetCommonPathInternalCh>
 8003548:	e012      	b.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800355c:	e008      	b.n	8003570 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003578:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800357c:	4618      	mov	r0, r3
 800357e:	37e4      	adds	r7, #228	@ 0xe4
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	58026300 	.word	0x58026300
 8003588:	40022000 	.word	0x40022000
 800358c:	40022100 	.word	0x40022100
 8003590:	58026000 	.word	0x58026000
 8003594:	c7520000 	.word	0xc7520000
 8003598:	40022300 	.word	0x40022300
 800359c:	24000008 	.word	0x24000008
 80035a0:	053e2d63 	.word	0x053e2d63
 80035a4:	c3210000 	.word	0xc3210000
 80035a8:	cb840000 	.word	0xcb840000

080035ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fe7e 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 80035c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fea0 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 80035d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8098 	beq.w	8003714 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02a      	beq.n	8003648 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7e5b      	ldrb	r3, [r3, #25]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d126      	bne.n	8003648 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d122      	bne.n	8003648 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003602:	2301      	movs	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003606:	e014      	b.n	8003632 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4a45      	ldr	r2, [pc, #276]	@ (8003720 <ADC_ConversionStop+0x174>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d90d      	bls.n	800362c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e074      	b.n	8003716 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d1e3      	bne.n	8003608 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2240      	movs	r2, #64	@ 0x40
 8003646:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d014      	beq.n	8003678 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fe36 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fdf3 	bl	800224e <LL_ADC_IsDisableOngoing>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fe12 	bl	800229c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d014      	beq.n	80036a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fe46 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fddb 	bl	800224e <LL_ADC_IsDisableOngoing>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fe22 	bl	80022ec <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d005      	beq.n	80036ba <ADC_ConversionStop+0x10e>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d105      	bne.n	80036c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036b4:	230c      	movs	r3, #12
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e005      	b.n	80036c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036ba:	2308      	movs	r3, #8
 80036bc:	617b      	str	r3, [r7, #20]
        break;
 80036be:	e002      	b.n	80036c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036c0:	2304      	movs	r3, #4
 80036c2:	617b      	str	r3, [r7, #20]
        break;
 80036c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036c6:	f7fe fb41 	bl	8001d4c <HAL_GetTick>
 80036ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036cc:	e01b      	b.n	8003706 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036ce:	f7fe fb3d 	bl	8001d4c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d914      	bls.n	8003706 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1dc      	bne.n	80036ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	000cdbff 	.word	0x000cdbff

08003724 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fd79 	bl	8002228 <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d16e      	bne.n	800381a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <ADC_Enable+0x100>)
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	f043 0210 	orr.w	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800375a:	f043 0201 	orr.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e05a      	b.n	800381c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fd34 	bl	80021d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003770:	f7fe faec 	bl	8001d4c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <ADC_Enable+0x104>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <ADC_Enable+0x66>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a29      	ldr	r2, [pc, #164]	@ (800382c <ADC_Enable+0x108>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <ADC_Enable+0x6a>
 800378a:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <ADC_Enable+0x10c>)
 800378c:	e000      	b.n	8003790 <ADC_Enable+0x6c>
 800378e:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <ADC_Enable+0x110>)
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fcb7 	bl	8002104 <LL_ADC_GetMultimode>
 8003796:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <ADC_Enable+0x108>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d002      	beq.n	80037a8 <ADC_Enable+0x84>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	e000      	b.n	80037aa <ADC_Enable+0x86>
 80037a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003828 <ADC_Enable+0x104>)
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d130      	bne.n	800381a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b8:	e028      	b.n	800380c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fd32 	bl	8002228 <LL_ADC_IsEnabled>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fd02 	bl	80021d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037d4:	f7fe faba 	bl	8001d4c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d914      	bls.n	800380c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d00d      	beq.n	800380c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f043 0210 	orr.w	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e007      	b.n	800381c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d1cf      	bne.n	80037ba <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	8000003f 	.word	0x8000003f
 8003828:	40022000 	.word	0x40022000
 800382c:	40022100 	.word	0x40022100
 8003830:	40022300 	.word	0x40022300
 8003834:	58026300 	.word	0x58026300

08003838 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fd02 	bl	800224e <LL_ADC_IsDisableOngoing>
 800384a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fce9 	bl	8002228 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d047      	beq.n	80038ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d144      	bne.n	80038ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030d 	and.w	r3, r3, #13
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10c      	bne.n	800388a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fcc3 	bl	8002200 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2203      	movs	r2, #3
 8003880:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003882:	f7fe fa63 	bl	8001d4c <HAL_GetTick>
 8003886:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003888:	e029      	b.n	80038de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e023      	b.n	80038ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038a6:	f7fe fa51 	bl	8001d4c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d914      	bls.n	80038de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e007      	b.n	80038ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1dc      	bne.n	80038a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6c      	ldr	r2, [pc, #432]	@ (8003ab8 <ADC_ConfigureBoostMode+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <ADC_ConfigureBoostMode+0x1c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6b      	ldr	r2, [pc, #428]	@ (8003abc <ADC_ConfigureBoostMode+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d109      	bne.n	8003928 <ADC_ConfigureBoostMode+0x30>
 8003914:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac0 <ADC_ConfigureBoostMode+0x1c8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e008      	b.n	800393a <ADC_ConfigureBoostMode+0x42>
 8003928:	4b66      	ldr	r3, [pc, #408]	@ (8003ac4 <ADC_ConfigureBoostMode+0x1cc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01c      	beq.n	8003978 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800393e:	f001 fbff 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8003942:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800394c:	d010      	beq.n	8003970 <ADC_ConfigureBoostMode+0x78>
 800394e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003952:	d873      	bhi.n	8003a3c <ADC_ConfigureBoostMode+0x144>
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d002      	beq.n	8003960 <ADC_ConfigureBoostMode+0x68>
 800395a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800395e:	d16d      	bne.n	8003a3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	60fb      	str	r3, [r7, #12]
        break;
 800396e:	e068      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	60fb      	str	r3, [r7, #12]
        break;
 8003976:	e064      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003978:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	f002 fdda 	bl	8006538 <HAL_RCCEx_GetPeriphCLKFreq>
 8003984:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800398e:	d051      	beq.n	8003a34 <ADC_ConfigureBoostMode+0x13c>
 8003990:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003994:	d854      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 8003996:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800399a:	d047      	beq.n	8003a2c <ADC_ConfigureBoostMode+0x134>
 800399c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80039a0:	d84e      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039a2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80039a6:	d03d      	beq.n	8003a24 <ADC_ConfigureBoostMode+0x12c>
 80039a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80039ac:	d848      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b2:	d033      	beq.n	8003a1c <ADC_ConfigureBoostMode+0x124>
 80039b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b8:	d842      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039ba:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039be:	d029      	beq.n	8003a14 <ADC_ConfigureBoostMode+0x11c>
 80039c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80039c4:	d83c      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039c6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039ca:	d01a      	beq.n	8003a02 <ADC_ConfigureBoostMode+0x10a>
 80039cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80039d0:	d836      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039d2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039d6:	d014      	beq.n	8003a02 <ADC_ConfigureBoostMode+0x10a>
 80039d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80039dc:	d830      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e2:	d00e      	beq.n	8003a02 <ADC_ConfigureBoostMode+0x10a>
 80039e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e8:	d82a      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039ee:	d008      	beq.n	8003a02 <ADC_ConfigureBoostMode+0x10a>
 80039f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039f4:	d824      	bhi.n	8003a40 <ADC_ConfigureBoostMode+0x148>
 80039f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039fa:	d002      	beq.n	8003a02 <ADC_ConfigureBoostMode+0x10a>
 80039fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a00:	d11e      	bne.n	8003a40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	60fb      	str	r3, [r7, #12]
        break;
 8003a12:	e016      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	60fb      	str	r3, [r7, #12]
        break;
 8003a1a:	e012      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	60fb      	str	r3, [r7, #12]
        break;
 8003a22:	e00e      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	60fb      	str	r3, [r7, #12]
        break;
 8003a2a:	e00a      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	09db      	lsrs	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
        break;
 8003a32:	e006      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	60fb      	str	r3, [r7, #12]
        break;
 8003a3a:	e002      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a40:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <ADC_ConfigureBoostMode+0x1d0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d808      	bhi.n	8003a62 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a5e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a60:	e025      	b.n	8003aae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <ADC_ConfigureBoostMode+0x1d4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d80a      	bhi.n	8003a80 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7c:	609a      	str	r2, [r3, #8]
}
 8003a7e:	e016      	b.n	8003aae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <ADC_ConfigureBoostMode+0x1d8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d80a      	bhi.n	8003a9e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	e007      	b.n	8003aae <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	40022100 	.word	0x40022100
 8003ac0:	40022300 	.word	0x40022300
 8003ac4:	58026300 	.word	0x58026300
 8003ac8:	005f5e10 	.word	0x005f5e10
 8003acc:	00bebc20 	.word	0x00bebc20
 8003ad0:	017d7840 	.word	0x017d7840

08003ad4 <LL_ADC_IsEnabled>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <LL_ADC_IsEnabled+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_ADC_IsEnabled+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_ADC_REG_IsConversionOngoing>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b0a3      	sub	sp, #140	@ 0x8c
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e0c1      	b.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5e      	ldr	r2, [pc, #376]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d102      	bne.n	8003b5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b58:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e001      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0a0      	b.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ffb9 	bl	8003afa <LL_ADC_REG_IsConversionOngoing>
 8003b88:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ffb2 	bl	8003afa <LL_ADC_REG_IsConversionOngoing>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f040 8081 	bne.w	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d17c      	bne.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a48      	ldr	r2, [pc, #288]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a46      	ldr	r2, [pc, #280]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003bba:	4b46      	ldr	r3, [pc, #280]	@ (8003cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bbc:	e000      	b.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003bbe:	4b46      	ldr	r3, [pc, #280]	@ (8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d039      	beq.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a39      	ldr	r2, [pc, #228]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10e      	bne.n	8003c0e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003bf0:	4836      	ldr	r0, [pc, #216]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003bf2:	f7ff ff6f 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4835      	ldr	r0, [pc, #212]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bfa:	f7ff ff6b 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4323      	orrs	r3, r4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e008      	b.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003c0e:	4833      	ldr	r0, [pc, #204]	@ (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c10:	f7ff ff60 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d047      	beq.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c3a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c3c:	e03a      	b.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10e      	bne.n	8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c5e:	481b      	ldr	r0, [pc, #108]	@ (8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c60:	f7ff ff38 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003c64:	4604      	mov	r4, r0
 8003c66:	481a      	ldr	r0, [pc, #104]	@ (8003cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c68:	f7ff ff34 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4323      	orrs	r3, r4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e008      	b.n	8003c8e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003c7c:	4817      	ldr	r0, [pc, #92]	@ (8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c7e:	f7ff ff29 	bl	8003ad4 <LL_ADC_IsEnabled>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9e:	e009      	b.n	8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	378c      	adds	r7, #140	@ 0x8c
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	40022100 	.word	0x40022100
 8003cd4:	40022300 	.word	0x40022300
 8003cd8:	58026300 	.word	0x58026300
 8003cdc:	58026000 	.word	0x58026000
 8003ce0:	fffff0e0 	.word	0xfffff0e0

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	05fa0000 	.word	0x05fa0000

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db0b      	blt.n	8003d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4907      	ldr	r1, [pc, #28]	@ (8003d80 <__NVIC_EnableIRQ+0x38>)
 8003d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2001      	movs	r0, #1
 8003d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	@ (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	@ (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	@ 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	@ 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e50:	d301      	bcc.n	8003e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e52:	2301      	movs	r3, #1
 8003e54:	e00f      	b.n	8003e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e56:	4a0a      	ldr	r2, [pc, #40]	@ (8003e80 <SysTick_Config+0x40>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e5e:	210f      	movs	r1, #15
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	f7ff ff8e 	bl	8003d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <SysTick_Config+0x40>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e6e:	4b04      	ldr	r3, [pc, #16]	@ (8003e80 <SysTick_Config+0x40>)
 8003e70:	2207      	movs	r2, #7
 8003e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000e010 	.word	0xe000e010

08003e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff29 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea8:	f7ff ff40 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff90 	bl	8003dd8 <NVIC_EncodePriority>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff5f 	bl	8003d84 <__NVIC_SetPriority>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff33 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa4 	bl	8003e40 <SysTick_Config>
 8003ef8:	4603      	mov	r3, r0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f12:	4b86      	ldr	r3, [pc, #536]	@ (800412c <HAL_GPIO_Init+0x228>)
 8003f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f16:	e18c      	b.n	8004232 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 817e 	beq.w	800422c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d005      	beq.n	8003f48 <HAL_GPIO_Init+0x44>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d130      	bne.n	8003faa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f7e:	2201      	movs	r2, #1
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0201 	and.w	r2, r3, #1
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d017      	beq.n	8003fe6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d123      	bne.n	800403a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	08da      	lsrs	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	08da      	lsrs	r2, r3, #3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3208      	adds	r2, #8
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	2203      	movs	r2, #3
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80d8 	beq.w	800422c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407c:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 800407e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004082:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800408c:	4b28      	ldr	r3, [pc, #160]	@ (8004130 <HAL_GPIO_Init+0x22c>)
 800408e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <HAL_GPIO_Init+0x230>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_GPIO_Init+0x234>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_GPIO_Init+0x258>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	@ (800413c <HAL_GPIO_Init+0x238>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d02b      	beq.n	8004126 <HAL_GPIO_Init+0x222>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004140 <HAL_GPIO_Init+0x23c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d025      	beq.n	8004122 <HAL_GPIO_Init+0x21e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004144 <HAL_GPIO_Init+0x240>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01f      	beq.n	800411e <HAL_GPIO_Init+0x21a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a19      	ldr	r2, [pc, #100]	@ (8004148 <HAL_GPIO_Init+0x244>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_GPIO_Init+0x216>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_GPIO_Init+0x248>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0x212>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <HAL_GPIO_Init+0x24c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00d      	beq.n	8004112 <HAL_GPIO_Init+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <HAL_GPIO_Init+0x250>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <HAL_GPIO_Init+0x20a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	@ (8004158 <HAL_GPIO_Init+0x254>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_GPIO_Init+0x206>
 8004106:	2309      	movs	r3, #9
 8004108:	e029      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800410a:	230a      	movs	r3, #10
 800410c:	e027      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800410e:	2307      	movs	r3, #7
 8004110:	e025      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004112:	2306      	movs	r3, #6
 8004114:	e023      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004116:	2305      	movs	r3, #5
 8004118:	e021      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800411a:	2304      	movs	r3, #4
 800411c:	e01f      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800411e:	2303      	movs	r3, #3
 8004120:	e01d      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004122:	2302      	movs	r3, #2
 8004124:	e01b      	b.n	800415e <HAL_GPIO_Init+0x25a>
 8004126:	2301      	movs	r3, #1
 8004128:	e019      	b.n	800415e <HAL_GPIO_Init+0x25a>
 800412a:	bf00      	nop
 800412c:	58000080 	.word	0x58000080
 8004130:	58024400 	.word	0x58024400
 8004134:	58000400 	.word	0x58000400
 8004138:	58020000 	.word	0x58020000
 800413c:	58020400 	.word	0x58020400
 8004140:	58020800 	.word	0x58020800
 8004144:	58020c00 	.word	0x58020c00
 8004148:	58021000 	.word	0x58021000
 800414c:	58021400 	.word	0x58021400
 8004150:	58021800 	.word	0x58021800
 8004154:	58021c00 	.word	0x58021c00
 8004158:	58022400 	.word	0x58022400
 800415c:	2300      	movs	r3, #0
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	f002 0203 	and.w	r2, r2, #3
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	4093      	lsls	r3, r2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800416e:	4938      	ldr	r1, [pc, #224]	@ (8004250 <HAL_GPIO_Init+0x34c>)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800417c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f ae6b 	bne.w	8003f18 <HAL_GPIO_Init+0x14>
  }
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	3724      	adds	r7, #36	@ 0x24
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	58000400 	.word	0x58000400

08004254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e001      	b.n	8004276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042c0:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_PWREx_ConfigSupply+0x70>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00a      	beq.n	80042e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042cc:	4b16      	ldr	r3, [pc, #88]	@ (8004328 <HAL_PWREx_ConfigSupply+0x70>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e01f      	b.n	800431e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e01d      	b.n	800431e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042e2:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HAL_PWREx_ConfigSupply+0x70>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	490f      	ldr	r1, [pc, #60]	@ (8004328 <HAL_PWREx_ConfigSupply+0x70>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042f2:	f7fd fd2b 	bl	8001d4c <HAL_GetTick>
 80042f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042f8:	e009      	b.n	800430e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042fa:	f7fd fd27 	bl	8001d4c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004308:	d901      	bls.n	800430e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e007      	b.n	800431e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_PWREx_ConfigSupply+0x70>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431a:	d1ee      	bne.n	80042fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	58024800 	.word	0x58024800

0800432c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	@ 0x30
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e3c8      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8087 	beq.w	800445a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434c:	4b88      	ldr	r3, [pc, #544]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004356:	4b86      	ldr	r3, [pc, #536]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	2b10      	cmp	r3, #16
 8004360:	d007      	beq.n	8004372 <HAL_RCC_OscConfig+0x46>
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	2b18      	cmp	r3, #24
 8004366:	d110      	bne.n	800438a <HAL_RCC_OscConfig+0x5e>
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d10b      	bne.n	800438a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004372:	4b7f      	ldr	r3, [pc, #508]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d06c      	beq.n	8004458 <HAL_RCC_OscConfig+0x12c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d168      	bne.n	8004458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e3a2      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x76>
 8004394:	4b76      	ldr	r3, [pc, #472]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a75      	ldr	r2, [pc, #468]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e02e      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b71      	ldr	r3, [pc, #452]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6e      	ldr	r3, [pc, #440]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6d      	ldr	r2, [pc, #436]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0xbc>
 80043ce:	4b68      	ldr	r3, [pc, #416]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a67      	ldr	r2, [pc, #412]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b65      	ldr	r3, [pc, #404]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a64      	ldr	r2, [pc, #400]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xd4>
 80043e8:	4b61      	ldr	r3, [pc, #388]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a60      	ldr	r2, [pc, #384]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b5e      	ldr	r3, [pc, #376]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd fca0 	bl	8001d4c <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd fc9c 	bl	8001d4c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e356      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004422:	4b53      	ldr	r3, [pc, #332]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xe4>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fd fc8c 	bl	8001d4c <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fd fc88 	bl	8001d4c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e342      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800444a:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x10c>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 808c 	beq.w	8004580 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004468:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004470:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004472:	4b3f      	ldr	r3, [pc, #252]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_RCC_OscConfig+0x162>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	2b18      	cmp	r3, #24
 8004482:	d137      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1c8>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d132      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448e:	4b38      	ldr	r3, [pc, #224]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCC_OscConfig+0x17a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e314      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044a6:	4b32      	ldr	r3, [pc, #200]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 0219 	bic.w	r2, r3, #25
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	492f      	ldr	r1, [pc, #188]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fd fc48 	bl	8001d4c <HAL_GetTick>
 80044bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fd fc44 	bl	8001d4c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e2fe      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d2:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	4920      	ldr	r1, [pc, #128]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f2:	e045      	b.n	8004580 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d026      	beq.n	800454a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0219 	bic.w	r2, r3, #25
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4919      	ldr	r1, [pc, #100]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd fc1d 	bl	8001d4c <HAL_GetTick>
 8004512:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004516:	f7fd fc19 	bl	8001d4c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e2d3      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	490b      	ldr	r1, [pc, #44]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
 8004548:	e01a      	b.n	8004580 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a08      	ldr	r2, [pc, #32]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fbf9 	bl	8001d4c <HAL_GetTick>
 800455a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fd fbf5 	bl	8001d4c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d903      	bls.n	8004574 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e2af      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
 8004570:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004574:	4b96      	ldr	r3, [pc, #600]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ee      	bne.n	800455e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d06a      	beq.n	8004662 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458c:	4b90      	ldr	r3, [pc, #576]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004594:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004596:	4b8e      	ldr	r3, [pc, #568]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d007      	beq.n	80045b2 <HAL_RCC_OscConfig+0x286>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b18      	cmp	r3, #24
 80045a6:	d11b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2b4>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d116      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b2:	4b87      	ldr	r3, [pc, #540]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_RCC_OscConfig+0x29e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e282      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ca:	4b81      	ldr	r3, [pc, #516]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	497d      	ldr	r1, [pc, #500]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045de:	e040      	b.n	8004662 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045e8:	4b79      	ldr	r3, [pc, #484]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a78      	ldr	r2, [pc, #480]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fbaa 	bl	8001d4c <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045fc:	f7fd fba6 	bl	8001d4c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e260      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800460e:	4b70      	ldr	r3, [pc, #448]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461a:	4b6d      	ldr	r3, [pc, #436]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	4969      	ldr	r1, [pc, #420]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	60cb      	str	r3, [r1, #12]
 800462e:	e018      	b.n	8004662 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004630:	4b67      	ldr	r3, [pc, #412]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a66      	ldr	r2, [pc, #408]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fb86 	bl	8001d4c <HAL_GetTick>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004644:	f7fd fb82 	bl	8001d4c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e23c      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004656:	4b5e      	ldr	r3, [pc, #376]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d036      	beq.n	80046dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d019      	beq.n	80046aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467a:	4a55      	ldr	r2, [pc, #340]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fd fb63 	bl	8001d4c <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468a:	f7fd fb5f 	bl	8001d4c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e219      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800469c:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800469e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x35e>
 80046a8:	e018      	b.n	80046dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ae:	4a48      	ldr	r2, [pc, #288]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fd fb49 	bl	8001d4c <HAL_GetTick>
 80046ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fd fb45 	bl	8001d4c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e1ff      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d0:	4b3f      	ldr	r3, [pc, #252]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80046d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f0      	bne.n	80046be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d036      	beq.n	8004756 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d019      	beq.n	8004724 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f0:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a36      	ldr	r2, [pc, #216]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80046f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046fc:	f7fd fb26 	bl	8001d4c <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004704:	f7fd fb22 	bl	8001d4c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1dc      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004716:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x3d8>
 8004722:	e018      	b.n	8004756 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800472a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800472e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004730:	f7fd fb0c 	bl	8001d4c <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004738:	f7fd fb08 	bl	8001d4c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1c2      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800474a:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8086 	beq.w	8004870 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004764:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <HAL_RCC_OscConfig+0x4a8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1a      	ldr	r2, [pc, #104]	@ (80047d4 <HAL_RCC_OscConfig+0x4a8>)
 800476a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004770:	f7fd faec 	bl	8001d4c <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004778:	f7fd fae8 	bl	8001d4c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1a2      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <HAL_RCC_OscConfig+0x4a8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_RCC_OscConfig+0x480>
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a0b      	ldr	r2, [pc, #44]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	e032      	b.n	8004812 <HAL_RCC_OscConfig+0x4e6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d111      	bne.n	80047d8 <HAL_RCC_OscConfig+0x4ac>
 80047b4:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	4b03      	ldr	r3, [pc, #12]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a02      	ldr	r2, [pc, #8]	@ (80047d0 <HAL_RCC_OscConfig+0x4a4>)
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	e021      	b.n	8004812 <HAL_RCC_OscConfig+0x4e6>
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	58024800 	.word	0x58024800
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x4ce>
 80047e0:	4b83      	ldr	r3, [pc, #524]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e4:	4a82      	ldr	r2, [pc, #520]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ec:	4b80      	ldr	r3, [pc, #512]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	4a7f      	ldr	r2, [pc, #508]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x4e6>
 80047fa:	4b7d      	ldr	r3, [pc, #500]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	4a7c      	ldr	r2, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	6713      	str	r3, [r2, #112]	@ 0x70
 8004806:	4b7a      	ldr	r3, [pc, #488]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	4a79      	ldr	r2, [pc, #484]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd fa97 	bl	8001d4c <HAL_GetTick>
 800481e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd fa93 	bl	8001d4c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e14b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004838:	4b6d      	ldr	r3, [pc, #436]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ee      	beq.n	8004822 <HAL_RCC_OscConfig+0x4f6>
 8004844:	e014      	b.n	8004870 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fd fa81 	bl	8001d4c <HAL_GetTick>
 800484a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fd fa7d 	bl	8001d4c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e135      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004864:	4b62      	ldr	r3, [pc, #392]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ee      	bne.n	800484e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 812a 	beq.w	8004ace <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800487a:	4b5d      	ldr	r3, [pc, #372]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004882:	2b18      	cmp	r3, #24
 8004884:	f000 80ba 	beq.w	80049fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	2b02      	cmp	r3, #2
 800488e:	f040 8095 	bne.w	80049bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b57      	ldr	r3, [pc, #348]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a56      	ldr	r2, [pc, #344]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fd fa55 	bl	8001d4c <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fd fa51 	bl	8001d4c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e10b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b8:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c4:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80048c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048c8:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <HAL_RCC_OscConfig+0x6c8>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	430a      	orrs	r2, r1
 80048d8:	4945      	ldr	r1, [pc, #276]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	3b01      	subs	r3, #1
 80048e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	3b01      	subs	r3, #1
 80048ee:	025b      	lsls	r3, r3, #9
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	3b01      	subs	r3, #1
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004906:	3b01      	subs	r3, #1
 8004908:	061b      	lsls	r3, r3, #24
 800490a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800490e:	4938      	ldr	r1, [pc, #224]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004914:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	4a35      	ldr	r2, [pc, #212]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004920:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004924:	4b34      	ldr	r3, [pc, #208]	@ (80049f8 <HAL_RCC_OscConfig+0x6cc>)
 8004926:	4013      	ands	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800492c:	00d2      	lsls	r2, r2, #3
 800492e:	4930      	ldr	r1, [pc, #192]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004934:	4b2e      	ldr	r3, [pc, #184]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	f023 020c 	bic.w	r2, r3, #12
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	492b      	ldr	r1, [pc, #172]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	f023 0202 	bic.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	4927      	ldr	r1, [pc, #156]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004954:	4313      	orrs	r3, r2
 8004956:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004958:	4b25      	ldr	r3, [pc, #148]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b22      	ldr	r3, [pc, #136]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	4a21      	ldr	r2, [pc, #132]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004970:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800497a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800497c:	4b1c      	ldr	r3, [pc, #112]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b19      	ldr	r3, [pc, #100]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd f9da 	bl	8001d4c <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd f9d6 	bl	8001d4c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e090      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x670>
 80049ba:	e088      	b.n	8004ace <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80049c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd f9c0 	bl	8001d4c <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fd f9bc 	bl	8001d4c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e076      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049e2:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <HAL_RCC_OscConfig+0x6c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x6a4>
 80049ee:	e06e      	b.n	8004ace <HAL_RCC_OscConfig+0x7a2>
 80049f0:	58024400 	.word	0x58024400
 80049f4:	fffffc0c 	.word	0xfffffc0c
 80049f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a02:	4b35      	ldr	r3, [pc, #212]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d031      	beq.n	8004a74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0203 	and.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d12a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d122      	bne.n	8004a74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d11a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	0a5b      	lsrs	r3, r3, #9
 8004a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d108      	bne.n	8004a74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e02b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a78:	4b17      	ldr	r3, [pc, #92]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d01f      	beq.n	8004ace <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	4a11      	ldr	r2, [pc, #68]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a9a:	f7fd f957 	bl	8001d4c <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004aa0:	bf00      	nop
 8004aa2:	f7fd f953 	bl	8001d4c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d0f9      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004aae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_RCC_OscConfig+0x7b0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004aba:	00d2      	lsls	r2, r2, #3
 8004abc:	4906      	ldr	r1, [pc, #24]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ac2:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <HAL_RCC_OscConfig+0x7ac>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3730      	adds	r7, #48	@ 0x30
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	ffff0007 	.word	0xffff0007

08004ae0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e19c      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b8a      	ldr	r3, [pc, #552]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d910      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b87      	ldr	r3, [pc, #540]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 020f 	bic.w	r2, r3, #15
 8004b0a:	4985      	ldr	r1, [pc, #532]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b83      	ldr	r3, [pc, #524]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e184      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	4b7b      	ldr	r3, [pc, #492]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d908      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b40:	4b78      	ldr	r3, [pc, #480]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	4975      	ldr	r1, [pc, #468]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d010      	beq.n	8004b80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	4b70      	ldr	r3, [pc, #448]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d908      	bls.n	8004b80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	496a      	ldr	r1, [pc, #424]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d010      	beq.n	8004bae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	4b64      	ldr	r3, [pc, #400]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d908      	bls.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b9c:	4b61      	ldr	r3, [pc, #388]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	495e      	ldr	r1, [pc, #376]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	4b59      	ldr	r3, [pc, #356]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d908      	bls.n	8004bdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bca:	4b56      	ldr	r3, [pc, #344]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4953      	ldr	r1, [pc, #332]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d010      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	4b4d      	ldr	r3, [pc, #308]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d908      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f023 020f 	bic.w	r2, r3, #15
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4947      	ldr	r1, [pc, #284]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d055      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c16:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	4940      	ldr	r1, [pc, #256]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d107      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c30:	4b3c      	ldr	r3, [pc, #240]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d121      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0f6      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c48:	4b36      	ldr	r3, [pc, #216]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d115      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0ea      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c60:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0de      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c70:	4b2c      	ldr	r3, [pc, #176]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0d6      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c80:	4b28      	ldr	r3, [pc, #160]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f023 0207 	bic.w	r2, r3, #7
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4925      	ldr	r1, [pc, #148]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c92:	f7fd f85b 	bl	8001d4c <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9a:	f7fd f857 	bl	8001d4c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0be      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d1eb      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d208      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cde:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f023 020f 	bic.w	r2, r3, #15
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	490e      	ldr	r1, [pc, #56]	@ (8004d24 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d214      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 020f 	bic.w	r2, r3, #15
 8004d06:	4906      	ldr	r1, [pc, #24]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <HAL_RCC_ClockConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e086      	b.n	8004e2e <HAL_RCC_ClockConfig+0x34e>
 8004d20:	52002000 	.word	0x52002000
 8004d24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	4b3f      	ldr	r3, [pc, #252]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d208      	bcs.n	8004d56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d44:	4b3c      	ldr	r3, [pc, #240]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4939      	ldr	r1, [pc, #228]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d010      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d208      	bcs.n	8004d84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d72:	4b31      	ldr	r3, [pc, #196]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	492e      	ldr	r1, [pc, #184]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d010      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d208      	bcs.n	8004db2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da0:	4b25      	ldr	r3, [pc, #148]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	4922      	ldr	r1, [pc, #136]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d208      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dce:	4b1a      	ldr	r3, [pc, #104]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4917      	ldr	r1, [pc, #92]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004de0:	f000 f834 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	4912      	ldr	r1, [pc, #72]	@ (8004e3c <HAL_RCC_ClockConfig+0x35c>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <HAL_RCC_ClockConfig+0x358>)
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	4a0d      	ldr	r2, [pc, #52]	@ (8004e3c <HAL_RCC_ClockConfig+0x35c>)
 8004e08:	5cd3      	ldrb	r3, [r2, r3]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	4a0a      	ldr	r2, [pc, #40]	@ (8004e40 <HAL_RCC_ClockConfig+0x360>)
 8004e16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e18:	4a0a      	ldr	r2, [pc, #40]	@ (8004e44 <HAL_RCC_ClockConfig+0x364>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <HAL_RCC_ClockConfig+0x368>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fc ff48 	bl	8001cb8 <HAL_InitTick>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	0800ac78 	.word	0x0800ac78
 8004e40:	2400000c 	.word	0x2400000c
 8004e44:	24000008 	.word	0x24000008
 8004e48:	24000010 	.word	0x24000010

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	@ 0x24
 8004e50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e52:	4bb3      	ldr	r3, [pc, #716]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5a:	2b18      	cmp	r3, #24
 8004e5c:	f200 8155 	bhi.w	800510a <HAL_RCC_GetSysClockFreq+0x2be>
 8004e60:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e66:	bf00      	nop
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	0800510b 	.word	0x0800510b
 8004e70:	0800510b 	.word	0x0800510b
 8004e74:	0800510b 	.word	0x0800510b
 8004e78:	0800510b 	.word	0x0800510b
 8004e7c:	0800510b 	.word	0x0800510b
 8004e80:	0800510b 	.word	0x0800510b
 8004e84:	0800510b 	.word	0x0800510b
 8004e88:	08004ef3 	.word	0x08004ef3
 8004e8c:	0800510b 	.word	0x0800510b
 8004e90:	0800510b 	.word	0x0800510b
 8004e94:	0800510b 	.word	0x0800510b
 8004e98:	0800510b 	.word	0x0800510b
 8004e9c:	0800510b 	.word	0x0800510b
 8004ea0:	0800510b 	.word	0x0800510b
 8004ea4:	0800510b 	.word	0x0800510b
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	0800510b 	.word	0x0800510b
 8004eb0:	0800510b 	.word	0x0800510b
 8004eb4:	0800510b 	.word	0x0800510b
 8004eb8:	0800510b 	.word	0x0800510b
 8004ebc:	0800510b 	.word	0x0800510b
 8004ec0:	0800510b 	.word	0x0800510b
 8004ec4:	0800510b 	.word	0x0800510b
 8004ec8:	08004eff 	.word	0x08004eff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ecc:	4b94      	ldr	r3, [pc, #592]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d009      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed8:	4b91      	ldr	r3, [pc, #580]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	4a90      	ldr	r2, [pc, #576]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004eea:	e111      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004eec:	4b8d      	ldr	r3, [pc, #564]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004eee:	61bb      	str	r3, [r7, #24]
      break;
 8004ef0:	e10e      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef4:	61bb      	str	r3, [r7, #24]
      break;
 8004ef6:	e10b      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800512c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004efa:	61bb      	str	r3, [r7, #24]
      break;
 8004efc:	e108      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004efe:	4b88      	ldr	r3, [pc, #544]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f08:	4b85      	ldr	r3, [pc, #532]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f14:	4b82      	ldr	r3, [pc, #520]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f1e:	4b80      	ldr	r3, [pc, #512]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f22:	08db      	lsrs	r3, r3, #3
 8004f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80e1 	beq.w	8005104 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f000 8083 	beq.w	8005050 <HAL_RCC_GetSysClockFreq+0x204>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	f200 80a1 	bhi.w	8005094 <HAL_RCC_GetSysClockFreq+0x248>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x114>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d056      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f5e:	e099      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f60:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02d      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	08db      	lsrs	r3, r3, #3
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	4a6b      	ldr	r2, [pc, #428]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f96:	4b62      	ldr	r3, [pc, #392]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004faa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fc6:	e087      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005134 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b51      	ldr	r3, [pc, #324]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800500a:	e065      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005138 <HAL_RCC_GetSysClockFreq+0x2ec>
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b40      	ldr	r3, [pc, #256]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005032:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800504e:	e043      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800513c <HAL_RCC_GetSysClockFreq+0x2f0>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b2f      	ldr	r3, [pc, #188]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a02 	vldr	s12, [r7, #8]
 8005076:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005092:	e021      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005138 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005130 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050d8:	4b11      	ldr	r3, [pc, #68]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e2:	3301      	adds	r3, #1
 80050e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	ee07 3a90 	vmov	s15, r3
 80050ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fc:	ee17 3a90 	vmov	r3, s15
 8005100:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005102:	e005      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
      break;
 8005108:	e002      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800510c:	61bb      	str	r3, [r7, #24]
      break;
 800510e:	bf00      	nop
  }

  return sysclockfreq;
 8005110:	69bb      	ldr	r3, [r7, #24]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3724      	adds	r7, #36	@ 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	58024400 	.word	0x58024400
 8005124:	03d09000 	.word	0x03d09000
 8005128:	003d0900 	.word	0x003d0900
 800512c:	007a1200 	.word	0x007a1200
 8005130:	46000000 	.word	0x46000000
 8005134:	4c742400 	.word	0x4c742400
 8005138:	4a742400 	.word	0x4a742400
 800513c:	4af42400 	.word	0x4af42400

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005146:	f7ff fe81 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4b10      	ldr	r3, [pc, #64]	@ (8005190 <HAL_RCC_GetHCLKFreq+0x50>)
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	490f      	ldr	r1, [pc, #60]	@ (8005194 <HAL_RCC_GetHCLKFreq+0x54>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005164:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <HAL_RCC_GetHCLKFreq+0x50>)
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	4a09      	ldr	r2, [pc, #36]	@ (8005194 <HAL_RCC_GetHCLKFreq+0x54>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x58>)
 800517c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800517e:	4a07      	ldr	r2, [pc, #28]	@ (800519c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <HAL_RCC_GetHCLKFreq+0x58>)
 8005186:	681b      	ldr	r3, [r3, #0]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	58024400 	.word	0x58024400
 8005194:	0800ac78 	.word	0x0800ac78
 8005198:	2400000c 	.word	0x2400000c
 800519c:	24000008 	.word	0x24000008

080051a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051a4:	f7ff ffcc 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	58024400 	.word	0x58024400
 80051c8:	0800ac78 	.word	0x0800ac78

080051cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051d0:	f7ff ffb6 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4904      	ldr	r1, [pc, #16]	@ (80051f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	58024400 	.word	0x58024400
 80051f4:	0800ac78 	.word	0x0800ac78

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051fc:	b0c6      	sub	sp, #280	@ 0x118
 80051fe:	af00      	add	r7, sp, #0
 8005200:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800521c:	2500      	movs	r5, #0
 800521e:	ea54 0305 	orrs.w	r3, r4, r5
 8005222:	d049      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800522e:	d02f      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005234:	d828      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005236:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800523a:	d01a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800523c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005240:	d822      	bhi.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800524a:	d007      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800524c:	e01c      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524e:	4bab      	ldr	r3, [pc, #684]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4aaa      	ldr	r2, [pc, #680]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800525a:	e01a      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	3308      	adds	r3, #8
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f002 fa49 	bl	80076fc <RCCEx_PLL2_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005270:	e00f      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	3328      	adds	r3, #40	@ 0x28
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f002 faf0 	bl	8007860 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005286:	e004      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800528e:	e000      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800529a:	4b98      	ldr	r3, [pc, #608]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800529c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a8:	4a94      	ldr	r2, [pc, #592]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052aa:	430b      	orrs	r3, r1
 80052ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80052ae:	e003      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80052c4:	f04f 0900 	mov.w	r9, #0
 80052c8:	ea58 0309 	orrs.w	r3, r8, r9
 80052cc:	d047      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d82a      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	08005303 	.word	0x08005303
 80052e8:	08005319 	.word	0x08005319
 80052ec:	08005337 	.word	0x08005337
 80052f0:	08005337 	.word	0x08005337
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4b81      	ldr	r3, [pc, #516]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4a80      	ldr	r2, [pc, #512]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005300:	e01a      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	3308      	adds	r3, #8
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f002 f9f6 	bl	80076fc <RCCEx_PLL2_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005316:	e00f      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531c:	3328      	adds	r3, #40	@ 0x28
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f002 fa9d 	bl	8007860 <RCCEx_PLL3_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800532c:	e004      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005334:	e000      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005340:	4b6e      	ldr	r3, [pc, #440]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005344:	f023 0107 	bic.w	r1, r3, #7
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	4a6b      	ldr	r2, [pc, #428]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005350:	430b      	orrs	r3, r1
 8005352:	6513      	str	r3, [r2, #80]	@ 0x50
 8005354:	e003      	b.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005356:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800536a:	f04f 0b00 	mov.w	fp, #0
 800536e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005372:	d05b      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800537c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005380:	d03b      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005382:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005386:	d834      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800538c:	d037      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800538e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005392:	d82e      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005398:	d033      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800539a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800539e:	d828      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a4:	d01a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053aa:	d822      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80053b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053b4:	d007      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80053b6:	e01c      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b8:	4b50      	ldr	r3, [pc, #320]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a4f      	ldr	r2, [pc, #316]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c4:	e01e      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ca:	3308      	adds	r3, #8
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f002 f994 	bl	80076fc <RCCEx_PLL2_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053da:	e013      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e0:	3328      	adds	r3, #40	@ 0x28
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fa3b 	bl	8007860 <RCCEx_PLL3_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f0:	e008      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053f8:	e004      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800540c:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800540e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005410:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800541c:	4a37      	ldr	r2, [pc, #220]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800541e:	430b      	orrs	r3, r1
 8005420:	6593      	str	r3, [r2, #88]	@ 0x58
 8005422:	e003      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800543c:	2300      	movs	r3, #0
 800543e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005442:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005446:	460b      	mov	r3, r1
 8005448:	4313      	orrs	r3, r2
 800544a:	d05d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005454:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005458:	d03b      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800545a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800545e:	d834      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005460:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005464:	d037      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005466:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800546a:	d82e      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800546c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005470:	d033      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005472:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005476:	d828      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800547c:	d01a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800547e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005482:	d822      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800548c:	d007      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800548e:	e01c      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005490:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	4a19      	ldr	r2, [pc, #100]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800549c:	e01e      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	3308      	adds	r3, #8
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f002 f928 	bl	80076fc <RCCEx_PLL2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b2:	e013      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	3328      	adds	r3, #40	@ 0x28
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 f9cf 	bl	8007860 <RCCEx_PLL3_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c8:	e008      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054f4:	4a01      	ldr	r2, [pc, #4]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80054fa:	e005      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80054fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005514:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800551e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
 8005526:	d03a      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	2b30      	cmp	r3, #48	@ 0x30
 8005530:	d01f      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005532:	2b30      	cmp	r3, #48	@ 0x30
 8005534:	d819      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005536:	2b20      	cmp	r3, #32
 8005538:	d00c      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d815      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d019      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d111      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005546:	4baa      	ldr	r3, [pc, #680]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	4aa9      	ldr	r2, [pc, #676]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800554c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005552:	e011      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005558:	3308      	adds	r3, #8
 800555a:	2102      	movs	r1, #2
 800555c:	4618      	mov	r0, r3
 800555e:	f002 f8cd 	bl	80076fc <RCCEx_PLL2_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005568:	e006      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005570:	e002      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005580:	4b9b      	ldr	r3, [pc, #620]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005584:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558e:	4a98      	ldr	r2, [pc, #608]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005590:	430b      	orrs	r3, r1
 8005592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800559a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800559e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80055aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d051      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055c8:	d035      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80055ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ce:	d82e      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055d4:	d031      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80055d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055da:	d828      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e0:	d01a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055e6:	d822      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d007      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80055f2:	e01c      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b7e      	ldr	r3, [pc, #504]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4a7d      	ldr	r2, [pc, #500]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005600:	e01c      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005606:	3308      	adds	r3, #8
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f002 f876 	bl	80076fc <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005616:	e011      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561c:	3328      	adds	r3, #40	@ 0x28
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f002 f91d 	bl	8007860 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005636:	bf00      	nop
 8005638:	e000      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800563a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005644:	4b6a      	ldr	r3, [pc, #424]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005648:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005652:	4a67      	ldr	r2, [pc, #412]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005654:	430b      	orrs	r3, r1
 8005656:	6513      	str	r3, [r2, #80]	@ 0x50
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800565e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800566e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005678:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d053      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800568c:	d033      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800568e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005692:	d82c      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005694:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005698:	d02f      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800569a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800569e:	d826      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056a4:	d02b      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80056a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056aa:	d820      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b0:	d012      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80056b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056b6:	d81a      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d022      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c0:	d115      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	3308      	adds	r3, #8
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f002 f816 	bl	80076fc <RCCEx_PLL2_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056d6:	e015      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056dc:	3328      	adds	r3, #40	@ 0x28
 80056de:	2101      	movs	r1, #1
 80056e0:	4618      	mov	r0, r3
 80056e2:	f002 f8bd 	bl	8007860 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056f6:	bf00      	nop
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800570c:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800570e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005710:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571a:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005726:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005740:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d058      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005756:	d033      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800575c:	d82c      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005762:	d02f      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d826      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800576a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800576e:	d02b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005774:	d820      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800577a:	d012      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005780:	d81a      	bhi.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d022      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800578a:	d115      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	3308      	adds	r3, #8
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f001 ffb1 	bl	80076fc <RCCEx_PLL2_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057a0:	e015      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a6:	3328      	adds	r3, #40	@ 0x28
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 f858 	bl	8007860 <RCCEx_PLL3_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057b6:	e00a      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057be:	e006      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c0:	bf00      	nop
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c4:	bf00      	nop
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10e      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057e6:	4a02      	ldr	r2, [pc, #8]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ec:	e006      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80057ee:	bf00      	nop
 80057f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800580c:	2300      	movs	r3, #0
 800580e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005812:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005816:	460b      	mov	r3, r1
 8005818:	4313      	orrs	r3, r2
 800581a:	d037      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005826:	d00e      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800582c:	d816      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005836:	d111      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4bc4      	ldr	r3, [pc, #784]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	4ac3      	ldr	r2, [pc, #780]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005844:	e00f      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	3308      	adds	r3, #8
 800584c:	2101      	movs	r1, #1
 800584e:	4618      	mov	r0, r3
 8005850:	f001 ff54 	bl	80076fc <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800586e:	4bb7      	ldr	r3, [pc, #732]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005872:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587c:	4ab3      	ldr	r2, [pc, #716]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800587e:	430b      	orrs	r3, r1
 8005880:	6513      	str	r3, [r2, #80]	@ 0x50
 8005882:	e003      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005888:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800589c:	2300      	movs	r3, #0
 800589e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058a6:	460b      	mov	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	d039      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d81c      	bhi.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80058b6:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058cd 	.word	0x080058cd
 80058c4:	080058db 	.word	0x080058db
 80058c8:	080058f9 	.word	0x080058f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4b9f      	ldr	r3, [pc, #636]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	4a9e      	ldr	r2, [pc, #632]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058d8:	e00f      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058de:	3308      	adds	r3, #8
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 ff0a 	bl	80076fc <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005902:	4b92      	ldr	r3, [pc, #584]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005906:	f023 0103 	bic.w	r1, r3, #3
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	4a8e      	ldr	r2, [pc, #568]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005912:	430b      	orrs	r3, r1
 8005914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800591c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800592c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005936:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	f000 8099 	beq.w	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005942:	4b83      	ldr	r3, [pc, #524]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a82      	ldr	r2, [pc, #520]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800594c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594e:	f7fc f9fd 	bl	8001d4c <HAL_GetTick>
 8005952:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005956:	e00b      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fc f9f8 	bl	8001d4c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b64      	cmp	r3, #100	@ 0x64
 8005966:	d903      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800596e:	e005      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005970:	4b77      	ldr	r3, [pc, #476]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ed      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800597c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005980:	2b00      	cmp	r3, #0
 8005982:	d173      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005984:	4b71      	ldr	r3, [pc, #452]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005990:	4053      	eors	r3, r2
 8005992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d015      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059a6:	4b69      	ldr	r3, [pc, #420]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	4a68      	ldr	r2, [pc, #416]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b2:	4b66      	ldr	r3, [pc, #408]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a65      	ldr	r2, [pc, #404]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059be:	4a63      	ldr	r2, [pc, #396]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d2:	d118      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc f9ba 	bl	8001d4c <HAL_GetTick>
 80059d8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059dc:	e00d      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc f9b5 	bl	8001d4c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80059e8:	1ad2      	subs	r2, r2, r3
 80059ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d903      	bls.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80059f8:	e005      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fa:	4b54      	ldr	r3, [pc, #336]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0eb      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005a06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d129      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a1e:	d10e      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005a20:	4b4a      	ldr	r3, [pc, #296]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a30:	091a      	lsrs	r2, r3, #4
 8005a32:	4b48      	ldr	r3, [pc, #288]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	4a45      	ldr	r2, [pc, #276]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6113      	str	r3, [r2, #16]
 8005a3c:	e005      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005a3e:	4b43      	ldr	r3, [pc, #268]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	4a42      	ldr	r2, [pc, #264]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a48:	6113      	str	r3, [r2, #16]
 8005a4a:	4b40      	ldr	r3, [pc, #256]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a60:	e008      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005a6a:	e003      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f002 0301 	and.w	r3, r2, #1
 8005a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f000 808f 	beq.w	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a9c:	2b28      	cmp	r3, #40	@ 0x28
 8005a9e:	d871      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005b8d 	.word	0x08005b8d
 8005aac:	08005b85 	.word	0x08005b85
 8005ab0:	08005b85 	.word	0x08005b85
 8005ab4:	08005b85 	.word	0x08005b85
 8005ab8:	08005b85 	.word	0x08005b85
 8005abc:	08005b85 	.word	0x08005b85
 8005ac0:	08005b85 	.word	0x08005b85
 8005ac4:	08005b85 	.word	0x08005b85
 8005ac8:	08005b59 	.word	0x08005b59
 8005acc:	08005b85 	.word	0x08005b85
 8005ad0:	08005b85 	.word	0x08005b85
 8005ad4:	08005b85 	.word	0x08005b85
 8005ad8:	08005b85 	.word	0x08005b85
 8005adc:	08005b85 	.word	0x08005b85
 8005ae0:	08005b85 	.word	0x08005b85
 8005ae4:	08005b85 	.word	0x08005b85
 8005ae8:	08005b6f 	.word	0x08005b6f
 8005aec:	08005b85 	.word	0x08005b85
 8005af0:	08005b85 	.word	0x08005b85
 8005af4:	08005b85 	.word	0x08005b85
 8005af8:	08005b85 	.word	0x08005b85
 8005afc:	08005b85 	.word	0x08005b85
 8005b00:	08005b85 	.word	0x08005b85
 8005b04:	08005b85 	.word	0x08005b85
 8005b08:	08005b8d 	.word	0x08005b8d
 8005b0c:	08005b85 	.word	0x08005b85
 8005b10:	08005b85 	.word	0x08005b85
 8005b14:	08005b85 	.word	0x08005b85
 8005b18:	08005b85 	.word	0x08005b85
 8005b1c:	08005b85 	.word	0x08005b85
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005b85 	.word	0x08005b85
 8005b28:	08005b8d 	.word	0x08005b8d
 8005b2c:	08005b85 	.word	0x08005b85
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005b85 	.word	0x08005b85
 8005b38:	08005b85 	.word	0x08005b85
 8005b3c:	08005b85 	.word	0x08005b85
 8005b40:	08005b85 	.word	0x08005b85
 8005b44:	08005b85 	.word	0x08005b85
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	58024800 	.word	0x58024800
 8005b54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fdcb 	bl	80076fc <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	3328      	adds	r3, #40	@ 0x28
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fe72 	bl	8007860 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b96:	4bbf      	ldr	r3, [pc, #764]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ba4:	4abb      	ldr	r2, [pc, #748]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005baa:	e003      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f002 0302 	and.w	r3, r2, #2
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	d041      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d824      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005bde:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005c31 	.word	0x08005c31
 8005be8:	08005bfd 	.word	0x08005bfd
 8005bec:	08005c13 	.word	0x08005c13
 8005bf0:	08005c31 	.word	0x08005c31
 8005bf4:	08005c31 	.word	0x08005c31
 8005bf8:	08005c31 	.word	0x08005c31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	3308      	adds	r3, #8
 8005c02:	2101      	movs	r1, #1
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fd79 	bl	80076fc <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c10:	e00f      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	3328      	adds	r3, #40	@ 0x28
 8005c18:	2101      	movs	r1, #1
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fe20 	bl	8007860 <RCCEx_PLL3_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c26:	e004      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c2e:	e000      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c3a:	4b96      	ldr	r3, [pc, #600]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3e:	f023 0107 	bic.w	r1, r3, #7
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c48:	4a92      	ldr	r2, [pc, #584]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c4e:	e003      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f002 0304 	and.w	r3, r2, #4
 8005c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d044      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	d825      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005c84:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cd9 	.word	0x08005cd9
 8005c90:	08005ca5 	.word	0x08005ca5
 8005c94:	08005cbb 	.word	0x08005cbb
 8005c98:	08005cd9 	.word	0x08005cd9
 8005c9c:	08005cd9 	.word	0x08005cd9
 8005ca0:	08005cd9 	.word	0x08005cd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca8:	3308      	adds	r3, #8
 8005caa:	2101      	movs	r1, #1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fd25 	bl	80076fc <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e00f      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	3328      	adds	r3, #40	@ 0x28
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fdcc 	bl	8007860 <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cce:	e004      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10b      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	f023 0107 	bic.w	r1, r3, #7
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	4a68      	ldr	r2, [pc, #416]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f002 0320 	and.w	r3, r2, #32
 8005d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d055      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d2e:	d033      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d34:	d82c      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3a:	d02f      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d40:	d826      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d46:	d02b      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d4c:	d820      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d52:	d012      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d58:	d81a      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d022      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d62:	d115      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d68:	3308      	adds	r3, #8
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fcc5 	bl	80076fc <RCCEx_PLL2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d78:	e015      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7e:	3328      	adds	r3, #40	@ 0x28
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fd6c 	bl	8007860 <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e00a      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d96:	e006      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e004      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dae:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dbe:	4a35      	ldr	r2, [pc, #212]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dde:	2300      	movs	r3, #0
 8005de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005de4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d058      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005df6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005dfa:	d033      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005dfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005e00:	d82c      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e06:	d02f      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0c:	d826      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e12:	d02b      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005e14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e18:	d820      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e1e:	d012      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e24:	d81a      	bhi.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d022      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2e:	d115      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e34:	3308      	adds	r3, #8
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fc5f 	bl	80076fc <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e44:	e015      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4a:	3328      	adds	r3, #40	@ 0x28
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fd06 	bl	8007860 <RCCEx_PLL3_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e62:	e006      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e64:	bf00      	nop
 8005e66:	e004      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e002      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e000      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10e      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e8a:	4a02      	ldr	r2, [pc, #8]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e90:	e006      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005eac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	d055      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ec8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ecc:	d033      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005ece:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005ed2:	d82c      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ed8:	d02f      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ede:	d826      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ee0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005ee4:	d02b      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005ee6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005eea:	d820      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ef0:	d012      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ef6:	d81a      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d022      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f00:	d115      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f06:	3308      	adds	r3, #8
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fbf6 	bl	80076fc <RCCEx_PLL2_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f16:	e015      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	3328      	adds	r3, #40	@ 0x28
 8005f1e:	2102      	movs	r1, #2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fc9d 	bl	8007860 <RCCEx_PLL3_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f34:	e006      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f36:	bf00      	nop
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f4c:	4ba0      	ldr	r3, [pc, #640]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f5c:	4a9c      	ldr	r2, [pc, #624]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f002 0308 	and.w	r3, r2, #8
 8005f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f86:	460b      	mov	r3, r1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	d01e      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fc5c 	bl	8007860 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005fb4:	4b86      	ldr	r3, [pc, #536]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc4:	4a82      	ldr	r2, [pc, #520]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f002 0310 	and.w	r3, r2, #16
 8005fd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d01e      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff6:	d10c      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	3328      	adds	r3, #40	@ 0x28
 8005ffe:	2102      	movs	r1, #2
 8006000:	4618      	mov	r0, r3
 8006002:	f001 fc2d 	bl	8007860 <RCCEx_PLL3_Config>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006012:	4b6f      	ldr	r3, [pc, #444]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006022:	4a6b      	ldr	r2, [pc, #428]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006036:	2300      	movs	r3, #0
 8006038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800603a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800603e:	460b      	mov	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	d03e      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800604c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006050:	d022      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006056:	d81b      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d00b      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006062:	e015      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	3308      	adds	r3, #8
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fb45 	bl	80076fc <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006078:	e00f      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	3328      	adds	r3, #40	@ 0x28
 8006080:	2102      	movs	r1, #2
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fbec 	bl	8007860 <RCCEx_PLL3_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a2:	4b4b      	ldr	r3, [pc, #300]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060b2:	4a47      	ldr	r2, [pc, #284]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060b4:	430b      	orrs	r3, r1
 80060b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80060ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80060d0:	2300      	movs	r3, #0
 80060d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80060d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d03b      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ea:	d01f      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80060ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f0:	d818      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f6:	d003      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80060f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060fc:	d007      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006100:	4b33      	ldr	r3, [pc, #204]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a32      	ldr	r2, [pc, #200]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006112:	3328      	adds	r3, #40	@ 0x28
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fba2 	bl	8007860 <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006136:	4b26      	ldr	r3, [pc, #152]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006146:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006148:	430b      	orrs	r3, r1
 800614a:	6553      	str	r3, [r2, #84]	@ 0x54
 800614c:	e003      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006162:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006164:	2300      	movs	r3, #0
 8006166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006168:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800616c:	460b      	mov	r3, r1
 800616e:	4313      	orrs	r3, r2
 8006170:	d034      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006180:	d007      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006182:	e011      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006184:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006188:	4a11      	ldr	r2, [pc, #68]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800618e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006190:	e00e      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006196:	3308      	adds	r3, #8
 8006198:	2102      	movs	r1, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f001 faae 	bl	80076fc <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061a6:	e003      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10d      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c6:	4a02      	ldr	r2, [pc, #8]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061cc:	e006      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80061ce:	bf00      	nop
 80061d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80061e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ea:	2300      	movs	r3, #0
 80061ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d00c      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	3328      	adds	r3, #40	@ 0x28
 80061fe:	2102      	movs	r1, #2
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fb2d 	bl	8007860 <RCCEx_PLL3_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800621e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006220:	2300      	movs	r3, #0
 8006222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006224:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d036      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006238:	d018      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800623a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800623e:	d811      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d014      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800624a:	d80b      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d011      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006254:	d106      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006256:	4bb7      	ldr	r3, [pc, #732]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4ab6      	ldr	r2, [pc, #728]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800625c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006262:	e008      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800627e:	4bad      	ldr	r3, [pc, #692]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006282:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800628c:	4aa9      	ldr	r2, [pc, #676]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6553      	str	r3, [r2, #84]	@ 0x54
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80062a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80062aa:	2300      	movs	r3, #0
 80062ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80062ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80062b2:	460b      	mov	r3, r1
 80062b4:	4313      	orrs	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	4a9b      	ldr	r2, [pc, #620]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062da:	2300      	movs	r3, #0
 80062dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d009      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062e8:	4b92      	ldr	r3, [pc, #584]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062f6:	4a8f      	ldr	r2, [pc, #572]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006308:	643b      	str	r3, [r7, #64]	@ 0x40
 800630a:	2300      	movs	r3, #0
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006312:	460b      	mov	r3, r1
 8006314:	4313      	orrs	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006318:	4b86      	ldr	r3, [pc, #536]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	4a85      	ldr	r2, [pc, #532]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800631e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006322:	6113      	str	r3, [r2, #16]
 8006324:	4b83      	ldr	r3, [pc, #524]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006326:	6919      	ldr	r1, [r3, #16]
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006330:	4a80      	ldr	r2, [pc, #512]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006332:	430b      	orrs	r3, r1
 8006334:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006344:	2300      	movs	r3, #0
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006348:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800634c:	460b      	mov	r3, r1
 800634e:	4313      	orrs	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006352:	4b78      	ldr	r3, [pc, #480]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006356:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006360:	4a74      	ldr	r2, [pc, #464]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006362:	430b      	orrs	r3, r1
 8006364:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006372:	633b      	str	r3, [r7, #48]	@ 0x30
 8006374:	2300      	movs	r3, #0
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
 8006378:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d00a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006382:	4b6c      	ldr	r3, [pc, #432]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	4a68      	ldr	r2, [pc, #416]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006394:	430b      	orrs	r3, r1
 8006396:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	2100      	movs	r1, #0
 80063a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d011      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	3308      	adds	r3, #8
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f99d 	bl	80076fc <RCCEx_PLL2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80063c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	2100      	movs	r1, #0
 80063e2:	6239      	str	r1, [r7, #32]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d011      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f8:	3308      	adds	r3, #8
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 f97d 	bl	80076fc <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	2100      	movs	r1, #0
 8006422:	61b9      	str	r1, [r7, #24]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d011      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	3308      	adds	r3, #8
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f001 f95d 	bl	80076fc <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	2100      	movs	r1, #0
 8006462:	6139      	str	r1, [r7, #16]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800646e:	460b      	mov	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	d011      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	3328      	adds	r3, #40	@ 0x28
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f9ef 	bl	8007860 <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	2100      	movs	r1, #0
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	d011      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	3328      	adds	r3, #40	@ 0x28
 80064ba:	2101      	movs	r1, #1
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f9cf 	bl	8007860 <RCCEx_PLL3_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80064c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	2100      	movs	r1, #0
 80064e2:	6039      	str	r1, [r7, #0]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d011      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	3328      	adds	r3, #40	@ 0x28
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 f9af 	bl	8007860 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006518:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
}
 8006526:	4618      	mov	r0, r3
 8006528:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800652c:	46bd      	mov	sp, r7
 800652e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400

08006538 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b090      	sub	sp, #64	@ 0x40
 800653c:	af00      	add	r7, sp, #0
 800653e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006546:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800654a:	430b      	orrs	r3, r1
 800654c:	f040 8094 	bne.w	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006550:	4b9b      	ldr	r3, [pc, #620]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	2b04      	cmp	r3, #4
 800655e:	f200 8087 	bhi.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006562:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	0800657d 	.word	0x0800657d
 800656c:	080065a5 	.word	0x080065a5
 8006570:	080065cd 	.word	0x080065cd
 8006574:	08006669 	.word	0x08006669
 8006578:	080065f5 	.word	0x080065f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800657c:	4b90      	ldr	r3, [pc, #576]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006588:	d108      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800658a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800658e:	4618      	mov	r0, r3
 8006590:	f000 ff62 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006598:	f000 bc93 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a0:	f000 bc8f 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065a4:	4b86      	ldr	r3, [pc, #536]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b0:	d108      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b2:	f107 0318 	add.w	r3, r7, #24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fca6 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c0:	f000 bc7f 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c8:	f000 bc7b 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065cc:	4b7c      	ldr	r3, [pc, #496]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d8:	d108      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fde6 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e8:	f000 bc6b 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f0:	f000 bc67 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f4:	4b72      	ldr	r3, [pc, #456]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065fe:	4b70      	ldr	r3, [pc, #448]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b04      	cmp	r3, #4
 8006608:	d10c      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006610:	4b6b      	ldr	r3, [pc, #428]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	4a6a      	ldr	r2, [pc, #424]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
 8006620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006622:	e01f      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006624:	4b66      	ldr	r3, [pc, #408]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006630:	d106      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006638:	d102      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800663a:	4b63      	ldr	r3, [pc, #396]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800663c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800663e:	e011      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006640:	4b5f      	ldr	r3, [pc, #380]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800664c:	d106      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800664e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006654:	d102      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006656:	4b5d      	ldr	r3, [pc, #372]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665a:	e003      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006660:	f000 bc2f 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006664:	f000 bc2d 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006668:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666c:	f000 bc29 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006674:	f000 bc25 	b.w	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006680:	430b      	orrs	r3, r1
 8006682:	f040 80a7 	bne.w	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006686:	4b4e      	ldr	r3, [pc, #312]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006696:	d054      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800669e:	f200 808b 	bhi.w	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066a8:	f000 8083 	beq.w	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066b2:	f200 8081 	bhi.w	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066bc:	d02f      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066c4:	d878      	bhi.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80066cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066d2:	d012      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80066d4:	e070      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066d6:	4b3a      	ldr	r3, [pc, #232]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066e2:	d107      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 feb5 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066f2:	e3e6      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f8:	e3e3      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066fa:	4b31      	ldr	r3, [pc, #196]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006706:	d107      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006708:	f107 0318 	add.w	r3, r7, #24
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fbfb 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006716:	e3d4      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800671c:	e3d1      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800671e:	4b28      	ldr	r3, [pc, #160]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800672a:	d107      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800672c:	f107 030c 	add.w	r3, r7, #12
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fd3d 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673a:	e3c2      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006740:	e3bf      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006742:	4b1f      	ldr	r3, [pc, #124]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800674c:	4b1c      	ldr	r3, [pc, #112]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d10c      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800675e:	4b18      	ldr	r3, [pc, #96]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	08db      	lsrs	r3, r3, #3
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006770:	e01e      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006772:	4b13      	ldr	r3, [pc, #76]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800677e:	d106      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006786:	d102      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006788:	4b0f      	ldr	r3, [pc, #60]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800678c:	e010      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800679a:	d106      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a2:	d102      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a8:	e002      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80067ae:	e388      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067b0:	e387      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b6:	e384      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067bc:	e381      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067be:	bf00      	nop
 80067c0:	58024400 	.word	0x58024400
 80067c4:	03d09000 	.word	0x03d09000
 80067c8:	003d0900 	.word	0x003d0900
 80067cc:	007a1200 	.word	0x007a1200
 80067d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80067dc:	430b      	orrs	r3, r1
 80067de:	f040 809c 	bne.w	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80067e2:	4b9e      	ldr	r3, [pc, #632]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067f2:	d054      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067fa:	f200 808b 	bhi.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006804:	f000 8083 	beq.w	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800680e:	f200 8081 	bhi.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006818:	d02f      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006820:	d878      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800682e:	d012      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006830:	e070      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006832:	4b8a      	ldr	r3, [pc, #552]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800683e:	d107      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fe07 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800684e:	e338      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e335      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006856:	4b81      	ldr	r3, [pc, #516]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800685e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006862:	d107      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006864:	f107 0318 	add.w	r3, r7, #24
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb4d 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006872:	e326      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006878:	e323      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800687a:	4b78      	ldr	r3, [pc, #480]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fc8f 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006896:	e314      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689c:	e311      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800689e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068a8:	4b6c      	ldr	r3, [pc, #432]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d10c      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80068b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ba:	4b68      	ldr	r3, [pc, #416]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	4a66      	ldr	r2, [pc, #408]	@ (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068cc:	e01e      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ce:	4b63      	ldr	r3, [pc, #396]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e2:	d102      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068e4:	4b5f      	ldr	r3, [pc, #380]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80068e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068e8:	e010      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ea:	4b5c      	ldr	r3, [pc, #368]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f6:	d106      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80068f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fe:	d102      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006900:	4b59      	ldr	r3, [pc, #356]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006904:	e002      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800690a:	e2da      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800690c:	e2d9      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800690e:	4b57      	ldr	r3, [pc, #348]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006912:	e2d6      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006918:	e2d3      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006922:	430b      	orrs	r3, r1
 8006924:	f040 80a7 	bne.w	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006928:	4b4c      	ldr	r3, [pc, #304]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800692a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006930:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006938:	d055      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006940:	f200 8096 	bhi.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800694a:	f000 8084 	beq.w	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006954:	f200 808c 	bhi.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695e:	d030      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006966:	f200 8083 	bhi.w	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006976:	d012      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006978:	e07a      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697a:	4b38      	ldr	r3, [pc, #224]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fd63 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	e294      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e291      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800699e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069aa:	d107      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ac:	f107 0318 	add.w	r3, r7, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 faa9 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069ba:	e282      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c0:	e27f      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fbeb 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069de:	e270      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e4:	e26d      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069e6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80069fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a02:	4b16      	ldr	r3, [pc, #88]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	08db      	lsrs	r3, r3, #3
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	4a14      	ldr	r2, [pc, #80]	@ (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a14:	e01e      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a16:	4b11      	ldr	r3, [pc, #68]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a22:	d106      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a30:	e010      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a48:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a52:	e236      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a54:	e235      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5a:	e232      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a5c:	58024400 	.word	0x58024400
 8006a60:	03d09000 	.word	0x03d09000
 8006a64:	003d0900 	.word	0x003d0900
 8006a68:	007a1200 	.word	0x007a1200
 8006a6c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a74:	e225      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a7a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	f040 8085 	bne.w	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a84:	4b9c      	ldr	r3, [pc, #624]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a88:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a94:	d06b      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a9c:	d874      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aa4:	d056      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aac:	d86c      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ab4:	d03b      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006abc:	d864      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac4:	d021      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006acc:	d85c      	bhi.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d004      	beq.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006adc:	e054      	b.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ade:	f7fe fb5f 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8006ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ae4:	e1ed      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ae6:	4b84      	ldr	r3, [pc, #528]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006af2:	d107      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af4:	f107 0318 	add.w	r3, r7, #24
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fa05 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b02:	e1de      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b08:	e1db      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b16:	d107      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fb47 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b26:	e1cc      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b2c:	e1c9      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b2e:	4b72      	ldr	r3, [pc, #456]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d109      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	08db      	lsrs	r3, r3, #3
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	4a6d      	ldr	r2, [pc, #436]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006b46:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b4c:	e1b9      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b52:	e1b6      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b54:	4b68      	ldr	r3, [pc, #416]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b60:	d102      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006b62:	4b67      	ldr	r3, [pc, #412]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b66:	e1ac      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6c:	e1a9      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b6e:	4b62      	ldr	r3, [pc, #392]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7a:	d102      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006b7c:	4b61      	ldr	r3, [pc, #388]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b80:	e19f      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b86:	e19c      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b8c:	e199      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b92:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006b96:	430b      	orrs	r3, r1
 8006b98:	d173      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b9a:	4b57      	ldr	r3, [pc, #348]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ba2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006baa:	d02f      	beq.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb2:	d863      	bhi.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc0:	d012      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006bc2:	e05b      	b.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd2:	f107 0318 	add.w	r3, r7, #24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 f996 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be0:	e16f      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be6:	e16c      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006be8:	4b43      	ldr	r3, [pc, #268]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fad8 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c04:	e15d      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c0a:	e15a      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c16:	4b38      	ldr	r3, [pc, #224]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c28:	4b33      	ldr	r3, [pc, #204]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	4a32      	ldr	r2, [pc, #200]	@ (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c3a:	e01e      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c48:	d106      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c50:	d102      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c52:	4b2b      	ldr	r3, [pc, #172]	@ (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c56:	e010      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c58:	4b27      	ldr	r3, [pc, #156]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c64:	d106      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c6c:	d102      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c6e:	4b25      	ldr	r3, [pc, #148]	@ (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c72:	e002      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c78:	e123      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c7a:	e122      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c80:	e11f      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c86:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	d13c      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca4:	d012      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006ca6:	e023      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ca8:	4b13      	ldr	r3, [pc, #76]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fbcc 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc4:	e0fd      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cca:	e0fa      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cd8:	d107      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 f912 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce8:	e0eb      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cee:	e0e8      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf4:	e0e5      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cf6:	bf00      	nop
 8006cf8:	58024400 	.word	0x58024400
 8006cfc:	03d09000 	.word	0x03d09000
 8006d00:	003d0900 	.word	0x003d0900
 8006d04:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006d10:	430b      	orrs	r3, r1
 8006d12:	f040 8085 	bne.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d16:	4b6d      	ldr	r3, [pc, #436]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d1a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006d1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d26:	d06b      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d2e:	d874      	bhi.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d36:	d056      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d86c      	bhi.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d46:	d03b      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d4e:	d864      	bhi.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d56:	d021      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d5e:	d85c      	bhi.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d004      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d6c:	d004      	beq.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006d6e:	e054      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d70:	f000 f8b4 	bl	8006edc <HAL_RCCEx_GetD3PCLK1Freq>
 8006d74:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d76:	e0a4      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d78:	4b54      	ldr	r3, [pc, #336]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d84:	d107      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d86:	f107 0318 	add.w	r3, r7, #24
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f8bc 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d94:	e095      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d9a:	e092      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da8:	d107      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006daa:	f107 030c 	add.w	r3, r7, #12
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f9fe 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db8:	e083      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbe:	e080      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dc0:	4b42      	ldr	r3, [pc, #264]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d109      	bne.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	08db      	lsrs	r3, r3, #3
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dde:	e070      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de4:	e06d      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006de6:	4b39      	ldr	r3, [pc, #228]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df2:	d102      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006df4:	4b37      	ldr	r3, [pc, #220]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df8:	e063      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfe:	e060      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e00:	4b32      	ldr	r3, [pc, #200]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006e0e:	4b32      	ldr	r3, [pc, #200]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e12:	e056      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e18:	e053      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1e:	e050      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e24:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	d148      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e2c:	4b27      	ldr	r3, [pc, #156]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e3c:	d02a      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e44:	d838      	bhi.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e52:	d00d      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006e54:	e030      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e62:	d102      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006e64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e68:	e02b      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e6e:	e028      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e70:	4b16      	ldr	r3, [pc, #88]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fae8 	bl	8007458 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	e019      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e92:	e016      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea0:	d107      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea2:	f107 0318 	add.w	r3, r7, #24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f82e 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb0:	e007      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb6:	e004      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebc:	e001      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3740      	adds	r7, #64	@ 0x40
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	58024400 	.word	0x58024400
 8006ed0:	03d09000 	.word	0x03d09000
 8006ed4:	003d0900 	.word	0x003d0900
 8006ed8:	007a1200 	.word	0x007a1200

08006edc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ee0:	f7fe f92e 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	4904      	ldr	r1, [pc, #16]	@ (8006f04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ef2:	5ccb      	ldrb	r3, [r1, r3]
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	58024400 	.word	0x58024400
 8006f04:	0800ac78 	.word	0x0800ac78

08006f08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	@ 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f10:	4ba1      	ldr	r3, [pc, #644]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	0b1b      	lsrs	r3, r3, #12
 8006f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f26:	4b9c      	ldr	r3, [pc, #624]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	091b      	lsrs	r3, r3, #4
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f32:	4b99      	ldr	r3, [pc, #612]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f36:	08db      	lsrs	r3, r3, #3
 8006f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8111 	beq.w	8007178 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	f000 8083 	beq.w	8007064 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	f200 80a1 	bhi.w	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d056      	beq.n	8007020 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f72:	e099      	b.n	80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f74:	4b88      	ldr	r3, [pc, #544]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02d      	beq.n	8006fdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f80:	4b85      	ldr	r3, [pc, #532]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	08db      	lsrs	r3, r3, #3
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	4a84      	ldr	r2, [pc, #528]	@ (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b7b      	ldr	r3, [pc, #492]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fda:	e087      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800701e:	e065      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b59      	ldr	r3, [pc, #356]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a03 	vldr	s12, [r7, #12]
 8007046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007062:	e043      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b48      	ldr	r3, [pc, #288]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a03 	vldr	s12, [r7, #12]
 800708a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a6:	e021      	b.n	80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b37      	ldr	r3, [pc, #220]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007106:	edd7 6a07 	vldr	s13, [r7, #28]
 800710a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007112:	ee17 2a90 	vmov	r2, s15
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800711a:	4b1f      	ldr	r3, [pc, #124]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711e:	0c1b      	lsrs	r3, r3, #16
 8007120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007134:	edd7 6a07 	vldr	s13, [r7, #28]
 8007138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007140:	ee17 2a90 	vmov	r2, s15
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007148:	4b13      	ldr	r3, [pc, #76]	@ (8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	0e1b      	lsrs	r3, r3, #24
 800714e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800715e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007162:	edd7 6a07 	vldr	s13, [r7, #28]
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716e:	ee17 2a90 	vmov	r2, s15
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007176:	e008      	b.n	800718a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
}
 800718a:	bf00      	nop
 800718c:	3724      	adds	r7, #36	@ 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	58024400 	.word	0x58024400
 800719c:	03d09000 	.word	0x03d09000
 80071a0:	46000000 	.word	0x46000000
 80071a4:	4c742400 	.word	0x4c742400
 80071a8:	4a742400 	.word	0x4a742400
 80071ac:	4af42400 	.word	0x4af42400

080071b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b089      	sub	sp, #36	@ 0x24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071b8:	4ba1      	ldr	r3, [pc, #644]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071c2:	4b9f      	ldr	r3, [pc, #636]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	0d1b      	lsrs	r3, r3, #20
 80071c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071da:	4b99      	ldr	r3, [pc, #612]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8111 	beq.w	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f000 8083 	beq.w	800730c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f200 80a1 	bhi.w	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d056      	beq.n	80072c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800721a:	e099      	b.n	8007350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721c:	4b88      	ldr	r3, [pc, #544]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02d      	beq.n	8007284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007228:	4b85      	ldr	r3, [pc, #532]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	08db      	lsrs	r3, r3, #3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	4a84      	ldr	r2, [pc, #528]	@ (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b7b      	ldr	r3, [pc, #492]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007282:	e087      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007296:	4b6a      	ldr	r3, [pc, #424]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c6:	e065      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072da:	4b59      	ldr	r3, [pc, #356]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730a:	e043      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800731a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731e:	4b48      	ldr	r3, [pc, #288]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	ee07 3a90 	vmov	s15, r3
 800732a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734e:	e021      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800735e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007362:	4b37      	ldr	r3, [pc, #220]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007392:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007394:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	0a5b      	lsrs	r3, r3, #9
 800739a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ba:	ee17 2a90 	vmov	r2, s15
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c6:	0c1b      	lsrs	r3, r3, #16
 80073c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e8:	ee17 2a90 	vmov	r2, s15
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073f0:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	0e1b      	lsrs	r3, r3, #24
 80073f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740a:	edd7 6a07 	vldr	s13, [r7, #28]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
}
 8007432:	bf00      	nop
 8007434:	3724      	adds	r7, #36	@ 0x24
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	58024400 	.word	0x58024400
 8007444:	03d09000 	.word	0x03d09000
 8007448:	46000000 	.word	0x46000000
 800744c:	4c742400 	.word	0x4c742400
 8007450:	4a742400 	.word	0x4a742400
 8007454:	4af42400 	.word	0x4af42400

08007458 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	@ 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007460:	4ba0      	ldr	r3, [pc, #640]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	f003 0303 	and.w	r3, r3, #3
 8007468:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800746a:	4b9e      	ldr	r3, [pc, #632]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800746c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007474:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007476:	4b9b      	ldr	r3, [pc, #620]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007480:	4b98      	ldr	r3, [pc, #608]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
 8007490:	ee07 3a90 	vmov	s15, r3
 8007494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007498:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8111 	beq.w	80076c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	f000 8083 	beq.w	80075b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	f200 80a1 	bhi.w	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d056      	beq.n	800756e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074c0:	e099      	b.n	80075f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c2:	4b88      	ldr	r3, [pc, #544]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d02d      	beq.n	800752a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074ce:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	08db      	lsrs	r3, r3, #3
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	4a83      	ldr	r2, [pc, #524]	@ (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	ee07 3a90 	vmov	s15, r3
 80074e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f8:	4b7a      	ldr	r3, [pc, #488]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007508:	ed97 6a03 	vldr	s12, [r7, #12]
 800750c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007518:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800751c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007524:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007528:	e087      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007534:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753c:	4b69      	ldr	r3, [pc, #420]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007550:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007568:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756c:	e065      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007578:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800757c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007580:	4b58      	ldr	r3, [pc, #352]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007590:	ed97 6a03 	vldr	s12, [r7, #12]
 8007594:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b0:	e043      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075bc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c4:	4b47      	ldr	r3, [pc, #284]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f4:	e021      	b.n	800763a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007600:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007608:	4b36      	ldr	r3, [pc, #216]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007618:	ed97 6a03 	vldr	s12, [r7, #12]
 800761c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007638:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800763a:	4b2a      	ldr	r3, [pc, #168]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	0a5b      	lsrs	r3, r3, #9
 8007640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007654:	edd7 6a07 	vldr	s13, [r7, #28]
 8007658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007660:	ee17 2a90 	vmov	r2, s15
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007668:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800767e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007682:	edd7 6a07 	vldr	s13, [r7, #28]
 8007686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	ee17 2a90 	vmov	r2, s15
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007696:	4b13      	ldr	r3, [pc, #76]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769a:	0e1b      	lsrs	r3, r3, #24
 800769c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076bc:	ee17 2a90 	vmov	r2, s15
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076c4:	e008      	b.n	80076d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
}
 80076d8:	bf00      	nop
 80076da:	3724      	adds	r7, #36	@ 0x24
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	58024400 	.word	0x58024400
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	46000000 	.word	0x46000000
 80076f0:	4c742400 	.word	0x4c742400
 80076f4:	4a742400 	.word	0x4a742400
 80076f8:	4af42400 	.word	0x4af42400

080076fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770a:	4b53      	ldr	r3, [pc, #332]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800770c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d101      	bne.n	800771a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e099      	b.n	800784e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800771a:	4b4f      	ldr	r3, [pc, #316]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a4e      	ldr	r2, [pc, #312]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007720:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007726:	f7fa fb11 	bl	8001d4c <HAL_GetTick>
 800772a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800772c:	e008      	b.n	8007740 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800772e:	f7fa fb0d 	bl	8001d4c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e086      	b.n	800784e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007740:	4b45      	ldr	r3, [pc, #276]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f0      	bne.n	800772e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800774c:	4b42      	ldr	r3, [pc, #264]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	031b      	lsls	r3, r3, #12
 800775a:	493f      	ldr	r1, [pc, #252]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800775c:	4313      	orrs	r3, r2
 800775e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	3b01      	subs	r3, #1
 8007770:	025b      	lsls	r3, r3, #9
 8007772:	b29b      	uxth	r3, r3
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	3b01      	subs	r3, #1
 800777c:	041b      	lsls	r3, r3, #16
 800777e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	3b01      	subs	r3, #1
 800778a:	061b      	lsls	r3, r3, #24
 800778c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007790:	4931      	ldr	r1, [pc, #196]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007796:	4b30      	ldr	r3, [pc, #192]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	492d      	ldr	r1, [pc, #180]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077a8:	4b2b      	ldr	r3, [pc, #172]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	f023 0220 	bic.w	r2, r3, #32
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	4928      	ldr	r1, [pc, #160]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077ba:	4b27      	ldr	r3, [pc, #156]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	4a26      	ldr	r2, [pc, #152]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077c0:	f023 0310 	bic.w	r3, r3, #16
 80077c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077c6:	4b24      	ldr	r3, [pc, #144]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ca:	4b24      	ldr	r3, [pc, #144]	@ (800785c <RCCEx_PLL2_Config+0x160>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	69d2      	ldr	r2, [r2, #28]
 80077d2:	00d2      	lsls	r2, r2, #3
 80077d4:	4920      	ldr	r1, [pc, #128]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077da:	4b1f      	ldr	r3, [pc, #124]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	4a1e      	ldr	r2, [pc, #120]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077e0:	f043 0310 	orr.w	r3, r3, #16
 80077e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f0:	4a19      	ldr	r2, [pc, #100]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077f8:	e00f      	b.n	800781a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d106      	bne.n	800780e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007800:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	4a14      	ldr	r2, [pc, #80]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800780a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800780c:	e005      	b.n	800781a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800780e:	4b12      	ldr	r3, [pc, #72]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	4a11      	ldr	r2, [pc, #68]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007818:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800781a:	4b0f      	ldr	r3, [pc, #60]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a0e      	ldr	r2, [pc, #56]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007820:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007826:	f7fa fa91 	bl	8001d4c <HAL_GetTick>
 800782a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800782c:	e008      	b.n	8007840 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800782e:	f7fa fa8d 	bl	8001d4c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e006      	b.n	800784e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007840:	4b05      	ldr	r3, [pc, #20]	@ (8007858 <RCCEx_PLL2_Config+0x15c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400
 800785c:	ffff0007 	.word	0xffff0007

08007860 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800786e:	4b53      	ldr	r3, [pc, #332]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d101      	bne.n	800787e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e099      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800787e:	4b4f      	ldr	r3, [pc, #316]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a4e      	ldr	r2, [pc, #312]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007884:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788a:	f7fa fa5f 	bl	8001d4c <HAL_GetTick>
 800788e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007890:	e008      	b.n	80078a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007892:	f7fa fa5b 	bl	8001d4c <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e086      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a4:	4b45      	ldr	r3, [pc, #276]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f0      	bne.n	8007892 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078b0:	4b42      	ldr	r3, [pc, #264]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	051b      	lsls	r3, r3, #20
 80078be:	493f      	ldr	r1, [pc, #252]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	025b      	lsls	r3, r3, #9
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	3b01      	subs	r3, #1
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	061b      	lsls	r3, r3, #24
 80078f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80078f4:	4931      	ldr	r1, [pc, #196]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078fa:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	492d      	ldr	r1, [pc, #180]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007908:	4313      	orrs	r3, r2
 800790a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800790c:	4b2b      	ldr	r3, [pc, #172]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	4928      	ldr	r1, [pc, #160]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800791e:	4b27      	ldr	r3, [pc, #156]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	4a26      	ldr	r2, [pc, #152]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800792a:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800792c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792e:	4b24      	ldr	r3, [pc, #144]	@ (80079c0 <RCCEx_PLL3_Config+0x160>)
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	69d2      	ldr	r2, [r2, #28]
 8007936:	00d2      	lsls	r2, r2, #3
 8007938:	4920      	ldr	r1, [pc, #128]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800793a:	4313      	orrs	r3, r2
 800793c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800793e:	4b1f      	ldr	r3, [pc, #124]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007942:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007948:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007950:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	4a19      	ldr	r2, [pc, #100]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007956:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800795a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800795c:	e00f      	b.n	800797e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d106      	bne.n	8007972 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007964:	4b15      	ldr	r3, [pc, #84]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	4a14      	ldr	r2, [pc, #80]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 800796a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800796e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007970:	e005      	b.n	800797e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007972:	4b12      	ldr	r3, [pc, #72]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	4a11      	ldr	r2, [pc, #68]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800797c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800797e:	4b0f      	ldr	r3, [pc, #60]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a0e      	ldr	r2, [pc, #56]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 8007984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798a:	f7fa f9df 	bl	8001d4c <HAL_GetTick>
 800798e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007990:	e008      	b.n	80079a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007992:	f7fa f9db 	bl	8001d4c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e006      	b.n	80079b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a4:	4b05      	ldr	r3, [pc, #20]	@ (80079bc <RCCEx_PLL3_Config+0x15c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	58024400 	.word	0x58024400
 80079c0:	ffff0007 	.word	0xffff0007

080079c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e049      	b.n	8007a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7f9 fed2 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f000 fbea 	bl	80081dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e05e      	b.n	8007b4a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b58 <HAL_TIM_Base_Start_IT+0xe4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d02c      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab6:	d027      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a27      	ldr	r2, [pc, #156]	@ (8007b5c <HAL_TIM_Base_Start_IT+0xe8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a26      	ldr	r2, [pc, #152]	@ (8007b60 <HAL_TIM_Base_Start_IT+0xec>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a24      	ldr	r2, [pc, #144]	@ (8007b64 <HAL_TIM_Base_Start_IT+0xf0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a23      	ldr	r2, [pc, #140]	@ (8007b68 <HAL_TIM_Base_Start_IT+0xf4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a21      	ldr	r2, [pc, #132]	@ (8007b6c <HAL_TIM_Base_Start_IT+0xf8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a20      	ldr	r2, [pc, #128]	@ (8007b70 <HAL_TIM_Base_Start_IT+0xfc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b74 <HAL_TIM_Base_Start_IT+0x100>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x94>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a1d      	ldr	r2, [pc, #116]	@ (8007b78 <HAL_TIM_Base_Start_IT+0x104>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d115      	bne.n	8007b34 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b7c <HAL_TIM_Base_Start_IT+0x108>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d015      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0xd2>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b20:	d011      	beq.n	8007b46 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0201 	orr.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b32:	e008      	b.n	8007b46 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	e000      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40010400 	.word	0x40010400
 8007b6c:	40001800 	.word	0x40001800
 8007b70:	40014000 	.word	0x40014000
 8007b74:	4000e000 	.word	0x4000e000
 8007b78:	4000e400 	.word	0x4000e400
 8007b7c:	00010007 	.word	0x00010007

08007b80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e049      	b.n	8007c26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f841 	bl	8007c2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fb0c 	bl	80081dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d020      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f06f 0202 	mvn.w	r2, #2
 8007c76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa87 	bl	80081a0 <HAL_TIM_IC_CaptureCallback>
 8007c92:	e005      	b.n	8007ca0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fa79 	bl	800818c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa8a 	bl	80081b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d020      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01b      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f06f 0204 	mvn.w	r2, #4
 8007cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa61 	bl	80081a0 <HAL_TIM_IC_CaptureCallback>
 8007cde:	e005      	b.n	8007cec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa53 	bl	800818c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa64 	bl	80081b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d020      	beq.n	8007d3e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01b      	beq.n	8007d3e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f06f 0208 	mvn.w	r2, #8
 8007d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2204      	movs	r2, #4
 8007d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fa3b 	bl	80081a0 <HAL_TIM_IC_CaptureCallback>
 8007d2a:	e005      	b.n	8007d38 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa2d 	bl	800818c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa3e 	bl	80081b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d020      	beq.n	8007d8a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d01b      	beq.n	8007d8a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f06f 0210 	mvn.w	r2, #16
 8007d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa15 	bl	80081a0 <HAL_TIM_IC_CaptureCallback>
 8007d76:	e005      	b.n	8007d84 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa07 	bl	800818c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa18 	bl	80081b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f06f 0201 	mvn.w	r2, #1
 8007da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f9e5 	bl	8008178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00c      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fd2c 	bl	8008834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fd24 	bl	8008848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9d2 	bl	80081c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00c      	beq.n	8007e48 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0220 	mvn.w	r2, #32
 8007e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fcec 	bl	8008820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e088      	b.n	8007f80 <HAL_TIM_IC_ConfigChannel+0x130>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007e8c:	f000 fa58 	bl	8008340 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 020c 	bic.w	r2, r2, #12
 8007e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6999      	ldr	r1, [r3, #24]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	619a      	str	r2, [r3, #24]
 8007eb2:	e060      	b.n	8007f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d11c      	bne.n	8007ef4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007eca:	f000 fae8 	bl	800849e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007edc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6999      	ldr	r1, [r3, #24]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	021a      	lsls	r2, r3, #8
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	619a      	str	r2, [r3, #24]
 8007ef2:	e040      	b.n	8007f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d11b      	bne.n	8007f32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007f0a:	f000 fb35 	bl	8008578 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 020c 	bic.w	r2, r2, #12
 8007f1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69d9      	ldr	r1, [r3, #28]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	61da      	str	r2, [r3, #28]
 8007f30:	e021      	b.n	8007f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b0c      	cmp	r3, #12
 8007f36:	d11c      	bne.n	8007f72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007f48:	f000 fb52 	bl	80085f0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007f5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69d9      	ldr	r1, [r3, #28]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	021a      	lsls	r2, r3, #8
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	61da      	str	r2, [r3, #28]
 8007f70:	e001      	b.n	8007f76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0dc      	b.n	800815e <HAL_TIM_ConfigClockSource+0x1d6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8008168 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a64      	ldr	r2, [pc, #400]	@ (800816c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	f000 80a9 	beq.w	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8007fe0:	4a62      	ldr	r2, [pc, #392]	@ (800816c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f200 80ae 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe8:	4a61      	ldr	r2, [pc, #388]	@ (8008170 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f000 80a1 	beq.w	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8008170 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	f200 80a6 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8008174 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f000 8099 	beq.w	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008000:	4a5c      	ldr	r2, [pc, #368]	@ (8008174 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008002:	4293      	cmp	r3, r2
 8008004:	f200 809e 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800800c:	f000 8091 	beq.w	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008010:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008014:	f200 8096 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800801c:	f000 8089 	beq.w	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008024:	f200 808e 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802c:	d03e      	beq.n	80080ac <HAL_TIM_ConfigClockSource+0x124>
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008032:	f200 8087 	bhi.w	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803a:	f000 8086 	beq.w	800814a <HAL_TIM_ConfigClockSource+0x1c2>
 800803e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008042:	d87f      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008044:	2b70      	cmp	r3, #112	@ 0x70
 8008046:	d01a      	beq.n	800807e <HAL_TIM_ConfigClockSource+0xf6>
 8008048:	2b70      	cmp	r3, #112	@ 0x70
 800804a:	d87b      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 800804c:	2b60      	cmp	r3, #96	@ 0x60
 800804e:	d050      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0x16a>
 8008050:	2b60      	cmp	r3, #96	@ 0x60
 8008052:	d877      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008054:	2b50      	cmp	r3, #80	@ 0x50
 8008056:	d03c      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x14a>
 8008058:	2b50      	cmp	r3, #80	@ 0x50
 800805a:	d873      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 800805c:	2b40      	cmp	r3, #64	@ 0x40
 800805e:	d058      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0x18a>
 8008060:	2b40      	cmp	r3, #64	@ 0x40
 8008062:	d86f      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008064:	2b30      	cmp	r3, #48	@ 0x30
 8008066:	d064      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008068:	2b30      	cmp	r3, #48	@ 0x30
 800806a:	d86b      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 800806c:	2b20      	cmp	r3, #32
 800806e:	d060      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008070:	2b20      	cmp	r3, #32
 8008072:	d867      	bhi.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d05c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 8008078:	2b10      	cmp	r3, #16
 800807a:	d05a      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x1aa>
 800807c:	e062      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800808e:	f000 fb0b 	bl	80086a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	609a      	str	r2, [r3, #8]
      break;
 80080aa:	e04f      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080bc:	f000 faf4 	bl	80086a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080ce:	609a      	str	r2, [r3, #8]
      break;
 80080d0:	e03c      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080de:	461a      	mov	r2, r3
 80080e0:	f000 f9ae 	bl	8008440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2150      	movs	r1, #80	@ 0x50
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fabe 	bl	800866c <TIM_ITRx_SetConfig>
      break;
 80080f0:	e02c      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080fe:	461a      	mov	r2, r3
 8008100:	f000 fa0a 	bl	8008518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2160      	movs	r1, #96	@ 0x60
 800810a:	4618      	mov	r0, r3
 800810c:	f000 faae 	bl	800866c <TIM_ITRx_SetConfig>
      break;
 8008110:	e01c      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800811e:	461a      	mov	r2, r3
 8008120:	f000 f98e 	bl	8008440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2140      	movs	r1, #64	@ 0x40
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fa9e 	bl	800866c <TIM_ITRx_SetConfig>
      break;
 8008130:	e00c      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f000 fa95 	bl	800866c <TIM_ITRx_SetConfig>
      break;
 8008142:	e003      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	73fb      	strb	r3, [r7, #15]
      break;
 8008148:	e000      	b.n	800814c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800814a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	ffceff88 	.word	0xffceff88
 800816c:	00100040 	.word	0x00100040
 8008170:	00100030 	.word	0x00100030
 8008174:	00100020 	.word	0x00100020

08008178 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008318 <TIM_Base_SetConfig+0x13c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d013      	beq.n	800821c <TIM_Base_SetConfig+0x40>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fa:	d00f      	beq.n	800821c <TIM_Base_SetConfig+0x40>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a47      	ldr	r2, [pc, #284]	@ (800831c <TIM_Base_SetConfig+0x140>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d00b      	beq.n	800821c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a46      	ldr	r2, [pc, #280]	@ (8008320 <TIM_Base_SetConfig+0x144>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d007      	beq.n	800821c <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a45      	ldr	r2, [pc, #276]	@ (8008324 <TIM_Base_SetConfig+0x148>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a44      	ldr	r2, [pc, #272]	@ (8008328 <TIM_Base_SetConfig+0x14c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d108      	bne.n	800822e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a39      	ldr	r2, [pc, #228]	@ (8008318 <TIM_Base_SetConfig+0x13c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d027      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823c:	d023      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a36      	ldr	r2, [pc, #216]	@ (800831c <TIM_Base_SetConfig+0x140>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01f      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a35      	ldr	r2, [pc, #212]	@ (8008320 <TIM_Base_SetConfig+0x144>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01b      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a34      	ldr	r2, [pc, #208]	@ (8008324 <TIM_Base_SetConfig+0x148>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d017      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a33      	ldr	r2, [pc, #204]	@ (8008328 <TIM_Base_SetConfig+0x14c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d013      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a32      	ldr	r2, [pc, #200]	@ (800832c <TIM_Base_SetConfig+0x150>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00f      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a31      	ldr	r2, [pc, #196]	@ (8008330 <TIM_Base_SetConfig+0x154>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00b      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a30      	ldr	r2, [pc, #192]	@ (8008334 <TIM_Base_SetConfig+0x158>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d007      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a2f      	ldr	r2, [pc, #188]	@ (8008338 <TIM_Base_SetConfig+0x15c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_Base_SetConfig+0xaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2e      	ldr	r2, [pc, #184]	@ (800833c <TIM_Base_SetConfig+0x160>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d108      	bne.n	8008298 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800828c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a16      	ldr	r2, [pc, #88]	@ (8008318 <TIM_Base_SetConfig+0x13c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00f      	beq.n	80082e4 <TIM_Base_SetConfig+0x108>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a18      	ldr	r2, [pc, #96]	@ (8008328 <TIM_Base_SetConfig+0x14c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00b      	beq.n	80082e4 <TIM_Base_SetConfig+0x108>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a17      	ldr	r2, [pc, #92]	@ (800832c <TIM_Base_SetConfig+0x150>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d007      	beq.n	80082e4 <TIM_Base_SetConfig+0x108>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a16      	ldr	r2, [pc, #88]	@ (8008330 <TIM_Base_SetConfig+0x154>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_Base_SetConfig+0x108>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a15      	ldr	r2, [pc, #84]	@ (8008334 <TIM_Base_SetConfig+0x158>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d103      	bne.n	80082ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	f023 0201 	bic.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]
  }
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40010400 	.word	0x40010400
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400
 8008334:	40014800 	.word	0x40014800
 8008338:	4000e000 	.word	0x4000e000
 800833c:	4000e400 	.word	0x4000e400

08008340 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	f023 0201 	bic.w	r2, r3, #1
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a2c      	ldr	r2, [pc, #176]	@ (800841c <TIM_TI1_SetConfig+0xdc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d023      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008374:	d01f      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4a29      	ldr	r2, [pc, #164]	@ (8008420 <TIM_TI1_SetConfig+0xe0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01b      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4a28      	ldr	r2, [pc, #160]	@ (8008424 <TIM_TI1_SetConfig+0xe4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d017      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4a27      	ldr	r2, [pc, #156]	@ (8008428 <TIM_TI1_SetConfig+0xe8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4a26      	ldr	r2, [pc, #152]	@ (800842c <TIM_TI1_SetConfig+0xec>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00f      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4a25      	ldr	r2, [pc, #148]	@ (8008430 <TIM_TI1_SetConfig+0xf0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4a24      	ldr	r2, [pc, #144]	@ (8008434 <TIM_TI1_SetConfig+0xf4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4a23      	ldr	r2, [pc, #140]	@ (8008438 <TIM_TI1_SetConfig+0xf8>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_TI1_SetConfig+0x76>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4a22      	ldr	r2, [pc, #136]	@ (800843c <TIM_TI1_SetConfig+0xfc>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d101      	bne.n	80083ba <TIM_TI1_SetConfig+0x7a>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <TIM_TI1_SetConfig+0x7c>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d008      	beq.n	80083d2 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	e003      	b.n	80083da <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f023 030a 	bic.w	r3, r3, #10
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f003 030a 	and.w	r3, r3, #10
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	40010000 	.word	0x40010000
 8008420:	40000400 	.word	0x40000400
 8008424:	40000800 	.word	0x40000800
 8008428:	40000c00 	.word	0x40000c00
 800842c:	40010400 	.word	0x40010400
 8008430:	40001800 	.word	0x40001800
 8008434:	40014000 	.word	0x40014000
 8008438:	4000e000 	.word	0x4000e000
 800843c:	4000e400 	.word	0x4000e400

08008440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f023 0201 	bic.w	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800846a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f023 030a 	bic.w	r3, r3, #10
 800847c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800849e:	b480      	push	{r7}
 80084a0:	b087      	sub	sp, #28
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f023 0210 	bic.w	r2, r3, #16
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	621a      	str	r2, [r3, #32]
}
 800850c:	bf00      	nop
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	f023 0210 	bic.w	r2, r3, #16
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	031b      	lsls	r3, r3, #12
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008554:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	621a      	str	r2, [r3, #32]
}
 800856c:	bf00      	nop
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	621a      	str	r2, [r3, #32]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800862e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	031b      	lsls	r3, r3, #12
 8008634:	b29b      	uxth	r3, r3
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008642:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	031b      	lsls	r3, r3, #12
 8008648:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <TIM_ITRx_SetConfig+0x38>)
 8008680:	4013      	ands	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	f043 0307 	orr.w	r3, r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	609a      	str	r2, [r3, #8]
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	ffcfff8f 	.word	0xffcfff8f

080086a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e077      	b.n	80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a35      	ldr	r2, [pc, #212]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a34      	ldr	r2, [pc, #208]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d108      	bne.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800873a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	4313      	orrs	r3, r2
 8008744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800874c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a25      	ldr	r2, [pc, #148]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d02c      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008772:	d027      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a22      	ldr	r2, [pc, #136]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d022      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a21      	ldr	r2, [pc, #132]	@ (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d01d      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1f      	ldr	r2, [pc, #124]	@ (800880c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d018      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1a      	ldr	r2, [pc, #104]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00e      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d009      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a18      	ldr	r2, [pc, #96]	@ (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a17      	ldr	r2, [pc, #92]	@ (800881c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d10c      	bne.n	80087de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400
 8008804:	40000400 	.word	0x40000400
 8008808:	40000800 	.word	0x40000800
 800880c:	40000c00 	.word	0x40000c00
 8008810:	40001800 	.word	0x40001800
 8008814:	40014000 	.word	0x40014000
 8008818:	4000e000 	.word	0x4000e000
 800881c:	4000e400 	.word	0x4000e400

08008820 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e042      	b.n	80088f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7f8 ffed 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2224      	movs	r2, #36	@ 0x24
 800888a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 ff22 	bl	80096f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8b3 	bl	8008a18 <UART_SetConfig>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e01b      	b.n	80088f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0201 	orr.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 ffa1 	bl	8009834 <UART_CheckIdleState>
 80088f2:	4603      	mov	r3, r0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	@ 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008912:	2b20      	cmp	r3, #32
 8008914:	d17b      	bne.n	8008a0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_UART_Transmit+0x26>
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e074      	b.n	8008a10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2221      	movs	r2, #33	@ 0x21
 8008932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008936:	f7f9 fa09 	bl	8001d4c <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	88fa      	ldrh	r2, [r7, #6]
 8008940:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008954:	d108      	bne.n	8008968 <HAL_UART_Transmit+0x6c>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	e003      	b.n	8008970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008970:	e030      	b.n	80089d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2200      	movs	r2, #0
 800897a:	2180      	movs	r1, #128	@ 0x80
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f001 f803 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e03d      	b.n	8008a10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10b      	bne.n	80089b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	3302      	adds	r3, #2
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	e007      	b.n	80089c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	781a      	ldrb	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3301      	adds	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1c8      	bne.n	8008972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2140      	movs	r1, #64	@ 0x40
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 ffcc 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e006      	b.n	8008a10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a0e:	2302      	movs	r3, #2
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3720      	adds	r7, #32
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a1c:	b092      	sub	sp, #72	@ 0x48
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	4bbe      	ldr	r3, [pc, #760]	@ (8008d40 <UART_SetConfig+0x328>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4ab3      	ldr	r2, [pc, #716]	@ (8008d44 <UART_SetConfig+0x32c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a80:	4313      	orrs	r3, r2
 8008a82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	4baf      	ldr	r3, [pc, #700]	@ (8008d48 <UART_SetConfig+0x330>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	f023 010f 	bic.w	r1, r3, #15
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4aa6      	ldr	r2, [pc, #664]	@ (8008d4c <UART_SetConfig+0x334>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d177      	bne.n	8008ba8 <UART_SetConfig+0x190>
 8008ab8:	4ba5      	ldr	r3, [pc, #660]	@ (8008d50 <UART_SetConfig+0x338>)
 8008aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ac0:	2b28      	cmp	r3, #40	@ 0x28
 8008ac2:	d86d      	bhi.n	8008ba0 <UART_SetConfig+0x188>
 8008ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <UART_SetConfig+0xb4>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008b71 	.word	0x08008b71
 8008ad0:	08008ba1 	.word	0x08008ba1
 8008ad4:	08008ba1 	.word	0x08008ba1
 8008ad8:	08008ba1 	.word	0x08008ba1
 8008adc:	08008ba1 	.word	0x08008ba1
 8008ae0:	08008ba1 	.word	0x08008ba1
 8008ae4:	08008ba1 	.word	0x08008ba1
 8008ae8:	08008ba1 	.word	0x08008ba1
 8008aec:	08008b79 	.word	0x08008b79
 8008af0:	08008ba1 	.word	0x08008ba1
 8008af4:	08008ba1 	.word	0x08008ba1
 8008af8:	08008ba1 	.word	0x08008ba1
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008ba1 	.word	0x08008ba1
 8008b04:	08008ba1 	.word	0x08008ba1
 8008b08:	08008ba1 	.word	0x08008ba1
 8008b0c:	08008b81 	.word	0x08008b81
 8008b10:	08008ba1 	.word	0x08008ba1
 8008b14:	08008ba1 	.word	0x08008ba1
 8008b18:	08008ba1 	.word	0x08008ba1
 8008b1c:	08008ba1 	.word	0x08008ba1
 8008b20:	08008ba1 	.word	0x08008ba1
 8008b24:	08008ba1 	.word	0x08008ba1
 8008b28:	08008ba1 	.word	0x08008ba1
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008ba1 	.word	0x08008ba1
 8008b34:	08008ba1 	.word	0x08008ba1
 8008b38:	08008ba1 	.word	0x08008ba1
 8008b3c:	08008ba1 	.word	0x08008ba1
 8008b40:	08008ba1 	.word	0x08008ba1
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008ba1 	.word	0x08008ba1
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	08008ba1 	.word	0x08008ba1
 8008b54:	08008ba1 	.word	0x08008ba1
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008ba1 	.word	0x08008ba1
 8008b64:	08008ba1 	.word	0x08008ba1
 8008b68:	08008ba1 	.word	0x08008ba1
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e326      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e322      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e31e      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e31a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008b90:	2320      	movs	r3, #32
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e316      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008b98:	2340      	movs	r3, #64	@ 0x40
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e312      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ba0:	2380      	movs	r3, #128	@ 0x80
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e30e      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a69      	ldr	r2, [pc, #420]	@ (8008d54 <UART_SetConfig+0x33c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d130      	bne.n	8008c14 <UART_SetConfig+0x1fc>
 8008bb2:	4b67      	ldr	r3, [pc, #412]	@ (8008d50 <UART_SetConfig+0x338>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d826      	bhi.n	8008c0c <UART_SetConfig+0x1f4>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <UART_SetConfig+0x1ac>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008be5 	.word	0x08008be5
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e2f0      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008be4:	2304      	movs	r3, #4
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bea:	e2ec      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008bec:	2308      	movs	r3, #8
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e2e8      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e2e4      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e2e0      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c04:	2340      	movs	r3, #64	@ 0x40
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e2dc      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e2d8      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a4f      	ldr	r2, [pc, #316]	@ (8008d58 <UART_SetConfig+0x340>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d130      	bne.n	8008c80 <UART_SetConfig+0x268>
 8008c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8008d50 <UART_SetConfig+0x338>)
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d826      	bhi.n	8008c78 <UART_SetConfig+0x260>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <UART_SetConfig+0x218>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e2ba      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e2b6      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e2b2      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e2ae      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e2aa      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c70:	2340      	movs	r3, #64	@ 0x40
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e2a6      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e2a2      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a35      	ldr	r2, [pc, #212]	@ (8008d5c <UART_SetConfig+0x344>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d130      	bne.n	8008cec <UART_SetConfig+0x2d4>
 8008c8a:	4b31      	ldr	r3, [pc, #196]	@ (8008d50 <UART_SetConfig+0x338>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d826      	bhi.n	8008ce4 <UART_SetConfig+0x2cc>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <UART_SetConfig+0x284>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb5 	.word	0x08008cb5
 8008ca0:	08008cbd 	.word	0x08008cbd
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008ccd 	.word	0x08008ccd
 8008cac:	08008cd5 	.word	0x08008cd5
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e284      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e280      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e27c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e278      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e274      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008cdc:	2340      	movs	r3, #64	@ 0x40
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e270      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ce4:	2380      	movs	r3, #128	@ 0x80
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e26c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d60 <UART_SetConfig+0x348>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d142      	bne.n	8008d7c <UART_SetConfig+0x364>
 8008cf6:	4b16      	ldr	r3, [pc, #88]	@ (8008d50 <UART_SetConfig+0x338>)
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d838      	bhi.n	8008d74 <UART_SetConfig+0x35c>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x2f0>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d65 	.word	0x08008d65
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e24e      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e24a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d30:	2308      	movs	r3, #8
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e246      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e242      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d40:	cfff69f3 	.word	0xcfff69f3
 8008d44:	58000c00 	.word	0x58000c00
 8008d48:	11fff4ff 	.word	0x11fff4ff
 8008d4c:	40011000 	.word	0x40011000
 8008d50:	58024400 	.word	0x58024400
 8008d54:	40004400 	.word	0x40004400
 8008d58:	40004800 	.word	0x40004800
 8008d5c:	40004c00 	.word	0x40004c00
 8008d60:	40005000 	.word	0x40005000
 8008d64:	2320      	movs	r3, #32
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e22c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d6c:	2340      	movs	r3, #64	@ 0x40
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e228      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d74:	2380      	movs	r3, #128	@ 0x80
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e224      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4ab1      	ldr	r2, [pc, #708]	@ (8009048 <UART_SetConfig+0x630>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d176      	bne.n	8008e74 <UART_SetConfig+0x45c>
 8008d86:	4bb1      	ldr	r3, [pc, #708]	@ (800904c <UART_SetConfig+0x634>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8e:	2b28      	cmp	r3, #40	@ 0x28
 8008d90:	d86c      	bhi.n	8008e6c <UART_SetConfig+0x454>
 8008d92:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <UART_SetConfig+0x380>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008e3d 	.word	0x08008e3d
 8008d9c:	08008e6d 	.word	0x08008e6d
 8008da0:	08008e6d 	.word	0x08008e6d
 8008da4:	08008e6d 	.word	0x08008e6d
 8008da8:	08008e6d 	.word	0x08008e6d
 8008dac:	08008e6d 	.word	0x08008e6d
 8008db0:	08008e6d 	.word	0x08008e6d
 8008db4:	08008e6d 	.word	0x08008e6d
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e6d 	.word	0x08008e6d
 8008dc0:	08008e6d 	.word	0x08008e6d
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e6d 	.word	0x08008e6d
 8008dd0:	08008e6d 	.word	0x08008e6d
 8008dd4:	08008e6d 	.word	0x08008e6d
 8008dd8:	08008e4d 	.word	0x08008e4d
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e6d 	.word	0x08008e6d
 8008df4:	08008e6d 	.word	0x08008e6d
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e6d 	.word	0x08008e6d
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e5d 	.word	0x08008e5d
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008e6d 	.word	0x08008e6d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e6d 	.word	0x08008e6d
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e1c0      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e1bc      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e1b8      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e1b4      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e1b0      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e1ac      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e1a8      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a75      	ldr	r2, [pc, #468]	@ (8009050 <UART_SetConfig+0x638>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d130      	bne.n	8008ee0 <UART_SetConfig+0x4c8>
 8008e7e:	4b73      	ldr	r3, [pc, #460]	@ (800904c <UART_SetConfig+0x634>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d826      	bhi.n	8008ed8 <UART_SetConfig+0x4c0>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x478>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e18a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e186      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e182      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e17e      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e17a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e176      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e172      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8009054 <UART_SetConfig+0x63c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d130      	bne.n	8008f4c <UART_SetConfig+0x534>
 8008eea:	4b58      	ldr	r3, [pc, #352]	@ (800904c <UART_SetConfig+0x634>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d826      	bhi.n	8008f44 <UART_SetConfig+0x52c>
 8008ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <UART_SetConfig+0x4e4>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f3d 	.word	0x08008f3d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e154      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e150      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f24:	2308      	movs	r3, #8
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e14c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e148      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f34:	2320      	movs	r3, #32
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e144      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e140      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e13c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a41      	ldr	r2, [pc, #260]	@ (8009058 <UART_SetConfig+0x640>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f040 8082 	bne.w	800905c <UART_SetConfig+0x644>
 8008f58:	4b3c      	ldr	r3, [pc, #240]	@ (800904c <UART_SetConfig+0x634>)
 8008f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f60:	2b28      	cmp	r3, #40	@ 0x28
 8008f62:	d86d      	bhi.n	8009040 <UART_SetConfig+0x628>
 8008f64:	a201      	add	r2, pc, #4	@ (adr r2, 8008f6c <UART_SetConfig+0x554>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08009011 	.word	0x08009011
 8008f70:	08009041 	.word	0x08009041
 8008f74:	08009041 	.word	0x08009041
 8008f78:	08009041 	.word	0x08009041
 8008f7c:	08009041 	.word	0x08009041
 8008f80:	08009041 	.word	0x08009041
 8008f84:	08009041 	.word	0x08009041
 8008f88:	08009041 	.word	0x08009041
 8008f8c:	08009019 	.word	0x08009019
 8008f90:	08009041 	.word	0x08009041
 8008f94:	08009041 	.word	0x08009041
 8008f98:	08009041 	.word	0x08009041
 8008f9c:	08009041 	.word	0x08009041
 8008fa0:	08009041 	.word	0x08009041
 8008fa4:	08009041 	.word	0x08009041
 8008fa8:	08009041 	.word	0x08009041
 8008fac:	08009021 	.word	0x08009021
 8008fb0:	08009041 	.word	0x08009041
 8008fb4:	08009041 	.word	0x08009041
 8008fb8:	08009041 	.word	0x08009041
 8008fbc:	08009041 	.word	0x08009041
 8008fc0:	08009041 	.word	0x08009041
 8008fc4:	08009041 	.word	0x08009041
 8008fc8:	08009041 	.word	0x08009041
 8008fcc:	08009029 	.word	0x08009029
 8008fd0:	08009041 	.word	0x08009041
 8008fd4:	08009041 	.word	0x08009041
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	08009041 	.word	0x08009041
 8008fe4:	08009041 	.word	0x08009041
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009031 	.word	0x08009031
 8008ff0:	08009041 	.word	0x08009041
 8008ff4:	08009041 	.word	0x08009041
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	08009041 	.word	0x08009041
 8009000:	08009041 	.word	0x08009041
 8009004:	08009041 	.word	0x08009041
 8009008:	08009041 	.word	0x08009041
 800900c:	08009039 	.word	0x08009039
 8009010:	2301      	movs	r3, #1
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e0d6      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009018:	2304      	movs	r3, #4
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e0d2      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009020:	2308      	movs	r3, #8
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e0ce      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009028:	2310      	movs	r3, #16
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e0ca      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009030:	2320      	movs	r3, #32
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009036:	e0c6      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009038:	2340      	movs	r3, #64	@ 0x40
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800903e:	e0c2      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e0be      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009048:	40011400 	.word	0x40011400
 800904c:	58024400 	.word	0x58024400
 8009050:	40007800 	.word	0x40007800
 8009054:	40007c00 	.word	0x40007c00
 8009058:	40011800 	.word	0x40011800
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4aad      	ldr	r2, [pc, #692]	@ (8009318 <UART_SetConfig+0x900>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d176      	bne.n	8009154 <UART_SetConfig+0x73c>
 8009066:	4bad      	ldr	r3, [pc, #692]	@ (800931c <UART_SetConfig+0x904>)
 8009068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800906e:	2b28      	cmp	r3, #40	@ 0x28
 8009070:	d86c      	bhi.n	800914c <UART_SetConfig+0x734>
 8009072:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <UART_SetConfig+0x660>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	0800911d 	.word	0x0800911d
 800907c:	0800914d 	.word	0x0800914d
 8009080:	0800914d 	.word	0x0800914d
 8009084:	0800914d 	.word	0x0800914d
 8009088:	0800914d 	.word	0x0800914d
 800908c:	0800914d 	.word	0x0800914d
 8009090:	0800914d 	.word	0x0800914d
 8009094:	0800914d 	.word	0x0800914d
 8009098:	08009125 	.word	0x08009125
 800909c:	0800914d 	.word	0x0800914d
 80090a0:	0800914d 	.word	0x0800914d
 80090a4:	0800914d 	.word	0x0800914d
 80090a8:	0800914d 	.word	0x0800914d
 80090ac:	0800914d 	.word	0x0800914d
 80090b0:	0800914d 	.word	0x0800914d
 80090b4:	0800914d 	.word	0x0800914d
 80090b8:	0800912d 	.word	0x0800912d
 80090bc:	0800914d 	.word	0x0800914d
 80090c0:	0800914d 	.word	0x0800914d
 80090c4:	0800914d 	.word	0x0800914d
 80090c8:	0800914d 	.word	0x0800914d
 80090cc:	0800914d 	.word	0x0800914d
 80090d0:	0800914d 	.word	0x0800914d
 80090d4:	0800914d 	.word	0x0800914d
 80090d8:	08009135 	.word	0x08009135
 80090dc:	0800914d 	.word	0x0800914d
 80090e0:	0800914d 	.word	0x0800914d
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	0800914d 	.word	0x0800914d
 80090ec:	0800914d 	.word	0x0800914d
 80090f0:	0800914d 	.word	0x0800914d
 80090f4:	0800914d 	.word	0x0800914d
 80090f8:	0800913d 	.word	0x0800913d
 80090fc:	0800914d 	.word	0x0800914d
 8009100:	0800914d 	.word	0x0800914d
 8009104:	0800914d 	.word	0x0800914d
 8009108:	0800914d 	.word	0x0800914d
 800910c:	0800914d 	.word	0x0800914d
 8009110:	0800914d 	.word	0x0800914d
 8009114:	0800914d 	.word	0x0800914d
 8009118:	08009145 	.word	0x08009145
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e050      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009124:	2304      	movs	r3, #4
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e04c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 800912c:	2308      	movs	r3, #8
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e048      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009134:	2310      	movs	r3, #16
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e044      	b.n	80091c6 <UART_SetConfig+0x7ae>
 800913c:	2320      	movs	r3, #32
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e040      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009144:	2340      	movs	r3, #64	@ 0x40
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e03c      	b.n	80091c6 <UART_SetConfig+0x7ae>
 800914c:	2380      	movs	r3, #128	@ 0x80
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e038      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a71      	ldr	r2, [pc, #452]	@ (8009320 <UART_SetConfig+0x908>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d130      	bne.n	80091c0 <UART_SetConfig+0x7a8>
 800915e:	4b6f      	ldr	r3, [pc, #444]	@ (800931c <UART_SetConfig+0x904>)
 8009160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b05      	cmp	r3, #5
 8009168:	d826      	bhi.n	80091b8 <UART_SetConfig+0x7a0>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <UART_SetConfig+0x758>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	08009189 	.word	0x08009189
 8009174:	08009191 	.word	0x08009191
 8009178:	08009199 	.word	0x08009199
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091a9 	.word	0x080091a9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	2302      	movs	r3, #2
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e01a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009190:	2304      	movs	r3, #4
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009196:	e016      	b.n	80091c6 <UART_SetConfig+0x7ae>
 8009198:	2308      	movs	r3, #8
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800919e:	e012      	b.n	80091c6 <UART_SetConfig+0x7ae>
 80091a0:	2310      	movs	r3, #16
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091a6:	e00e      	b.n	80091c6 <UART_SetConfig+0x7ae>
 80091a8:	2320      	movs	r3, #32
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ae:	e00a      	b.n	80091c6 <UART_SetConfig+0x7ae>
 80091b0:	2340      	movs	r3, #64	@ 0x40
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091b6:	e006      	b.n	80091c6 <UART_SetConfig+0x7ae>
 80091b8:	2380      	movs	r3, #128	@ 0x80
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091be:	e002      	b.n	80091c6 <UART_SetConfig+0x7ae>
 80091c0:	2380      	movs	r3, #128	@ 0x80
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a55      	ldr	r2, [pc, #340]	@ (8009320 <UART_SetConfig+0x908>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	f040 80f8 	bne.w	80093c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	dc46      	bgt.n	8009268 <UART_SetConfig+0x850>
 80091da:	2b02      	cmp	r3, #2
 80091dc:	db75      	blt.n	80092ca <UART_SetConfig+0x8b2>
 80091de:	3b02      	subs	r3, #2
 80091e0:	2b1e      	cmp	r3, #30
 80091e2:	d872      	bhi.n	80092ca <UART_SetConfig+0x8b2>
 80091e4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <UART_SetConfig+0x7d4>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	0800926f 	.word	0x0800926f
 80091f0:	080092cb 	.word	0x080092cb
 80091f4:	08009277 	.word	0x08009277
 80091f8:	080092cb 	.word	0x080092cb
 80091fc:	080092cb 	.word	0x080092cb
 8009200:	080092cb 	.word	0x080092cb
 8009204:	08009287 	.word	0x08009287
 8009208:	080092cb 	.word	0x080092cb
 800920c:	080092cb 	.word	0x080092cb
 8009210:	080092cb 	.word	0x080092cb
 8009214:	080092cb 	.word	0x080092cb
 8009218:	080092cb 	.word	0x080092cb
 800921c:	080092cb 	.word	0x080092cb
 8009220:	080092cb 	.word	0x080092cb
 8009224:	08009297 	.word	0x08009297
 8009228:	080092cb 	.word	0x080092cb
 800922c:	080092cb 	.word	0x080092cb
 8009230:	080092cb 	.word	0x080092cb
 8009234:	080092cb 	.word	0x080092cb
 8009238:	080092cb 	.word	0x080092cb
 800923c:	080092cb 	.word	0x080092cb
 8009240:	080092cb 	.word	0x080092cb
 8009244:	080092cb 	.word	0x080092cb
 8009248:	080092cb 	.word	0x080092cb
 800924c:	080092cb 	.word	0x080092cb
 8009250:	080092cb 	.word	0x080092cb
 8009254:	080092cb 	.word	0x080092cb
 8009258:	080092cb 	.word	0x080092cb
 800925c:	080092cb 	.word	0x080092cb
 8009260:	080092cb 	.word	0x080092cb
 8009264:	080092bd 	.word	0x080092bd
 8009268:	2b40      	cmp	r3, #64	@ 0x40
 800926a:	d02a      	beq.n	80092c2 <UART_SetConfig+0x8aa>
 800926c:	e02d      	b.n	80092ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800926e:	f7fd fe35 	bl	8006edc <HAL_RCCEx_GetD3PCLK1Freq>
 8009272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009274:	e02f      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800927a:	4618      	mov	r0, r3
 800927c:	f7fd fe44 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009284:	e027      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009286:	f107 0318 	add.w	r3, r7, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f7fd ff90 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e01f      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009296:	4b21      	ldr	r3, [pc, #132]	@ (800931c <UART_SetConfig+0x904>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092a2:	4b1e      	ldr	r3, [pc, #120]	@ (800931c <UART_SetConfig+0x904>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	08db      	lsrs	r3, r3, #3
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009324 <UART_SetConfig+0x90c>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b4:	e00f      	b.n	80092d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009324 <UART_SetConfig+0x90c>)
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ba:	e00c      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009328 <UART_SetConfig+0x910>)
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c0:	e009      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e005      	b.n	80092d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 81ee 	beq.w	80096ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	4a12      	ldr	r2, [pc, #72]	@ (800932c <UART_SetConfig+0x914>)
 80092e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fe:	429a      	cmp	r2, r3
 8009300:	d305      	bcc.n	800930e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800930a:	429a      	cmp	r2, r3
 800930c:	d910      	bls.n	8009330 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009314:	e1d1      	b.n	80096ba <UART_SetConfig+0xca2>
 8009316:	bf00      	nop
 8009318:	40011c00 	.word	0x40011c00
 800931c:	58024400 	.word	0x58024400
 8009320:	58000c00 	.word	0x58000c00
 8009324:	03d09000 	.word	0x03d09000
 8009328:	003d0900 	.word	0x003d0900
 800932c:	0800ac88 	.word	0x0800ac88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009332:	2200      	movs	r2, #0
 8009334:	60bb      	str	r3, [r7, #8]
 8009336:	60fa      	str	r2, [r7, #12]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933c:	4ac0      	ldr	r2, [pc, #768]	@ (8009640 <UART_SetConfig+0xc28>)
 800933e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009342:	b29b      	uxth	r3, r3
 8009344:	2200      	movs	r2, #0
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800934e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009352:	f7f7 f82d 	bl	80003b0 <__aeabi_uldivmod>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	020b      	lsls	r3, r1, #8
 8009368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800936c:	0202      	lsls	r2, r0, #8
 800936e:	6979      	ldr	r1, [r7, #20]
 8009370:	6849      	ldr	r1, [r1, #4]
 8009372:	0849      	lsrs	r1, r1, #1
 8009374:	2000      	movs	r0, #0
 8009376:	460c      	mov	r4, r1
 8009378:	4605      	mov	r5, r0
 800937a:	eb12 0804 	adds.w	r8, r2, r4
 800937e:	eb43 0905 	adc.w	r9, r3, r5
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	469a      	mov	sl, r3
 800938a:	4693      	mov	fp, r2
 800938c:	4652      	mov	r2, sl
 800938e:	465b      	mov	r3, fp
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 f80c 	bl	80003b0 <__aeabi_uldivmod>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4613      	mov	r3, r2
 800939e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093a6:	d308      	bcc.n	80093ba <UART_SetConfig+0x9a2>
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ae:	d204      	bcs.n	80093ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093b6:	60da      	str	r2, [r3, #12]
 80093b8:	e17f      	b.n	80096ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093c0:	e17b      	b.n	80096ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093ca:	f040 80bd 	bne.w	8009548 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80093ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	dc48      	bgt.n	8009468 <UART_SetConfig+0xa50>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	db7b      	blt.n	80094d2 <UART_SetConfig+0xaba>
 80093da:	2b20      	cmp	r3, #32
 80093dc:	d879      	bhi.n	80094d2 <UART_SetConfig+0xaba>
 80093de:	a201      	add	r2, pc, #4	@ (adr r2, 80093e4 <UART_SetConfig+0x9cc>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	0800946f 	.word	0x0800946f
 80093e8:	08009477 	.word	0x08009477
 80093ec:	080094d3 	.word	0x080094d3
 80093f0:	080094d3 	.word	0x080094d3
 80093f4:	0800947f 	.word	0x0800947f
 80093f8:	080094d3 	.word	0x080094d3
 80093fc:	080094d3 	.word	0x080094d3
 8009400:	080094d3 	.word	0x080094d3
 8009404:	0800948f 	.word	0x0800948f
 8009408:	080094d3 	.word	0x080094d3
 800940c:	080094d3 	.word	0x080094d3
 8009410:	080094d3 	.word	0x080094d3
 8009414:	080094d3 	.word	0x080094d3
 8009418:	080094d3 	.word	0x080094d3
 800941c:	080094d3 	.word	0x080094d3
 8009420:	080094d3 	.word	0x080094d3
 8009424:	0800949f 	.word	0x0800949f
 8009428:	080094d3 	.word	0x080094d3
 800942c:	080094d3 	.word	0x080094d3
 8009430:	080094d3 	.word	0x080094d3
 8009434:	080094d3 	.word	0x080094d3
 8009438:	080094d3 	.word	0x080094d3
 800943c:	080094d3 	.word	0x080094d3
 8009440:	080094d3 	.word	0x080094d3
 8009444:	080094d3 	.word	0x080094d3
 8009448:	080094d3 	.word	0x080094d3
 800944c:	080094d3 	.word	0x080094d3
 8009450:	080094d3 	.word	0x080094d3
 8009454:	080094d3 	.word	0x080094d3
 8009458:	080094d3 	.word	0x080094d3
 800945c:	080094d3 	.word	0x080094d3
 8009460:	080094d3 	.word	0x080094d3
 8009464:	080094c5 	.word	0x080094c5
 8009468:	2b40      	cmp	r3, #64	@ 0x40
 800946a:	d02e      	beq.n	80094ca <UART_SetConfig+0xab2>
 800946c:	e031      	b.n	80094d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800946e:	f7fb fe97 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8009472:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009474:	e033      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009476:	f7fb fea9 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 800947a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800947c:	e02f      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009482:	4618      	mov	r0, r3
 8009484:	f7fd fd40 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800948c:	e027      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800948e:	f107 0318 	add.w	r3, r7, #24
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd fe8c 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949c:	e01f      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800949e:	4b69      	ldr	r3, [pc, #420]	@ (8009644 <UART_SetConfig+0xc2c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094aa:	4b66      	ldr	r3, [pc, #408]	@ (8009644 <UART_SetConfig+0xc2c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	08db      	lsrs	r3, r3, #3
 80094b0:	f003 0303 	and.w	r3, r3, #3
 80094b4:	4a64      	ldr	r2, [pc, #400]	@ (8009648 <UART_SetConfig+0xc30>)
 80094b6:	fa22 f303 	lsr.w	r3, r2, r3
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094bc:	e00f      	b.n	80094de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80094be:	4b62      	ldr	r3, [pc, #392]	@ (8009648 <UART_SetConfig+0xc30>)
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c2:	e00c      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094c4:	4b61      	ldr	r3, [pc, #388]	@ (800964c <UART_SetConfig+0xc34>)
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c8:	e009      	b.n	80094de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d0:	e005      	b.n	80094de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80ea 	beq.w	80096ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ea:	4a55      	ldr	r2, [pc, #340]	@ (8009640 <UART_SetConfig+0xc28>)
 80094ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80094f8:	005a      	lsls	r2, r3, #1
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	441a      	add	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	2b0f      	cmp	r3, #15
 8009510:	d916      	bls.n	8009540 <UART_SetConfig+0xb28>
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009518:	d212      	bcs.n	8009540 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800951a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951c:	b29b      	uxth	r3, r3
 800951e:	f023 030f 	bic.w	r3, r3, #15
 8009522:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	b29a      	uxth	r2, r3
 8009530:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009532:	4313      	orrs	r3, r2
 8009534:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	e0bc      	b.n	80096ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009546:	e0b8      	b.n	80096ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009548:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800954c:	2b20      	cmp	r3, #32
 800954e:	dc4b      	bgt.n	80095e8 <UART_SetConfig+0xbd0>
 8009550:	2b00      	cmp	r3, #0
 8009552:	f2c0 8087 	blt.w	8009664 <UART_SetConfig+0xc4c>
 8009556:	2b20      	cmp	r3, #32
 8009558:	f200 8084 	bhi.w	8009664 <UART_SetConfig+0xc4c>
 800955c:	a201      	add	r2, pc, #4	@ (adr r2, 8009564 <UART_SetConfig+0xb4c>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	080095ef 	.word	0x080095ef
 8009568:	080095f7 	.word	0x080095f7
 800956c:	08009665 	.word	0x08009665
 8009570:	08009665 	.word	0x08009665
 8009574:	080095ff 	.word	0x080095ff
 8009578:	08009665 	.word	0x08009665
 800957c:	08009665 	.word	0x08009665
 8009580:	08009665 	.word	0x08009665
 8009584:	0800960f 	.word	0x0800960f
 8009588:	08009665 	.word	0x08009665
 800958c:	08009665 	.word	0x08009665
 8009590:	08009665 	.word	0x08009665
 8009594:	08009665 	.word	0x08009665
 8009598:	08009665 	.word	0x08009665
 800959c:	08009665 	.word	0x08009665
 80095a0:	08009665 	.word	0x08009665
 80095a4:	0800961f 	.word	0x0800961f
 80095a8:	08009665 	.word	0x08009665
 80095ac:	08009665 	.word	0x08009665
 80095b0:	08009665 	.word	0x08009665
 80095b4:	08009665 	.word	0x08009665
 80095b8:	08009665 	.word	0x08009665
 80095bc:	08009665 	.word	0x08009665
 80095c0:	08009665 	.word	0x08009665
 80095c4:	08009665 	.word	0x08009665
 80095c8:	08009665 	.word	0x08009665
 80095cc:	08009665 	.word	0x08009665
 80095d0:	08009665 	.word	0x08009665
 80095d4:	08009665 	.word	0x08009665
 80095d8:	08009665 	.word	0x08009665
 80095dc:	08009665 	.word	0x08009665
 80095e0:	08009665 	.word	0x08009665
 80095e4:	08009657 	.word	0x08009657
 80095e8:	2b40      	cmp	r3, #64	@ 0x40
 80095ea:	d037      	beq.n	800965c <UART_SetConfig+0xc44>
 80095ec:	e03a      	b.n	8009664 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ee:	f7fb fdd7 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 80095f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095f4:	e03c      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095f6:	f7fb fde9 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 80095fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80095fc:	e038      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009602:	4618      	mov	r0, r3
 8009604:	f7fd fc80 	bl	8006f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800960c:	e030      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960e:	f107 0318 	add.w	r3, r7, #24
 8009612:	4618      	mov	r0, r3
 8009614:	f7fd fdcc 	bl	80071b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e028      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800961e:	4b09      	ldr	r3, [pc, #36]	@ (8009644 <UART_SetConfig+0xc2c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b00      	cmp	r3, #0
 8009628:	d012      	beq.n	8009650 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800962a:	4b06      	ldr	r3, [pc, #24]	@ (8009644 <UART_SetConfig+0xc2c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	08db      	lsrs	r3, r3, #3
 8009630:	f003 0303 	and.w	r3, r3, #3
 8009634:	4a04      	ldr	r2, [pc, #16]	@ (8009648 <UART_SetConfig+0xc30>)
 8009636:	fa22 f303 	lsr.w	r3, r2, r3
 800963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800963c:	e018      	b.n	8009670 <UART_SetConfig+0xc58>
 800963e:	bf00      	nop
 8009640:	0800ac88 	.word	0x0800ac88
 8009644:	58024400 	.word	0x58024400
 8009648:	03d09000 	.word	0x03d09000
 800964c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009650:	4b24      	ldr	r3, [pc, #144]	@ (80096e4 <UART_SetConfig+0xccc>)
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009654:	e00c      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009656:	4b24      	ldr	r3, [pc, #144]	@ (80096e8 <UART_SetConfig+0xcd0>)
 8009658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800965a:	e009      	b.n	8009670 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800965c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009662:	e005      	b.n	8009670 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800966e:	bf00      	nop
    }

    if (pclk != 0U)
 8009670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d021      	beq.n	80096ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967a:	4a1c      	ldr	r2, [pc, #112]	@ (80096ec <UART_SetConfig+0xcd4>)
 800967c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009680:	461a      	mov	r2, r3
 8009682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009684:	fbb3 f2f2 	udiv	r2, r3, r2
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	085b      	lsrs	r3, r3, #1
 800968e:	441a      	add	r2, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	fbb2 f3f3 	udiv	r3, r2, r3
 8009698:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800969a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969c:	2b0f      	cmp	r3, #15
 800969e:	d909      	bls.n	80096b4 <UART_SetConfig+0xc9c>
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096a6:	d205      	bcs.n	80096b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60da      	str	r2, [r3, #12]
 80096b2:	e002      	b.n	80096ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2201      	movs	r2, #1
 80096be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2200      	movs	r2, #0
 80096ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2200      	movs	r2, #0
 80096d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80096d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3748      	adds	r7, #72	@ 0x48
 80096de:	46bd      	mov	sp, r7
 80096e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096e4:	03d09000 	.word	0x03d09000
 80096e8:	003d0900 	.word	0x003d0900
 80096ec:	0800ac88 	.word	0x0800ac88

080096f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	430a      	orrs	r2, r1
 800973a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009784:	f003 0310 	and.w	r3, r3, #16
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01a      	beq.n	8009806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097ee:	d10a      	bne.n	8009806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	605a      	str	r2, [r3, #4]
  }
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b098      	sub	sp, #96	@ 0x60
 8009838:	af02      	add	r7, sp, #8
 800983a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009844:	f7f8 fa82 	bl	8001d4c <HAL_GetTick>
 8009848:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0308 	and.w	r3, r3, #8
 8009854:	2b08      	cmp	r3, #8
 8009856:	d12f      	bne.n	80098b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009860:	2200      	movs	r2, #0
 8009862:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f88e 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d022      	beq.n	80098b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009886:	653b      	str	r3, [r7, #80]	@ 0x50
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009890:	647b      	str	r3, [r7, #68]	@ 0x44
 8009892:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800989e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e063      	b.n	8009980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0304 	and.w	r3, r3, #4
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d149      	bne.n	800995a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ce:	2200      	movs	r2, #0
 80098d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f857 	bl	8009988 <UART_WaitOnFlagUntilTimeout>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d03c      	beq.n	800995a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	623b      	str	r3, [r7, #32]
   return(result);
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009900:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009906:	e841 2300 	strex	r3, r2, [r1]
 800990a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800990c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1e6      	bne.n	80098e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	60fb      	str	r3, [r7, #12]
   return(result);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f023 0301 	bic.w	r3, r3, #1
 8009928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009932:	61fa      	str	r2, [r7, #28]
 8009934:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	69b9      	ldr	r1, [r7, #24]
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	617b      	str	r3, [r7, #20]
   return(result);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e5      	bne.n	8009912 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e012      	b.n	8009980 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3758      	adds	r7, #88	@ 0x58
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	4613      	mov	r3, r2
 8009996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009998:	e04f      	b.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d04b      	beq.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a2:	f7f8 f9d3 	bl	8001d4c <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e04e      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d037      	beq.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b80      	cmp	r3, #128	@ 0x80
 80099ce:	d034      	beq.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b40      	cmp	r3, #64	@ 0x40
 80099d4:	d031      	beq.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d110      	bne.n	8009a06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2208      	movs	r2, #8
 80099ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 f839 	bl	8009a64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2208      	movs	r2, #8
 80099f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e029      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a14:	d111      	bne.n	8009a3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f81f 	bl	8009a64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2220      	movs	r2, #32
 8009a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e00f      	b.n	8009a5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69da      	ldr	r2, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	4013      	ands	r3, r2
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	bf0c      	ite	eq
 8009a4a:	2301      	moveq	r3, #1
 8009a4c:	2300      	movne	r3, #0
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d0a0      	beq.n	800999a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b095      	sub	sp, #84	@ 0x54
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e6      	bne.n	8009a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8009b2c <UART_EndRxTransfer+0xc8>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d118      	bne.n	8009b0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f023 0310 	bic.w	r3, r3, #16
 8009aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009af8:	61bb      	str	r3, [r7, #24]
 8009afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6979      	ldr	r1, [r7, #20]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	613b      	str	r3, [r7, #16]
   return(result);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e6      	bne.n	8009ada <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b20:	bf00      	nop
 8009b22:	3754      	adds	r7, #84	@ 0x54
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	effffffe 	.word	0xeffffffe

08009b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e027      	b.n	8009b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2224      	movs	r2, #36	@ 0x24
 8009b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0201 	bic.w	r2, r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e02d      	b.n	8009c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	@ 0x24
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f850 	bl	8009c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e02d      	b.n	8009c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	@ 0x24
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f812 	bl	8009c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d108      	bne.n	8009cbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cbc:	e031      	b.n	8009d22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cbe:	2310      	movs	r3, #16
 8009cc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cc2:	2310      	movs	r3, #16
 8009cc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	0e5b      	lsrs	r3, r3, #25
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	0f5b      	lsrs	r3, r3, #29
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	7b3a      	ldrb	r2, [r7, #12]
 8009cea:	4911      	ldr	r1, [pc, #68]	@ (8009d30 <UARTEx_SetNbDataToProcess+0x94>)
 8009cec:	5c8a      	ldrb	r2, [r1, r2]
 8009cee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cf2:	7b3a      	ldrb	r2, [r7, #12]
 8009cf4:	490f      	ldr	r1, [pc, #60]	@ (8009d34 <UARTEx_SetNbDataToProcess+0x98>)
 8009cf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	7b7a      	ldrb	r2, [r7, #13]
 8009d08:	4909      	ldr	r1, [pc, #36]	@ (8009d30 <UARTEx_SetNbDataToProcess+0x94>)
 8009d0a:	5c8a      	ldrb	r2, [r1, r2]
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d10:	7b7a      	ldrb	r2, [r7, #13]
 8009d12:	4908      	ldr	r1, [pc, #32]	@ (8009d34 <UARTEx_SetNbDataToProcess+0x98>)
 8009d14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	0800aca0 	.word	0x0800aca0
 8009d34:	0800aca8 	.word	0x0800aca8

08009d38 <std>:
 8009d38:	2300      	movs	r3, #0
 8009d3a:	b510      	push	{r4, lr}
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d46:	6083      	str	r3, [r0, #8]
 8009d48:	8181      	strh	r1, [r0, #12]
 8009d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d4c:	81c2      	strh	r2, [r0, #14]
 8009d4e:	6183      	str	r3, [r0, #24]
 8009d50:	4619      	mov	r1, r3
 8009d52:	2208      	movs	r2, #8
 8009d54:	305c      	adds	r0, #92	@ 0x5c
 8009d56:	f000 f906 	bl	8009f66 <memset>
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d90 <std+0x58>)
 8009d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <std+0x5c>)
 8009d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d62:	4b0d      	ldr	r3, [pc, #52]	@ (8009d98 <std+0x60>)
 8009d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d66:	4b0d      	ldr	r3, [pc, #52]	@ (8009d9c <std+0x64>)
 8009d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <std+0x68>)
 8009d6c:	6224      	str	r4, [r4, #32]
 8009d6e:	429c      	cmp	r4, r3
 8009d70:	d006      	beq.n	8009d80 <std+0x48>
 8009d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d76:	4294      	cmp	r4, r2
 8009d78:	d002      	beq.n	8009d80 <std+0x48>
 8009d7a:	33d0      	adds	r3, #208	@ 0xd0
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	d105      	bne.n	8009d8c <std+0x54>
 8009d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d88:	f000 b966 	b.w	800a058 <__retarget_lock_init_recursive>
 8009d8c:	bd10      	pop	{r4, pc}
 8009d8e:	bf00      	nop
 8009d90:	08009ee1 	.word	0x08009ee1
 8009d94:	08009f03 	.word	0x08009f03
 8009d98:	08009f3b 	.word	0x08009f3b
 8009d9c:	08009f5f 	.word	0x08009f5f
 8009da0:	24000234 	.word	0x24000234

08009da4 <stdio_exit_handler>:
 8009da4:	4a02      	ldr	r2, [pc, #8]	@ (8009db0 <stdio_exit_handler+0xc>)
 8009da6:	4903      	ldr	r1, [pc, #12]	@ (8009db4 <stdio_exit_handler+0x10>)
 8009da8:	4803      	ldr	r0, [pc, #12]	@ (8009db8 <stdio_exit_handler+0x14>)
 8009daa:	f000 b869 	b.w	8009e80 <_fwalk_sglue>
 8009dae:	bf00      	nop
 8009db0:	24000018 	.word	0x24000018
 8009db4:	0800a8f9 	.word	0x0800a8f9
 8009db8:	24000028 	.word	0x24000028

08009dbc <cleanup_stdio>:
 8009dbc:	6841      	ldr	r1, [r0, #4]
 8009dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8009df0 <cleanup_stdio+0x34>)
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	d001      	beq.n	8009dcc <cleanup_stdio+0x10>
 8009dc8:	f000 fd96 	bl	800a8f8 <_fflush_r>
 8009dcc:	68a1      	ldr	r1, [r4, #8]
 8009dce:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <cleanup_stdio+0x38>)
 8009dd0:	4299      	cmp	r1, r3
 8009dd2:	d002      	beq.n	8009dda <cleanup_stdio+0x1e>
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 fd8f 	bl	800a8f8 <_fflush_r>
 8009dda:	68e1      	ldr	r1, [r4, #12]
 8009ddc:	4b06      	ldr	r3, [pc, #24]	@ (8009df8 <cleanup_stdio+0x3c>)
 8009dde:	4299      	cmp	r1, r3
 8009de0:	d004      	beq.n	8009dec <cleanup_stdio+0x30>
 8009de2:	4620      	mov	r0, r4
 8009de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de8:	f000 bd86 	b.w	800a8f8 <_fflush_r>
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	bf00      	nop
 8009df0:	24000234 	.word	0x24000234
 8009df4:	2400029c 	.word	0x2400029c
 8009df8:	24000304 	.word	0x24000304

08009dfc <global_stdio_init.part.0>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009e2c <global_stdio_init.part.0+0x30>)
 8009e00:	4c0b      	ldr	r4, [pc, #44]	@ (8009e30 <global_stdio_init.part.0+0x34>)
 8009e02:	4a0c      	ldr	r2, [pc, #48]	@ (8009e34 <global_stdio_init.part.0+0x38>)
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	4620      	mov	r0, r4
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2104      	movs	r1, #4
 8009e0c:	f7ff ff94 	bl	8009d38 <std>
 8009e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e14:	2201      	movs	r2, #1
 8009e16:	2109      	movs	r1, #9
 8009e18:	f7ff ff8e 	bl	8009d38 <std>
 8009e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e20:	2202      	movs	r2, #2
 8009e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e26:	2112      	movs	r1, #18
 8009e28:	f7ff bf86 	b.w	8009d38 <std>
 8009e2c:	2400036c 	.word	0x2400036c
 8009e30:	24000234 	.word	0x24000234
 8009e34:	08009da5 	.word	0x08009da5

08009e38 <__sfp_lock_acquire>:
 8009e38:	4801      	ldr	r0, [pc, #4]	@ (8009e40 <__sfp_lock_acquire+0x8>)
 8009e3a:	f000 b90e 	b.w	800a05a <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	24000375 	.word	0x24000375

08009e44 <__sfp_lock_release>:
 8009e44:	4801      	ldr	r0, [pc, #4]	@ (8009e4c <__sfp_lock_release+0x8>)
 8009e46:	f000 b909 	b.w	800a05c <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	24000375 	.word	0x24000375

08009e50 <__sinit>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4604      	mov	r4, r0
 8009e54:	f7ff fff0 	bl	8009e38 <__sfp_lock_acquire>
 8009e58:	6a23      	ldr	r3, [r4, #32]
 8009e5a:	b11b      	cbz	r3, 8009e64 <__sinit+0x14>
 8009e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e60:	f7ff bff0 	b.w	8009e44 <__sfp_lock_release>
 8009e64:	4b04      	ldr	r3, [pc, #16]	@ (8009e78 <__sinit+0x28>)
 8009e66:	6223      	str	r3, [r4, #32]
 8009e68:	4b04      	ldr	r3, [pc, #16]	@ (8009e7c <__sinit+0x2c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1f5      	bne.n	8009e5c <__sinit+0xc>
 8009e70:	f7ff ffc4 	bl	8009dfc <global_stdio_init.part.0>
 8009e74:	e7f2      	b.n	8009e5c <__sinit+0xc>
 8009e76:	bf00      	nop
 8009e78:	08009dbd 	.word	0x08009dbd
 8009e7c:	2400036c 	.word	0x2400036c

08009e80 <_fwalk_sglue>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	4607      	mov	r7, r0
 8009e86:	4688      	mov	r8, r1
 8009e88:	4614      	mov	r4, r2
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e90:	f1b9 0901 	subs.w	r9, r9, #1
 8009e94:	d505      	bpl.n	8009ea2 <_fwalk_sglue+0x22>
 8009e96:	6824      	ldr	r4, [r4, #0]
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	d1f7      	bne.n	8009e8c <_fwalk_sglue+0xc>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d907      	bls.n	8009eb8 <_fwalk_sglue+0x38>
 8009ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009eac:	3301      	adds	r3, #1
 8009eae:	d003      	beq.n	8009eb8 <_fwalk_sglue+0x38>
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	47c0      	blx	r8
 8009eb6:	4306      	orrs	r6, r0
 8009eb8:	3568      	adds	r5, #104	@ 0x68
 8009eba:	e7e9      	b.n	8009e90 <_fwalk_sglue+0x10>

08009ebc <iprintf>:
 8009ebc:	b40f      	push	{r0, r1, r2, r3}
 8009ebe:	b507      	push	{r0, r1, r2, lr}
 8009ec0:	4906      	ldr	r1, [pc, #24]	@ (8009edc <iprintf+0x20>)
 8009ec2:	ab04      	add	r3, sp, #16
 8009ec4:	6808      	ldr	r0, [r1, #0]
 8009ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eca:	6881      	ldr	r1, [r0, #8]
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	f000 f9e9 	bl	800a2a4 <_vfiprintf_r>
 8009ed2:	b003      	add	sp, #12
 8009ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed8:	b004      	add	sp, #16
 8009eda:	4770      	bx	lr
 8009edc:	24000024 	.word	0x24000024

08009ee0 <__sread>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee8:	f000 f868 	bl	8009fbc <_read_r>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	bfab      	itete	ge
 8009ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef4:	181b      	addge	r3, r3, r0
 8009ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009efa:	bfac      	ite	ge
 8009efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009efe:	81a3      	strhlt	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__swrite>:
 8009f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	461f      	mov	r7, r3
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	05db      	lsls	r3, r3, #23
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	4616      	mov	r6, r2
 8009f12:	d505      	bpl.n	8009f20 <__swrite+0x1e>
 8009f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f18:	2302      	movs	r3, #2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f000 f83c 	bl	8009f98 <_lseek_r>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	463b      	mov	r3, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	f000 b853 	b.w	8009fe0 <_write_r>

08009f3a <__sseek>:
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f42:	f000 f829 	bl	8009f98 <_lseek_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	bf15      	itete	ne
 8009f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f56:	81a3      	strheq	r3, [r4, #12]
 8009f58:	bf18      	it	ne
 8009f5a:	81a3      	strhne	r3, [r4, #12]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <__sclose>:
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f000 b809 	b.w	8009f78 <_close_r>

08009f66 <memset>:
 8009f66:	4402      	add	r2, r0
 8009f68:	4603      	mov	r3, r0
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d100      	bne.n	8009f70 <memset+0xa>
 8009f6e:	4770      	bx	lr
 8009f70:	f803 1b01 	strb.w	r1, [r3], #1
 8009f74:	e7f9      	b.n	8009f6a <memset+0x4>
	...

08009f78 <_close_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	@ (8009f94 <_close_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f7 fd4f 	bl	8001a26 <_close>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_close_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_close_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	24000370 	.word	0x24000370

08009f98 <_lseek_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d07      	ldr	r5, [pc, #28]	@ (8009fb8 <_lseek_r+0x20>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f7f7 fd64 	bl	8001a74 <_lseek>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_lseek_r+0x1e>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_lseek_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	24000370 	.word	0x24000370

08009fbc <_read_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	@ (8009fdc <_read_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f7 fcf2 	bl	80019b4 <_read>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_read_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_read_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	24000370 	.word	0x24000370

08009fe0 <_write_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	@ (800a000 <_write_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f7 fcfd 	bl	80019ee <_write>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_write_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_write_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	24000370 	.word	0x24000370

0800a004 <__errno>:
 800a004:	4b01      	ldr	r3, [pc, #4]	@ (800a00c <__errno+0x8>)
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	24000024 	.word	0x24000024

0800a010 <__libc_init_array>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	4d0d      	ldr	r5, [pc, #52]	@ (800a048 <__libc_init_array+0x38>)
 800a014:	4c0d      	ldr	r4, [pc, #52]	@ (800a04c <__libc_init_array+0x3c>)
 800a016:	1b64      	subs	r4, r4, r5
 800a018:	10a4      	asrs	r4, r4, #2
 800a01a:	2600      	movs	r6, #0
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	d109      	bne.n	800a034 <__libc_init_array+0x24>
 800a020:	4d0b      	ldr	r5, [pc, #44]	@ (800a050 <__libc_init_array+0x40>)
 800a022:	4c0c      	ldr	r4, [pc, #48]	@ (800a054 <__libc_init_array+0x44>)
 800a024:	f000 fdb8 	bl	800ab98 <_init>
 800a028:	1b64      	subs	r4, r4, r5
 800a02a:	10a4      	asrs	r4, r4, #2
 800a02c:	2600      	movs	r6, #0
 800a02e:	42a6      	cmp	r6, r4
 800a030:	d105      	bne.n	800a03e <__libc_init_array+0x2e>
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	f855 3b04 	ldr.w	r3, [r5], #4
 800a038:	4798      	blx	r3
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7ee      	b.n	800a01c <__libc_init_array+0xc>
 800a03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a042:	4798      	blx	r3
 800a044:	3601      	adds	r6, #1
 800a046:	e7f2      	b.n	800a02e <__libc_init_array+0x1e>
 800a048:	0800acec 	.word	0x0800acec
 800a04c:	0800acec 	.word	0x0800acec
 800a050:	0800acec 	.word	0x0800acec
 800a054:	0800acf0 	.word	0x0800acf0

0800a058 <__retarget_lock_init_recursive>:
 800a058:	4770      	bx	lr

0800a05a <__retarget_lock_acquire_recursive>:
 800a05a:	4770      	bx	lr

0800a05c <__retarget_lock_release_recursive>:
 800a05c:	4770      	bx	lr
	...

0800a060 <_free_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4605      	mov	r5, r0
 800a064:	2900      	cmp	r1, #0
 800a066:	d041      	beq.n	800a0ec <_free_r+0x8c>
 800a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06c:	1f0c      	subs	r4, r1, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfb8      	it	lt
 800a072:	18e4      	addlt	r4, r4, r3
 800a074:	f000 f8e0 	bl	800a238 <__malloc_lock>
 800a078:	4a1d      	ldr	r2, [pc, #116]	@ (800a0f0 <_free_r+0x90>)
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	b933      	cbnz	r3, 800a08c <_free_r+0x2c>
 800a07e:	6063      	str	r3, [r4, #4]
 800a080:	6014      	str	r4, [r2, #0]
 800a082:	4628      	mov	r0, r5
 800a084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a088:	f000 b8dc 	b.w	800a244 <__malloc_unlock>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d908      	bls.n	800a0a2 <_free_r+0x42>
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	1821      	adds	r1, r4, r0
 800a094:	428b      	cmp	r3, r1
 800a096:	bf01      	itttt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	1809      	addeq	r1, r1, r0
 800a09e:	6021      	streq	r1, [r4, #0]
 800a0a0:	e7ed      	b.n	800a07e <_free_r+0x1e>
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	b10b      	cbz	r3, 800a0ac <_free_r+0x4c>
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d9fa      	bls.n	800a0a2 <_free_r+0x42>
 800a0ac:	6811      	ldr	r1, [r2, #0]
 800a0ae:	1850      	adds	r0, r2, r1
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d10b      	bne.n	800a0cc <_free_r+0x6c>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	4401      	add	r1, r0
 800a0b8:	1850      	adds	r0, r2, r1
 800a0ba:	4283      	cmp	r3, r0
 800a0bc:	6011      	str	r1, [r2, #0]
 800a0be:	d1e0      	bne.n	800a082 <_free_r+0x22>
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	6053      	str	r3, [r2, #4]
 800a0c6:	4408      	add	r0, r1
 800a0c8:	6010      	str	r0, [r2, #0]
 800a0ca:	e7da      	b.n	800a082 <_free_r+0x22>
 800a0cc:	d902      	bls.n	800a0d4 <_free_r+0x74>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	e7d6      	b.n	800a082 <_free_r+0x22>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	1821      	adds	r1, r4, r0
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf04      	itt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	bf04      	itt	eq
 800a0e4:	1809      	addeq	r1, r1, r0
 800a0e6:	6021      	streq	r1, [r4, #0]
 800a0e8:	6054      	str	r4, [r2, #4]
 800a0ea:	e7ca      	b.n	800a082 <_free_r+0x22>
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2400037c 	.word	0x2400037c

0800a0f4 <sbrk_aligned>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4e0f      	ldr	r6, [pc, #60]	@ (800a134 <sbrk_aligned+0x40>)
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6831      	ldr	r1, [r6, #0]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b911      	cbnz	r1, 800a106 <sbrk_aligned+0x12>
 800a100:	f000 fcb6 	bl	800aa70 <_sbrk_r>
 800a104:	6030      	str	r0, [r6, #0]
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 fcb1 	bl	800aa70 <_sbrk_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	d103      	bne.n	800a11a <sbrk_aligned+0x26>
 800a112:	f04f 34ff 	mov.w	r4, #4294967295
 800a116:	4620      	mov	r0, r4
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	1cc4      	adds	r4, r0, #3
 800a11c:	f024 0403 	bic.w	r4, r4, #3
 800a120:	42a0      	cmp	r0, r4
 800a122:	d0f8      	beq.n	800a116 <sbrk_aligned+0x22>
 800a124:	1a21      	subs	r1, r4, r0
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fca2 	bl	800aa70 <_sbrk_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	d1f2      	bne.n	800a116 <sbrk_aligned+0x22>
 800a130:	e7ef      	b.n	800a112 <sbrk_aligned+0x1e>
 800a132:	bf00      	nop
 800a134:	24000378 	.word	0x24000378

0800a138 <_malloc_r>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	1ccd      	adds	r5, r1, #3
 800a13e:	f025 0503 	bic.w	r5, r5, #3
 800a142:	3508      	adds	r5, #8
 800a144:	2d0c      	cmp	r5, #12
 800a146:	bf38      	it	cc
 800a148:	250c      	movcc	r5, #12
 800a14a:	2d00      	cmp	r5, #0
 800a14c:	4606      	mov	r6, r0
 800a14e:	db01      	blt.n	800a154 <_malloc_r+0x1c>
 800a150:	42a9      	cmp	r1, r5
 800a152:	d904      	bls.n	800a15e <_malloc_r+0x26>
 800a154:	230c      	movs	r3, #12
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	2000      	movs	r0, #0
 800a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a234 <_malloc_r+0xfc>
 800a162:	f000 f869 	bl	800a238 <__malloc_lock>
 800a166:	f8d8 3000 	ldr.w	r3, [r8]
 800a16a:	461c      	mov	r4, r3
 800a16c:	bb44      	cbnz	r4, 800a1c0 <_malloc_r+0x88>
 800a16e:	4629      	mov	r1, r5
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff ffbf 	bl	800a0f4 <sbrk_aligned>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	4604      	mov	r4, r0
 800a17a:	d158      	bne.n	800a22e <_malloc_r+0xf6>
 800a17c:	f8d8 4000 	ldr.w	r4, [r8]
 800a180:	4627      	mov	r7, r4
 800a182:	2f00      	cmp	r7, #0
 800a184:	d143      	bne.n	800a20e <_malloc_r+0xd6>
 800a186:	2c00      	cmp	r4, #0
 800a188:	d04b      	beq.n	800a222 <_malloc_r+0xea>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	4639      	mov	r1, r7
 800a18e:	4630      	mov	r0, r6
 800a190:	eb04 0903 	add.w	r9, r4, r3
 800a194:	f000 fc6c 	bl	800aa70 <_sbrk_r>
 800a198:	4581      	cmp	r9, r0
 800a19a:	d142      	bne.n	800a222 <_malloc_r+0xea>
 800a19c:	6821      	ldr	r1, [r4, #0]
 800a19e:	1a6d      	subs	r5, r5, r1
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff ffa6 	bl	800a0f4 <sbrk_aligned>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d03a      	beq.n	800a222 <_malloc_r+0xea>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	442b      	add	r3, r5
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	bb62      	cbnz	r2, 800a214 <_malloc_r+0xdc>
 800a1ba:	f8c8 7000 	str.w	r7, [r8]
 800a1be:	e00f      	b.n	800a1e0 <_malloc_r+0xa8>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	1b52      	subs	r2, r2, r5
 800a1c4:	d420      	bmi.n	800a208 <_malloc_r+0xd0>
 800a1c6:	2a0b      	cmp	r2, #11
 800a1c8:	d917      	bls.n	800a1fa <_malloc_r+0xc2>
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	6025      	str	r5, [r4, #0]
 800a1d0:	bf18      	it	ne
 800a1d2:	6059      	strne	r1, [r3, #4]
 800a1d4:	6863      	ldr	r3, [r4, #4]
 800a1d6:	bf08      	it	eq
 800a1d8:	f8c8 1000 	streq.w	r1, [r8]
 800a1dc:	5162      	str	r2, [r4, r5]
 800a1de:	604b      	str	r3, [r1, #4]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f82f 	bl	800a244 <__malloc_unlock>
 800a1e6:	f104 000b 	add.w	r0, r4, #11
 800a1ea:	1d23      	adds	r3, r4, #4
 800a1ec:	f020 0007 	bic.w	r0, r0, #7
 800a1f0:	1ac2      	subs	r2, r0, r3
 800a1f2:	bf1c      	itt	ne
 800a1f4:	1a1b      	subne	r3, r3, r0
 800a1f6:	50a3      	strne	r3, [r4, r2]
 800a1f8:	e7af      	b.n	800a15a <_malloc_r+0x22>
 800a1fa:	6862      	ldr	r2, [r4, #4]
 800a1fc:	42a3      	cmp	r3, r4
 800a1fe:	bf0c      	ite	eq
 800a200:	f8c8 2000 	streq.w	r2, [r8]
 800a204:	605a      	strne	r2, [r3, #4]
 800a206:	e7eb      	b.n	800a1e0 <_malloc_r+0xa8>
 800a208:	4623      	mov	r3, r4
 800a20a:	6864      	ldr	r4, [r4, #4]
 800a20c:	e7ae      	b.n	800a16c <_malloc_r+0x34>
 800a20e:	463c      	mov	r4, r7
 800a210:	687f      	ldr	r7, [r7, #4]
 800a212:	e7b6      	b.n	800a182 <_malloc_r+0x4a>
 800a214:	461a      	mov	r2, r3
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	42a3      	cmp	r3, r4
 800a21a:	d1fb      	bne.n	800a214 <_malloc_r+0xdc>
 800a21c:	2300      	movs	r3, #0
 800a21e:	6053      	str	r3, [r2, #4]
 800a220:	e7de      	b.n	800a1e0 <_malloc_r+0xa8>
 800a222:	230c      	movs	r3, #12
 800a224:	6033      	str	r3, [r6, #0]
 800a226:	4630      	mov	r0, r6
 800a228:	f000 f80c 	bl	800a244 <__malloc_unlock>
 800a22c:	e794      	b.n	800a158 <_malloc_r+0x20>
 800a22e:	6005      	str	r5, [r0, #0]
 800a230:	e7d6      	b.n	800a1e0 <_malloc_r+0xa8>
 800a232:	bf00      	nop
 800a234:	2400037c 	.word	0x2400037c

0800a238 <__malloc_lock>:
 800a238:	4801      	ldr	r0, [pc, #4]	@ (800a240 <__malloc_lock+0x8>)
 800a23a:	f7ff bf0e 	b.w	800a05a <__retarget_lock_acquire_recursive>
 800a23e:	bf00      	nop
 800a240:	24000374 	.word	0x24000374

0800a244 <__malloc_unlock>:
 800a244:	4801      	ldr	r0, [pc, #4]	@ (800a24c <__malloc_unlock+0x8>)
 800a246:	f7ff bf09 	b.w	800a05c <__retarget_lock_release_recursive>
 800a24a:	bf00      	nop
 800a24c:	24000374 	.word	0x24000374

0800a250 <__sfputc_r>:
 800a250:	6893      	ldr	r3, [r2, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	b410      	push	{r4}
 800a258:	6093      	str	r3, [r2, #8]
 800a25a:	da08      	bge.n	800a26e <__sfputc_r+0x1e>
 800a25c:	6994      	ldr	r4, [r2, #24]
 800a25e:	42a3      	cmp	r3, r4
 800a260:	db01      	blt.n	800a266 <__sfputc_r+0x16>
 800a262:	290a      	cmp	r1, #10
 800a264:	d103      	bne.n	800a26e <__sfputc_r+0x1e>
 800a266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a26a:	f000 bb6d 	b.w	800a948 <__swbuf_r>
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	1c58      	adds	r0, r3, #1
 800a272:	6010      	str	r0, [r2, #0]
 800a274:	7019      	strb	r1, [r3, #0]
 800a276:	4608      	mov	r0, r1
 800a278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <__sfputs_r>:
 800a27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a280:	4606      	mov	r6, r0
 800a282:	460f      	mov	r7, r1
 800a284:	4614      	mov	r4, r2
 800a286:	18d5      	adds	r5, r2, r3
 800a288:	42ac      	cmp	r4, r5
 800a28a:	d101      	bne.n	800a290 <__sfputs_r+0x12>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e007      	b.n	800a2a0 <__sfputs_r+0x22>
 800a290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a294:	463a      	mov	r2, r7
 800a296:	4630      	mov	r0, r6
 800a298:	f7ff ffda 	bl	800a250 <__sfputc_r>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d1f3      	bne.n	800a288 <__sfputs_r+0xa>
 800a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2a4 <_vfiprintf_r>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	b09d      	sub	sp, #116	@ 0x74
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	4698      	mov	r8, r3
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	b118      	cbz	r0, 800a2bc <_vfiprintf_r+0x18>
 800a2b4:	6a03      	ldr	r3, [r0, #32]
 800a2b6:	b90b      	cbnz	r3, 800a2bc <_vfiprintf_r+0x18>
 800a2b8:	f7ff fdca 	bl	8009e50 <__sinit>
 800a2bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2be:	07d9      	lsls	r1, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_vfiprintf_r+0x2a>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	059a      	lsls	r2, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_vfiprintf_r+0x2a>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ca:	f7ff fec6 	bl	800a05a <__retarget_lock_acquire_recursive>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	071b      	lsls	r3, r3, #28
 800a2d2:	d501      	bpl.n	800a2d8 <_vfiprintf_r+0x34>
 800a2d4:	692b      	ldr	r3, [r5, #16]
 800a2d6:	b99b      	cbnz	r3, 800a300 <_vfiprintf_r+0x5c>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 fb72 	bl	800a9c4 <__swsetup_r>
 800a2e0:	b170      	cbz	r0, 800a300 <_vfiprintf_r+0x5c>
 800a2e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2e4:	07dc      	lsls	r4, r3, #31
 800a2e6:	d504      	bpl.n	800a2f2 <_vfiprintf_r+0x4e>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	b01d      	add	sp, #116	@ 0x74
 800a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	0598      	lsls	r0, r3, #22
 800a2f6:	d4f7      	bmi.n	800a2e8 <_vfiprintf_r+0x44>
 800a2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2fa:	f7ff feaf 	bl	800a05c <__retarget_lock_release_recursive>
 800a2fe:	e7f3      	b.n	800a2e8 <_vfiprintf_r+0x44>
 800a300:	2300      	movs	r3, #0
 800a302:	9309      	str	r3, [sp, #36]	@ 0x24
 800a304:	2320      	movs	r3, #32
 800a306:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a30a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a30e:	2330      	movs	r3, #48	@ 0x30
 800a310:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4c0 <_vfiprintf_r+0x21c>
 800a314:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a318:	f04f 0901 	mov.w	r9, #1
 800a31c:	4623      	mov	r3, r4
 800a31e:	469a      	mov	sl, r3
 800a320:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a324:	b10a      	cbz	r2, 800a32a <_vfiprintf_r+0x86>
 800a326:	2a25      	cmp	r2, #37	@ 0x25
 800a328:	d1f9      	bne.n	800a31e <_vfiprintf_r+0x7a>
 800a32a:	ebba 0b04 	subs.w	fp, sl, r4
 800a32e:	d00b      	beq.n	800a348 <_vfiprintf_r+0xa4>
 800a330:	465b      	mov	r3, fp
 800a332:	4622      	mov	r2, r4
 800a334:	4629      	mov	r1, r5
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ffa1 	bl	800a27e <__sfputs_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	f000 80a7 	beq.w	800a490 <_vfiprintf_r+0x1ec>
 800a342:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a344:	445a      	add	r2, fp
 800a346:	9209      	str	r2, [sp, #36]	@ 0x24
 800a348:	f89a 3000 	ldrb.w	r3, [sl]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 809f 	beq.w	800a490 <_vfiprintf_r+0x1ec>
 800a352:	2300      	movs	r3, #0
 800a354:	f04f 32ff 	mov.w	r2, #4294967295
 800a358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a35c:	f10a 0a01 	add.w	sl, sl, #1
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a368:	931a      	str	r3, [sp, #104]	@ 0x68
 800a36a:	4654      	mov	r4, sl
 800a36c:	2205      	movs	r2, #5
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4853      	ldr	r0, [pc, #332]	@ (800a4c0 <_vfiprintf_r+0x21c>)
 800a374:	f7f5 ffcc 	bl	8000310 <memchr>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	b9d8      	cbnz	r0, 800a3b4 <_vfiprintf_r+0x110>
 800a37c:	06d1      	lsls	r1, r2, #27
 800a37e:	bf44      	itt	mi
 800a380:	2320      	movmi	r3, #32
 800a382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a386:	0713      	lsls	r3, r2, #28
 800a388:	bf44      	itt	mi
 800a38a:	232b      	movmi	r3, #43	@ 0x2b
 800a38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a390:	f89a 3000 	ldrb.w	r3, [sl]
 800a394:	2b2a      	cmp	r3, #42	@ 0x2a
 800a396:	d015      	beq.n	800a3c4 <_vfiprintf_r+0x120>
 800a398:	9a07      	ldr	r2, [sp, #28]
 800a39a:	4654      	mov	r4, sl
 800a39c:	2000      	movs	r0, #0
 800a39e:	f04f 0c0a 	mov.w	ip, #10
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a8:	3b30      	subs	r3, #48	@ 0x30
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d94b      	bls.n	800a446 <_vfiprintf_r+0x1a2>
 800a3ae:	b1b0      	cbz	r0, 800a3de <_vfiprintf_r+0x13a>
 800a3b0:	9207      	str	r2, [sp, #28]
 800a3b2:	e014      	b.n	800a3de <_vfiprintf_r+0x13a>
 800a3b4:	eba0 0308 	sub.w	r3, r0, r8
 800a3b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	46a2      	mov	sl, r4
 800a3c2:	e7d2      	b.n	800a36a <_vfiprintf_r+0xc6>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	1d19      	adds	r1, r3, #4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	bfbb      	ittet	lt
 800a3d0:	425b      	neglt	r3, r3
 800a3d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d6:	9307      	strge	r3, [sp, #28]
 800a3d8:	9307      	strlt	r3, [sp, #28]
 800a3da:	bfb8      	it	lt
 800a3dc:	9204      	strlt	r2, [sp, #16]
 800a3de:	7823      	ldrb	r3, [r4, #0]
 800a3e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3e2:	d10a      	bne.n	800a3fa <_vfiprintf_r+0x156>
 800a3e4:	7863      	ldrb	r3, [r4, #1]
 800a3e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3e8:	d132      	bne.n	800a450 <_vfiprintf_r+0x1ac>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9203      	str	r2, [sp, #12]
 800a3f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3f6:	3402      	adds	r4, #2
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4d0 <_vfiprintf_r+0x22c>
 800a3fe:	7821      	ldrb	r1, [r4, #0]
 800a400:	2203      	movs	r2, #3
 800a402:	4650      	mov	r0, sl
 800a404:	f7f5 ff84 	bl	8000310 <memchr>
 800a408:	b138      	cbz	r0, 800a41a <_vfiprintf_r+0x176>
 800a40a:	9b04      	ldr	r3, [sp, #16]
 800a40c:	eba0 000a 	sub.w	r0, r0, sl
 800a410:	2240      	movs	r2, #64	@ 0x40
 800a412:	4082      	lsls	r2, r0
 800a414:	4313      	orrs	r3, r2
 800a416:	3401      	adds	r4, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4829      	ldr	r0, [pc, #164]	@ (800a4c4 <_vfiprintf_r+0x220>)
 800a420:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a424:	2206      	movs	r2, #6
 800a426:	f7f5 ff73 	bl	8000310 <memchr>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d03f      	beq.n	800a4ae <_vfiprintf_r+0x20a>
 800a42e:	4b26      	ldr	r3, [pc, #152]	@ (800a4c8 <_vfiprintf_r+0x224>)
 800a430:	bb1b      	cbnz	r3, 800a47a <_vfiprintf_r+0x1d6>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	3307      	adds	r3, #7
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	3308      	adds	r3, #8
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a440:	443b      	add	r3, r7
 800a442:	9309      	str	r3, [sp, #36]	@ 0x24
 800a444:	e76a      	b.n	800a31c <_vfiprintf_r+0x78>
 800a446:	fb0c 3202 	mla	r2, ip, r2, r3
 800a44a:	460c      	mov	r4, r1
 800a44c:	2001      	movs	r0, #1
 800a44e:	e7a8      	b.n	800a3a2 <_vfiprintf_r+0xfe>
 800a450:	2300      	movs	r3, #0
 800a452:	3401      	adds	r4, #1
 800a454:	9305      	str	r3, [sp, #20]
 800a456:	4619      	mov	r1, r3
 800a458:	f04f 0c0a 	mov.w	ip, #10
 800a45c:	4620      	mov	r0, r4
 800a45e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a462:	3a30      	subs	r2, #48	@ 0x30
 800a464:	2a09      	cmp	r2, #9
 800a466:	d903      	bls.n	800a470 <_vfiprintf_r+0x1cc>
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0c6      	beq.n	800a3fa <_vfiprintf_r+0x156>
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	e7c4      	b.n	800a3fa <_vfiprintf_r+0x156>
 800a470:	fb0c 2101 	mla	r1, ip, r1, r2
 800a474:	4604      	mov	r4, r0
 800a476:	2301      	movs	r3, #1
 800a478:	e7f0      	b.n	800a45c <_vfiprintf_r+0x1b8>
 800a47a:	ab03      	add	r3, sp, #12
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	462a      	mov	r2, r5
 800a480:	4b12      	ldr	r3, [pc, #72]	@ (800a4cc <_vfiprintf_r+0x228>)
 800a482:	a904      	add	r1, sp, #16
 800a484:	4630      	mov	r0, r6
 800a486:	f3af 8000 	nop.w
 800a48a:	4607      	mov	r7, r0
 800a48c:	1c78      	adds	r0, r7, #1
 800a48e:	d1d6      	bne.n	800a43e <_vfiprintf_r+0x19a>
 800a490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x1fe>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x1fe>
 800a49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a49e:	f7ff fddd 	bl	800a05c <__retarget_lock_release_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af1f 	bmi.w	800a2e8 <_vfiprintf_r+0x44>
 800a4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4ac:	e71e      	b.n	800a2ec <_vfiprintf_r+0x48>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <_vfiprintf_r+0x228>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f000 f879 	bl	800a5b0 <_printf_i>
 800a4be:	e7e4      	b.n	800a48a <_vfiprintf_r+0x1e6>
 800a4c0:	0800acb0 	.word	0x0800acb0
 800a4c4:	0800acba 	.word	0x0800acba
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	0800a27f 	.word	0x0800a27f
 800a4d0:	0800acb6 	.word	0x0800acb6

0800a4d4 <_printf_common>:
 800a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d8:	4616      	mov	r6, r2
 800a4da:	4698      	mov	r8, r3
 800a4dc:	688a      	ldr	r2, [r1, #8]
 800a4de:	690b      	ldr	r3, [r1, #16]
 800a4e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	bfb8      	it	lt
 800a4e8:	4613      	movlt	r3, r2
 800a4ea:	6033      	str	r3, [r6, #0]
 800a4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b10a      	cbz	r2, 800a4fa <_printf_common+0x26>
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	6033      	str	r3, [r6, #0]
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	0699      	lsls	r1, r3, #26
 800a4fe:	bf42      	ittt	mi
 800a500:	6833      	ldrmi	r3, [r6, #0]
 800a502:	3302      	addmi	r3, #2
 800a504:	6033      	strmi	r3, [r6, #0]
 800a506:	6825      	ldr	r5, [r4, #0]
 800a508:	f015 0506 	ands.w	r5, r5, #6
 800a50c:	d106      	bne.n	800a51c <_printf_common+0x48>
 800a50e:	f104 0a19 	add.w	sl, r4, #25
 800a512:	68e3      	ldr	r3, [r4, #12]
 800a514:	6832      	ldr	r2, [r6, #0]
 800a516:	1a9b      	subs	r3, r3, r2
 800a518:	42ab      	cmp	r3, r5
 800a51a:	dc26      	bgt.n	800a56a <_printf_common+0x96>
 800a51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	3b00      	subs	r3, #0
 800a524:	bf18      	it	ne
 800a526:	2301      	movne	r3, #1
 800a528:	0692      	lsls	r2, r2, #26
 800a52a:	d42b      	bmi.n	800a584 <_printf_common+0xb0>
 800a52c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a530:	4641      	mov	r1, r8
 800a532:	4638      	mov	r0, r7
 800a534:	47c8      	blx	r9
 800a536:	3001      	adds	r0, #1
 800a538:	d01e      	beq.n	800a578 <_printf_common+0xa4>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	6922      	ldr	r2, [r4, #16]
 800a53e:	f003 0306 	and.w	r3, r3, #6
 800a542:	2b04      	cmp	r3, #4
 800a544:	bf02      	ittt	eq
 800a546:	68e5      	ldreq	r5, [r4, #12]
 800a548:	6833      	ldreq	r3, [r6, #0]
 800a54a:	1aed      	subeq	r5, r5, r3
 800a54c:	68a3      	ldr	r3, [r4, #8]
 800a54e:	bf0c      	ite	eq
 800a550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a554:	2500      	movne	r5, #0
 800a556:	4293      	cmp	r3, r2
 800a558:	bfc4      	itt	gt
 800a55a:	1a9b      	subgt	r3, r3, r2
 800a55c:	18ed      	addgt	r5, r5, r3
 800a55e:	2600      	movs	r6, #0
 800a560:	341a      	adds	r4, #26
 800a562:	42b5      	cmp	r5, r6
 800a564:	d11a      	bne.n	800a59c <_printf_common+0xc8>
 800a566:	2000      	movs	r0, #0
 800a568:	e008      	b.n	800a57c <_printf_common+0xa8>
 800a56a:	2301      	movs	r3, #1
 800a56c:	4652      	mov	r2, sl
 800a56e:	4641      	mov	r1, r8
 800a570:	4638      	mov	r0, r7
 800a572:	47c8      	blx	r9
 800a574:	3001      	adds	r0, #1
 800a576:	d103      	bne.n	800a580 <_printf_common+0xac>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295
 800a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a580:	3501      	adds	r5, #1
 800a582:	e7c6      	b.n	800a512 <_printf_common+0x3e>
 800a584:	18e1      	adds	r1, r4, r3
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	2030      	movs	r0, #48	@ 0x30
 800a58a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a58e:	4422      	add	r2, r4
 800a590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a598:	3302      	adds	r3, #2
 800a59a:	e7c7      	b.n	800a52c <_printf_common+0x58>
 800a59c:	2301      	movs	r3, #1
 800a59e:	4622      	mov	r2, r4
 800a5a0:	4641      	mov	r1, r8
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	47c8      	blx	r9
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d0e6      	beq.n	800a578 <_printf_common+0xa4>
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7d9      	b.n	800a562 <_printf_common+0x8e>
	...

0800a5b0 <_printf_i>:
 800a5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	7e0f      	ldrb	r7, [r1, #24]
 800a5b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5b8:	2f78      	cmp	r7, #120	@ 0x78
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	4680      	mov	r8, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	469a      	mov	sl, r3
 800a5c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5c6:	d807      	bhi.n	800a5d8 <_printf_i+0x28>
 800a5c8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ca:	d80a      	bhi.n	800a5e2 <_printf_i+0x32>
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	f000 80d2 	beq.w	800a776 <_printf_i+0x1c6>
 800a5d2:	2f58      	cmp	r7, #88	@ 0x58
 800a5d4:	f000 80b9 	beq.w	800a74a <_printf_i+0x19a>
 800a5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5e0:	e03a      	b.n	800a658 <_printf_i+0xa8>
 800a5e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5e6:	2b15      	cmp	r3, #21
 800a5e8:	d8f6      	bhi.n	800a5d8 <_printf_i+0x28>
 800a5ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a5f0 <_printf_i+0x40>)
 800a5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a65d 	.word	0x0800a65d
 800a5f8:	0800a5d9 	.word	0x0800a5d9
 800a5fc:	0800a5d9 	.word	0x0800a5d9
 800a600:	0800a5d9 	.word	0x0800a5d9
 800a604:	0800a5d9 	.word	0x0800a5d9
 800a608:	0800a65d 	.word	0x0800a65d
 800a60c:	0800a5d9 	.word	0x0800a5d9
 800a610:	0800a5d9 	.word	0x0800a5d9
 800a614:	0800a5d9 	.word	0x0800a5d9
 800a618:	0800a5d9 	.word	0x0800a5d9
 800a61c:	0800a75d 	.word	0x0800a75d
 800a620:	0800a687 	.word	0x0800a687
 800a624:	0800a717 	.word	0x0800a717
 800a628:	0800a5d9 	.word	0x0800a5d9
 800a62c:	0800a5d9 	.word	0x0800a5d9
 800a630:	0800a77f 	.word	0x0800a77f
 800a634:	0800a5d9 	.word	0x0800a5d9
 800a638:	0800a687 	.word	0x0800a687
 800a63c:	0800a5d9 	.word	0x0800a5d9
 800a640:	0800a5d9 	.word	0x0800a5d9
 800a644:	0800a71f 	.word	0x0800a71f
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	1d1a      	adds	r2, r3, #4
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6032      	str	r2, [r6, #0]
 800a650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a658:	2301      	movs	r3, #1
 800a65a:	e09d      	b.n	800a798 <_printf_i+0x1e8>
 800a65c:	6833      	ldr	r3, [r6, #0]
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	1d19      	adds	r1, r3, #4
 800a662:	6031      	str	r1, [r6, #0]
 800a664:	0606      	lsls	r6, r0, #24
 800a666:	d501      	bpl.n	800a66c <_printf_i+0xbc>
 800a668:	681d      	ldr	r5, [r3, #0]
 800a66a:	e003      	b.n	800a674 <_printf_i+0xc4>
 800a66c:	0645      	lsls	r5, r0, #25
 800a66e:	d5fb      	bpl.n	800a668 <_printf_i+0xb8>
 800a670:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a674:	2d00      	cmp	r5, #0
 800a676:	da03      	bge.n	800a680 <_printf_i+0xd0>
 800a678:	232d      	movs	r3, #45	@ 0x2d
 800a67a:	426d      	negs	r5, r5
 800a67c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a680:	4859      	ldr	r0, [pc, #356]	@ (800a7e8 <_printf_i+0x238>)
 800a682:	230a      	movs	r3, #10
 800a684:	e011      	b.n	800a6aa <_printf_i+0xfa>
 800a686:	6821      	ldr	r1, [r4, #0]
 800a688:	6833      	ldr	r3, [r6, #0]
 800a68a:	0608      	lsls	r0, r1, #24
 800a68c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a690:	d402      	bmi.n	800a698 <_printf_i+0xe8>
 800a692:	0649      	lsls	r1, r1, #25
 800a694:	bf48      	it	mi
 800a696:	b2ad      	uxthmi	r5, r5
 800a698:	2f6f      	cmp	r7, #111	@ 0x6f
 800a69a:	4853      	ldr	r0, [pc, #332]	@ (800a7e8 <_printf_i+0x238>)
 800a69c:	6033      	str	r3, [r6, #0]
 800a69e:	bf14      	ite	ne
 800a6a0:	230a      	movne	r3, #10
 800a6a2:	2308      	moveq	r3, #8
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6aa:	6866      	ldr	r6, [r4, #4]
 800a6ac:	60a6      	str	r6, [r4, #8]
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	bfa2      	ittt	ge
 800a6b2:	6821      	ldrge	r1, [r4, #0]
 800a6b4:	f021 0104 	bicge.w	r1, r1, #4
 800a6b8:	6021      	strge	r1, [r4, #0]
 800a6ba:	b90d      	cbnz	r5, 800a6c0 <_printf_i+0x110>
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	d04b      	beq.n	800a758 <_printf_i+0x1a8>
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ca:	5dc7      	ldrb	r7, [r0, r7]
 800a6cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d0:	462f      	mov	r7, r5
 800a6d2:	42bb      	cmp	r3, r7
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	d9f4      	bls.n	800a6c2 <_printf_i+0x112>
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d10b      	bne.n	800a6f4 <_printf_i+0x144>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	07df      	lsls	r7, r3, #31
 800a6e0:	d508      	bpl.n	800a6f4 <_printf_i+0x144>
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	6861      	ldr	r1, [r4, #4]
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	bfde      	ittt	le
 800a6ea:	2330      	movle	r3, #48	@ 0x30
 800a6ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6f4:	1b92      	subs	r2, r2, r6
 800a6f6:	6122      	str	r2, [r4, #16]
 800a6f8:	f8cd a000 	str.w	sl, [sp]
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	aa03      	add	r2, sp, #12
 800a700:	4621      	mov	r1, r4
 800a702:	4640      	mov	r0, r8
 800a704:	f7ff fee6 	bl	800a4d4 <_printf_common>
 800a708:	3001      	adds	r0, #1
 800a70a:	d14a      	bne.n	800a7a2 <_printf_i+0x1f2>
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	b004      	add	sp, #16
 800a712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f043 0320 	orr.w	r3, r3, #32
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	4833      	ldr	r0, [pc, #204]	@ (800a7ec <_printf_i+0x23c>)
 800a720:	2778      	movs	r7, #120	@ 0x78
 800a722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6831      	ldr	r1, [r6, #0]
 800a72a:	061f      	lsls	r7, r3, #24
 800a72c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a730:	d402      	bmi.n	800a738 <_printf_i+0x188>
 800a732:	065f      	lsls	r7, r3, #25
 800a734:	bf48      	it	mi
 800a736:	b2ad      	uxthmi	r5, r5
 800a738:	6031      	str	r1, [r6, #0]
 800a73a:	07d9      	lsls	r1, r3, #31
 800a73c:	bf44      	itt	mi
 800a73e:	f043 0320 	orrmi.w	r3, r3, #32
 800a742:	6023      	strmi	r3, [r4, #0]
 800a744:	b11d      	cbz	r5, 800a74e <_printf_i+0x19e>
 800a746:	2310      	movs	r3, #16
 800a748:	e7ac      	b.n	800a6a4 <_printf_i+0xf4>
 800a74a:	4827      	ldr	r0, [pc, #156]	@ (800a7e8 <_printf_i+0x238>)
 800a74c:	e7e9      	b.n	800a722 <_printf_i+0x172>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	f023 0320 	bic.w	r3, r3, #32
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	e7f6      	b.n	800a746 <_printf_i+0x196>
 800a758:	4616      	mov	r6, r2
 800a75a:	e7bd      	b.n	800a6d8 <_printf_i+0x128>
 800a75c:	6833      	ldr	r3, [r6, #0]
 800a75e:	6825      	ldr	r5, [r4, #0]
 800a760:	6961      	ldr	r1, [r4, #20]
 800a762:	1d18      	adds	r0, r3, #4
 800a764:	6030      	str	r0, [r6, #0]
 800a766:	062e      	lsls	r6, r5, #24
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	d501      	bpl.n	800a770 <_printf_i+0x1c0>
 800a76c:	6019      	str	r1, [r3, #0]
 800a76e:	e002      	b.n	800a776 <_printf_i+0x1c6>
 800a770:	0668      	lsls	r0, r5, #25
 800a772:	d5fb      	bpl.n	800a76c <_printf_i+0x1bc>
 800a774:	8019      	strh	r1, [r3, #0]
 800a776:	2300      	movs	r3, #0
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	4616      	mov	r6, r2
 800a77c:	e7bc      	b.n	800a6f8 <_printf_i+0x148>
 800a77e:	6833      	ldr	r3, [r6, #0]
 800a780:	1d1a      	adds	r2, r3, #4
 800a782:	6032      	str	r2, [r6, #0]
 800a784:	681e      	ldr	r6, [r3, #0]
 800a786:	6862      	ldr	r2, [r4, #4]
 800a788:	2100      	movs	r1, #0
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7f5 fdc0 	bl	8000310 <memchr>
 800a790:	b108      	cbz	r0, 800a796 <_printf_i+0x1e6>
 800a792:	1b80      	subs	r0, r0, r6
 800a794:	6060      	str	r0, [r4, #4]
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	2300      	movs	r3, #0
 800a79c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a0:	e7aa      	b.n	800a6f8 <_printf_i+0x148>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	47d0      	blx	sl
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d0ad      	beq.n	800a70c <_printf_i+0x15c>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	079b      	lsls	r3, r3, #30
 800a7b4:	d413      	bmi.n	800a7de <_printf_i+0x22e>
 800a7b6:	68e0      	ldr	r0, [r4, #12]
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	bfb8      	it	lt
 800a7be:	4618      	movlt	r0, r3
 800a7c0:	e7a6      	b.n	800a710 <_printf_i+0x160>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	47d0      	blx	sl
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	d09d      	beq.n	800a70c <_printf_i+0x15c>
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	68e3      	ldr	r3, [r4, #12]
 800a7d4:	9903      	ldr	r1, [sp, #12]
 800a7d6:	1a5b      	subs	r3, r3, r1
 800a7d8:	42ab      	cmp	r3, r5
 800a7da:	dcf2      	bgt.n	800a7c2 <_printf_i+0x212>
 800a7dc:	e7eb      	b.n	800a7b6 <_printf_i+0x206>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	f104 0619 	add.w	r6, r4, #25
 800a7e4:	e7f5      	b.n	800a7d2 <_printf_i+0x222>
 800a7e6:	bf00      	nop
 800a7e8:	0800acc1 	.word	0x0800acc1
 800a7ec:	0800acd2 	.word	0x0800acd2

0800a7f0 <__sflush_r>:
 800a7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	0716      	lsls	r6, r2, #28
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	d454      	bmi.n	800a8aa <__sflush_r+0xba>
 800a800:	684b      	ldr	r3, [r1, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	dc02      	bgt.n	800a80c <__sflush_r+0x1c>
 800a806:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dd48      	ble.n	800a89e <__sflush_r+0xae>
 800a80c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a80e:	2e00      	cmp	r6, #0
 800a810:	d045      	beq.n	800a89e <__sflush_r+0xae>
 800a812:	2300      	movs	r3, #0
 800a814:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a818:	682f      	ldr	r7, [r5, #0]
 800a81a:	6a21      	ldr	r1, [r4, #32]
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	d030      	beq.n	800a882 <__sflush_r+0x92>
 800a820:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	0759      	lsls	r1, r3, #29
 800a826:	d505      	bpl.n	800a834 <__sflush_r+0x44>
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a82e:	b10b      	cbz	r3, 800a834 <__sflush_r+0x44>
 800a830:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a832:	1ad2      	subs	r2, r2, r3
 800a834:	2300      	movs	r3, #0
 800a836:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a838:	6a21      	ldr	r1, [r4, #32]
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b0      	blx	r6
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	d106      	bne.n	800a852 <__sflush_r+0x62>
 800a844:	6829      	ldr	r1, [r5, #0]
 800a846:	291d      	cmp	r1, #29
 800a848:	d82b      	bhi.n	800a8a2 <__sflush_r+0xb2>
 800a84a:	4a2a      	ldr	r2, [pc, #168]	@ (800a8f4 <__sflush_r+0x104>)
 800a84c:	410a      	asrs	r2, r1
 800a84e:	07d6      	lsls	r6, r2, #31
 800a850:	d427      	bmi.n	800a8a2 <__sflush_r+0xb2>
 800a852:	2200      	movs	r2, #0
 800a854:	6062      	str	r2, [r4, #4]
 800a856:	04d9      	lsls	r1, r3, #19
 800a858:	6922      	ldr	r2, [r4, #16]
 800a85a:	6022      	str	r2, [r4, #0]
 800a85c:	d504      	bpl.n	800a868 <__sflush_r+0x78>
 800a85e:	1c42      	adds	r2, r0, #1
 800a860:	d101      	bne.n	800a866 <__sflush_r+0x76>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b903      	cbnz	r3, 800a868 <__sflush_r+0x78>
 800a866:	6560      	str	r0, [r4, #84]	@ 0x54
 800a868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a86a:	602f      	str	r7, [r5, #0]
 800a86c:	b1b9      	cbz	r1, 800a89e <__sflush_r+0xae>
 800a86e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a872:	4299      	cmp	r1, r3
 800a874:	d002      	beq.n	800a87c <__sflush_r+0x8c>
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff fbf2 	bl	800a060 <_free_r>
 800a87c:	2300      	movs	r3, #0
 800a87e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a880:	e00d      	b.n	800a89e <__sflush_r+0xae>
 800a882:	2301      	movs	r3, #1
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	4602      	mov	r2, r0
 800a88a:	1c50      	adds	r0, r2, #1
 800a88c:	d1c9      	bne.n	800a822 <__sflush_r+0x32>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d0c6      	beq.n	800a822 <__sflush_r+0x32>
 800a894:	2b1d      	cmp	r3, #29
 800a896:	d001      	beq.n	800a89c <__sflush_r+0xac>
 800a898:	2b16      	cmp	r3, #22
 800a89a:	d11e      	bne.n	800a8da <__sflush_r+0xea>
 800a89c:	602f      	str	r7, [r5, #0]
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e022      	b.n	800a8e8 <__sflush_r+0xf8>
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8a6:	b21b      	sxth	r3, r3
 800a8a8:	e01b      	b.n	800a8e2 <__sflush_r+0xf2>
 800a8aa:	690f      	ldr	r7, [r1, #16]
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	d0f6      	beq.n	800a89e <__sflush_r+0xae>
 800a8b0:	0793      	lsls	r3, r2, #30
 800a8b2:	680e      	ldr	r6, [r1, #0]
 800a8b4:	bf08      	it	eq
 800a8b6:	694b      	ldreq	r3, [r1, #20]
 800a8b8:	600f      	str	r7, [r1, #0]
 800a8ba:	bf18      	it	ne
 800a8bc:	2300      	movne	r3, #0
 800a8be:	eba6 0807 	sub.w	r8, r6, r7
 800a8c2:	608b      	str	r3, [r1, #8]
 800a8c4:	f1b8 0f00 	cmp.w	r8, #0
 800a8c8:	dde9      	ble.n	800a89e <__sflush_r+0xae>
 800a8ca:	6a21      	ldr	r1, [r4, #32]
 800a8cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8ce:	4643      	mov	r3, r8
 800a8d0:	463a      	mov	r2, r7
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b0      	blx	r6
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	dc08      	bgt.n	800a8ec <__sflush_r+0xfc>
 800a8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	4407      	add	r7, r0
 800a8ee:	eba8 0800 	sub.w	r8, r8, r0
 800a8f2:	e7e7      	b.n	800a8c4 <__sflush_r+0xd4>
 800a8f4:	dfbffffe 	.word	0xdfbffffe

0800a8f8 <_fflush_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	690b      	ldr	r3, [r1, #16]
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	b913      	cbnz	r3, 800a908 <_fflush_r+0x10>
 800a902:	2500      	movs	r5, #0
 800a904:	4628      	mov	r0, r5
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	b118      	cbz	r0, 800a912 <_fflush_r+0x1a>
 800a90a:	6a03      	ldr	r3, [r0, #32]
 800a90c:	b90b      	cbnz	r3, 800a912 <_fflush_r+0x1a>
 800a90e:	f7ff fa9f 	bl	8009e50 <__sinit>
 800a912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f3      	beq.n	800a902 <_fflush_r+0xa>
 800a91a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a91c:	07d0      	lsls	r0, r2, #31
 800a91e:	d404      	bmi.n	800a92a <_fflush_r+0x32>
 800a920:	0599      	lsls	r1, r3, #22
 800a922:	d402      	bmi.n	800a92a <_fflush_r+0x32>
 800a924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a926:	f7ff fb98 	bl	800a05a <__retarget_lock_acquire_recursive>
 800a92a:	4628      	mov	r0, r5
 800a92c:	4621      	mov	r1, r4
 800a92e:	f7ff ff5f 	bl	800a7f0 <__sflush_r>
 800a932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a934:	07da      	lsls	r2, r3, #31
 800a936:	4605      	mov	r5, r0
 800a938:	d4e4      	bmi.n	800a904 <_fflush_r+0xc>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	059b      	lsls	r3, r3, #22
 800a93e:	d4e1      	bmi.n	800a904 <_fflush_r+0xc>
 800a940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a942:	f7ff fb8b 	bl	800a05c <__retarget_lock_release_recursive>
 800a946:	e7dd      	b.n	800a904 <_fflush_r+0xc>

0800a948 <__swbuf_r>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	460e      	mov	r6, r1
 800a94c:	4614      	mov	r4, r2
 800a94e:	4605      	mov	r5, r0
 800a950:	b118      	cbz	r0, 800a95a <__swbuf_r+0x12>
 800a952:	6a03      	ldr	r3, [r0, #32]
 800a954:	b90b      	cbnz	r3, 800a95a <__swbuf_r+0x12>
 800a956:	f7ff fa7b 	bl	8009e50 <__sinit>
 800a95a:	69a3      	ldr	r3, [r4, #24]
 800a95c:	60a3      	str	r3, [r4, #8]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	071a      	lsls	r2, r3, #28
 800a962:	d501      	bpl.n	800a968 <__swbuf_r+0x20>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	b943      	cbnz	r3, 800a97a <__swbuf_r+0x32>
 800a968:	4621      	mov	r1, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 f82a 	bl	800a9c4 <__swsetup_r>
 800a970:	b118      	cbz	r0, 800a97a <__swbuf_r+0x32>
 800a972:	f04f 37ff 	mov.w	r7, #4294967295
 800a976:	4638      	mov	r0, r7
 800a978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	1a98      	subs	r0, r3, r2
 800a980:	6963      	ldr	r3, [r4, #20]
 800a982:	b2f6      	uxtb	r6, r6
 800a984:	4283      	cmp	r3, r0
 800a986:	4637      	mov	r7, r6
 800a988:	dc05      	bgt.n	800a996 <__swbuf_r+0x4e>
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	f7ff ffb3 	bl	800a8f8 <_fflush_r>
 800a992:	2800      	cmp	r0, #0
 800a994:	d1ed      	bne.n	800a972 <__swbuf_r+0x2a>
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	3b01      	subs	r3, #1
 800a99a:	60a3      	str	r3, [r4, #8]
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	701e      	strb	r6, [r3, #0]
 800a9a4:	6962      	ldr	r2, [r4, #20]
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d004      	beq.n	800a9b6 <__swbuf_r+0x6e>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	07db      	lsls	r3, r3, #31
 800a9b0:	d5e1      	bpl.n	800a976 <__swbuf_r+0x2e>
 800a9b2:	2e0a      	cmp	r6, #10
 800a9b4:	d1df      	bne.n	800a976 <__swbuf_r+0x2e>
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f7ff ff9d 	bl	800a8f8 <_fflush_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0d9      	beq.n	800a976 <__swbuf_r+0x2e>
 800a9c2:	e7d6      	b.n	800a972 <__swbuf_r+0x2a>

0800a9c4 <__swsetup_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4b29      	ldr	r3, [pc, #164]	@ (800aa6c <__swsetup_r+0xa8>)
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	6818      	ldr	r0, [r3, #0]
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	b118      	cbz	r0, 800a9d8 <__swsetup_r+0x14>
 800a9d0:	6a03      	ldr	r3, [r0, #32]
 800a9d2:	b90b      	cbnz	r3, 800a9d8 <__swsetup_r+0x14>
 800a9d4:	f7ff fa3c 	bl	8009e50 <__sinit>
 800a9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9dc:	0719      	lsls	r1, r3, #28
 800a9de:	d422      	bmi.n	800aa26 <__swsetup_r+0x62>
 800a9e0:	06da      	lsls	r2, r3, #27
 800a9e2:	d407      	bmi.n	800a9f4 <__swsetup_r+0x30>
 800a9e4:	2209      	movs	r2, #9
 800a9e6:	602a      	str	r2, [r5, #0]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	e033      	b.n	800aa5c <__swsetup_r+0x98>
 800a9f4:	0758      	lsls	r0, r3, #29
 800a9f6:	d512      	bpl.n	800aa1e <__swsetup_r+0x5a>
 800a9f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9fa:	b141      	cbz	r1, 800aa0e <__swsetup_r+0x4a>
 800a9fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa00:	4299      	cmp	r1, r3
 800aa02:	d002      	beq.n	800aa0a <__swsetup_r+0x46>
 800aa04:	4628      	mov	r0, r5
 800aa06:	f7ff fb2b 	bl	800a060 <_free_r>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa14:	81a3      	strh	r3, [r4, #12]
 800aa16:	2300      	movs	r3, #0
 800aa18:	6063      	str	r3, [r4, #4]
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	f043 0308 	orr.w	r3, r3, #8
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	b94b      	cbnz	r3, 800aa3e <__swsetup_r+0x7a>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa34:	d003      	beq.n	800aa3e <__swsetup_r+0x7a>
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 f84f 	bl	800aadc <__smakebuf_r>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	f013 0201 	ands.w	r2, r3, #1
 800aa46:	d00a      	beq.n	800aa5e <__swsetup_r+0x9a>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	60a2      	str	r2, [r4, #8]
 800aa4c:	6962      	ldr	r2, [r4, #20]
 800aa4e:	4252      	negs	r2, r2
 800aa50:	61a2      	str	r2, [r4, #24]
 800aa52:	6922      	ldr	r2, [r4, #16]
 800aa54:	b942      	cbnz	r2, 800aa68 <__swsetup_r+0xa4>
 800aa56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa5a:	d1c5      	bne.n	800a9e8 <__swsetup_r+0x24>
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	0799      	lsls	r1, r3, #30
 800aa60:	bf58      	it	pl
 800aa62:	6962      	ldrpl	r2, [r4, #20]
 800aa64:	60a2      	str	r2, [r4, #8]
 800aa66:	e7f4      	b.n	800aa52 <__swsetup_r+0x8e>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7f7      	b.n	800aa5c <__swsetup_r+0x98>
 800aa6c:	24000024 	.word	0x24000024

0800aa70 <_sbrk_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d06      	ldr	r5, [pc, #24]	@ (800aa8c <_sbrk_r+0x1c>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	602b      	str	r3, [r5, #0]
 800aa7c:	f7f7 f808 	bl	8001a90 <_sbrk>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_sbrk_r+0x1a>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_sbrk_r+0x1a>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	24000370 	.word	0x24000370

0800aa90 <__swhatbuf_r>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	460c      	mov	r4, r1
 800aa94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	b096      	sub	sp, #88	@ 0x58
 800aa9c:	4615      	mov	r5, r2
 800aa9e:	461e      	mov	r6, r3
 800aaa0:	da0d      	bge.n	800aabe <__swhatbuf_r+0x2e>
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aaa8:	f04f 0100 	mov.w	r1, #0
 800aaac:	bf14      	ite	ne
 800aaae:	2340      	movne	r3, #64	@ 0x40
 800aab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aab4:	2000      	movs	r0, #0
 800aab6:	6031      	str	r1, [r6, #0]
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	b016      	add	sp, #88	@ 0x58
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	466a      	mov	r2, sp
 800aac0:	f000 f848 	bl	800ab54 <_fstat_r>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	dbec      	blt.n	800aaa2 <__swhatbuf_r+0x12>
 800aac8:	9901      	ldr	r1, [sp, #4]
 800aaca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aad2:	4259      	negs	r1, r3
 800aad4:	4159      	adcs	r1, r3
 800aad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aada:	e7eb      	b.n	800aab4 <__swhatbuf_r+0x24>

0800aadc <__smakebuf_r>:
 800aadc:	898b      	ldrh	r3, [r1, #12]
 800aade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae0:	079d      	lsls	r5, r3, #30
 800aae2:	4606      	mov	r6, r0
 800aae4:	460c      	mov	r4, r1
 800aae6:	d507      	bpl.n	800aaf8 <__smakebuf_r+0x1c>
 800aae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	6163      	str	r3, [r4, #20]
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf8:	ab01      	add	r3, sp, #4
 800aafa:	466a      	mov	r2, sp
 800aafc:	f7ff ffc8 	bl	800aa90 <__swhatbuf_r>
 800ab00:	9f00      	ldr	r7, [sp, #0]
 800ab02:	4605      	mov	r5, r0
 800ab04:	4639      	mov	r1, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff fb16 	bl	800a138 <_malloc_r>
 800ab0c:	b948      	cbnz	r0, 800ab22 <__smakebuf_r+0x46>
 800ab0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab12:	059a      	lsls	r2, r3, #22
 800ab14:	d4ee      	bmi.n	800aaf4 <__smakebuf_r+0x18>
 800ab16:	f023 0303 	bic.w	r3, r3, #3
 800ab1a:	f043 0302 	orr.w	r3, r3, #2
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	e7e2      	b.n	800aae8 <__smakebuf_r+0xc>
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	6020      	str	r0, [r4, #0]
 800ab26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	9b01      	ldr	r3, [sp, #4]
 800ab2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab32:	b15b      	cbz	r3, 800ab4c <__smakebuf_r+0x70>
 800ab34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 f81d 	bl	800ab78 <_isatty_r>
 800ab3e:	b128      	cbz	r0, 800ab4c <__smakebuf_r+0x70>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	431d      	orrs	r5, r3
 800ab50:	81a5      	strh	r5, [r4, #12]
 800ab52:	e7cf      	b.n	800aaf4 <__smakebuf_r+0x18>

0800ab54 <_fstat_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d07      	ldr	r5, [pc, #28]	@ (800ab74 <_fstat_r+0x20>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	f7f6 ff6c 	bl	8001a3e <_fstat>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d102      	bne.n	800ab70 <_fstat_r+0x1c>
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	b103      	cbz	r3, 800ab70 <_fstat_r+0x1c>
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	24000370 	.word	0x24000370

0800ab78 <_isatty_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d06      	ldr	r5, [pc, #24]	@ (800ab94 <_isatty_r+0x1c>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	f7f6 ff6b 	bl	8001a5e <_isatty>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_isatty_r+0x1a>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_isatty_r+0x1a>
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	24000370 	.word	0x24000370

0800ab98 <_init>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr

0800aba4 <_fini>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	bf00      	nop
 800aba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abaa:	bc08      	pop	{r3}
 800abac:	469e      	mov	lr, r3
 800abae:	4770      	bx	lr
